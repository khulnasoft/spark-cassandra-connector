Index.PACKAGES = {"scala.collection" : [], "com.khulnasoft.spark.connector.rdd.partitioner.dht" : [{"name" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html", "members_object" : [{"label" : "BigIntTokenOrdering", "tail" : ": Ordering[BigIntToken]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.BigIntTokenOrdering", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#BigIntTokenOrdering:Ordering[com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken]", "kind" : "implicit val"}, {"label" : "BigIntTokenBucketing", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.BigIntTokenBucketing", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#BigIntTokenBucketing", "kind" : "implicit object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "nativeToken", "tail" : "(): oss.driver.api.core.metadata.token.Token", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.nativeToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#nativeToken:com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "def"}, {"label" : "ord", "tail" : "(): Ordering[BigInt]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.ord", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#ord:Ordering[BigInt]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#toString():String", "kind" : "def"}, {"label" : "compare", "tail" : "(that: Token[BigInt]): Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.compare", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#compare(that:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[BigInt]):Int", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": BigInt", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.BigIntToken.value", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#value:BigInt", "kind" : "val"}, {"label" : "compareTo", "tail" : "(that: Token[BigInt]): Int", "member" : "scala.math.Ordered.compareTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: Token[BigInt]): Boolean", "member" : "scala.math.Ordered.>=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: Token[BigInt]): Boolean", "member" : "scala.math.Ordered.<=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: Token[BigInt]): Boolean", "member" : "scala.math.Ordered.>", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: Token[BigInt]): Boolean", "member" : "scala.math.Ordered.<", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/BigIntToken.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html", "members_object" : [{"label" : "LongTokenOrdering", "tail" : ": Ordering[LongToken]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.LongTokenOrdering", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#LongTokenOrdering:Ordering[com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken]", "kind" : "implicit val"}, {"label" : "LongTokenBucketing", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.LongTokenBucketing", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#LongTokenBucketing", "kind" : "implicit object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "nativeToken", "tail" : "(): oss.driver.api.core.metadata.token.Token", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.nativeToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#nativeToken:com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "def"}, {"label" : "ord", "tail" : "(): Ordering[Long]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.ord", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#ord:Ordering[Long]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#toString():String", "kind" : "def"}, {"label" : "compare", "tail" : "(that: Token[Long]): Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.compare", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#compare(that:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Long]):Int", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.LongToken.value", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#value:Long", "kind" : "val"}, {"label" : "compareTo", "tail" : "(that: Token[Long]): Int", "member" : "scala.math.Ordered.compareTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: Token[Long]): Boolean", "member" : "scala.math.Ordered.>=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: Token[Long]): Boolean", "member" : "scala.math.Ordered.<=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: Token[Long]): Boolean", "member" : "scala.math.Ordered.>", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: Token[Long]): Boolean", "member" : "scala.math.Ordered.<", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/LongToken.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.Token", "members_trait" : [{"label" : "compareTo", "tail" : "(that: Token[T]): Int", "member" : "scala.math.Ordered.compareTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: Token[T]): Boolean", "member" : "scala.math.Ordered.>=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: Token[T]): Boolean", "member" : "scala.math.Ordered.<=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: Token[T]): Boolean", "member" : "scala.math.Ordered.>", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: Token[T]): Boolean", "member" : "scala.math.Ordered.<", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nativeToken", "tail" : "(): oss.driver.api.core.metadata.token.Token", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.Token.nativeToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#nativeToken:com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.Token.value", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#value:T", "kind" : "abstract def"}, {"label" : "ord", "tail" : "(): Ordering[T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.Token.ord", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#ord:Ordering[T]", "kind" : "abstract def"}, {"label" : "compare", "tail" : "(that: Token[T]): Int", "member" : "scala.math.Ordered.compare", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html#compare(that:A):Int", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/Token.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory", "members_trait" : [{"label" : "ringFraction", "tail" : "(token1: T, token2: T): Double", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.ringFraction", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#ringFraction(token1:T,token2:T):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tokenBucketing", "tail" : "(): MonotonicBucketing[T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.tokenBucketing", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#tokenBucketing:com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing[T]", "kind" : "implicit abstract def"}, {"label" : "tokenOrdering", "tail" : "(): Ordering[T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.tokenOrdering", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#tokenOrdering:Ordering[T]", "kind" : "implicit abstract def"}, {"label" : "tokenToString", "tail" : "(token: T): String", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.tokenToString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#tokenToString(token:T):String", "kind" : "abstract def"}, {"label" : "tokenFromString", "tail" : "(string: String): T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.tokenFromString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#tokenFromString(string:String):T", "kind" : "abstract def"}, {"label" : "distance", "tail" : "(token1: T, token2: T): BigInt", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.distance", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#distance(token1:T,token2:T):BigInt", "kind" : "abstract def"}, {"label" : "totalTokenCount", "tail" : "(): BigInt", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.totalTokenCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#totalTokenCount:BigInt", "kind" : "abstract def"}, {"label" : "maxToken", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.maxToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#maxToken:T", "kind" : "abstract def"}, {"label" : "minToken", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.minToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html#minToken:T", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html", "members_object" : [{"label" : "forSystemLocalPartitioner", "tail" : "(connector: CassandraConnector): TokenFactory[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.forSystemLocalPartitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#forSystemLocalPartitioner(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.V,com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.T]", "kind" : "def"}, {"label" : "forCassandraPartitioner", "tail" : "(partitionerClassName: String): TokenFactory[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.forCassandraPartitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#forCassandraPartitioner(partitionerClassName:String):com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.V,com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.T]", "kind" : "def"}, {"label" : "RandomPartitionerTokenFactory", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.RandomPartitionerTokenFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#RandomPartitionerTokenFactory", "kind" : "implicit object"}, {"label" : "Murmur3TokenFactory", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.Murmur3TokenFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#Murmur3TokenFactory", "kind" : "implicit object"}, {"label" : "T", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.T", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#T=tforSome{typet<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.V]}", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory.V", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#V=tforSome{typet}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenFactory.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange", "shortDescription" : "", "members_case class" : [{"label" : "endNativeToken", "tail" : "(): oss.driver.api.core.metadata.token.Token", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.endNativeToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#endNativeToken():com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "def"}, {"label" : "startNativeToken", "tail" : "(): oss.driver.api.core.metadata.token.Token", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.startNativeToken", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#startNativeToken():com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "def"}, {"label" : "contains", "tail" : "(token: T)(tf: TokenFactory[V, T]): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.contains", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#contains(token:T)(implicittf:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]):Boolean", "kind" : "def"}, {"label" : "unwrap", "tail" : "(tf: TokenFactory[V, T]): Seq[TokenRange[V, T]]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.unwrap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#unwrap(implicittf:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]):Seq[com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange[V,T]]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(tf: TokenFactory[V, T]): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#isEmpty(implicittf:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]):Boolean", "kind" : "def"}, {"label" : "isFull", "tail" : "(tf: TokenFactory[V, T]): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.isFull", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#isFull(implicittf:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]):Boolean", "kind" : "def"}, {"label" : "isWrappedAround", "tail" : "(tf: TokenFactory[V, T]): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.isWrappedAround", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#isWrappedAround(implicittf:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]):Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange#<init>", "error" : "unsupported entity"}, {"label" : "tokenFactory", "tail" : ": TokenFactory[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.tokenFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#tokenFactory:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]", "kind" : "val"}, {"label" : "replicas", "tail" : ": Set[InetAddress]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.replicas", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#replicas:Set[java.net.InetAddress]", "kind" : "val"}, {"label" : "end", "tail" : ": T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.end", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#end:T", "kind" : "val"}, {"label" : "start", "tail" : ": T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange.start", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#start:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/dht\/TokenRange.html", "kind" : "case class"}], "com.khulnasoft" : [], "com.khulnasoft.driver" : [], "com.khulnasoft.spark.connector.rdd.reader" : [{"name" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReader", "shortDescription" : "Transforms a Cassandra Java driver Row into an object of a user provided class,calling the class constructor", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReader.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"label" : "neededColumns", "tail" : ": Some[Seq[ColumnRef]]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#neededColumns:Some[Seq[com.khulnasoft.spark.connector.ColumnRef]]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReader#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReader.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReaderFactory", "shortDescription" : "", "members_class" : [{"label" : "targetClass", "tail" : "(): Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReaderFactory.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#targetClass:Class[R]", "kind" : "def"}, {"label" : "rowReader", "tail" : "(tableDef: TableDef, selection: IndexedSeq[ColumnRef]): ClassBasedRowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReaderFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#rowReader(tableDef:com.khulnasoft.spark.connector.cql.TableDef,selection:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReader[R]", "kind" : "def"}, {"label" : "columnMapper", "tail" : "(): ColumnMapper[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReaderFactory.columnMapper", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#columnMapper:com.khulnasoft.spark.connector.mapper.ColumnMapper[R]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.ClassBasedRowReaderFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ClassBasedRowReaderFactory.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader", "members_trait" : [{"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "ct", "tail" : "(): ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#ct:scala.reflect.ClassTag[R]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReader.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):T", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader1", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader1.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader1#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader1.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader1.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader10", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader10.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader10#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader10.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader10.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader11", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader11.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader11#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader11.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader11.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader12", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader12.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader12#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader12.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader12.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader2", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader2.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader2#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader2.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader2.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader3", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader3.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader3#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader3.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader3.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader4", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader4.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader4#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader4.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader4.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader5", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader5.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader5#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader5.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader5.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader6", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader6.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader6#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader6.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader6.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader7", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader7.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader7#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader7.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader7.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader8", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader8.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader8#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader8.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader8.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader9", "shortDescription" : "", "members_class" : [{"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): R", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader9.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):R", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader9#<init>", "error" : "unsupported entity"}, {"label" : "ct", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader9.ct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#ct:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "neededColumns", "tail" : "(): None.type", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#neededColumns:None.type", "kind" : "def"}, {"label" : "targetClass", "tail" : ": Class[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.FunctionBasedRowReader.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#targetClass:Class[R]", "kind" : "val"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/FunctionBasedRowReader9.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits", "members_trait" : [{"label" : "valueRowReaderFactory", "tail" : "(ev1: TypeConverter[T], ev2: IsSingleColumnType[T]): RowReaderFactory[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.valueRowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#valueRowReaderFactory[T](implicitev1:com.khulnasoft.spark.connector.types.TypeConverter[T],implicitev2:LowPriorityRowReaderFactoryImplicits.this.IsSingleColumnType[T]):com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T]", "kind" : "implicit def"}, {"label" : "classBasedRowReaderFactory", "tail" : "(tt: scala.reflect.api.JavaUniverse.TypeTag[R], cm: ColumnMapper[R], ev: DoesntHaveImplicit[R, IsSingleColumnType[R]]): RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.classBasedRowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#classBasedRowReaderFactory[R<:java.io.Serializable](implicittt:reflect.runtime.universe.TypeTag[R],implicitcm:com.khulnasoft.spark.connector.mapper.ColumnMapper[R],implicitev:com.khulnasoft.spark.connector.util.MagicalTypeTricks.DoesntHaveImplicit[R,LowPriorityRowReaderFactoryImplicits.this.IsSingleColumnType[R]]):com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit def"}, {"label" : "isSingleColumnType", "tail" : "(ev1: TypeConverter[T], ev2: IsNotSubclassOf[T, Tuple2[_, _]], ev3: IsNotSubclassOf[T, Tuple3[_, _, _]]): IsSingleColumnType[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.isSingleColumnType", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#isSingleColumnType[T](implicitev1:com.khulnasoft.spark.connector.types.TypeConverter[T],implicitev2:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[T,Tuple2[_,_]],implicitev3:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[T,Tuple3[_,_,_]]):LowPriorityRowReaderFactoryImplicits.this.IsSingleColumnType[T]", "kind" : "implicit def"}, {"label" : "IsSingleColumnType", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.IsSingleColumnType", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#IsSingleColumnType[T]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.PrefetchingResultSetIterator", "shortDescription" : "Allows to efficiently iterate over a large, paged ResultSet,asynchronously prefetching the next page.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): Row", "member" : "com.khulnasoft.spark.connector.rdd.reader.PrefetchingResultSetIterator.next", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#next():com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.reader.PrefetchingResultSetIterator.hasNext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#hasNext:Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.PrefetchingResultSetIterator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Row]", "member" : "scala.collection.Iterator.toStream", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Row]", "member" : "scala.collection.Iterator.toIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Row]", "member" : "scala.collection.Iterator.toTraversable", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[Row], Iterator[Row])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[Row]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Row) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Row) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Row) ⇒ Boolean): Option[Row]", "member" : "scala.collection.Iterator.find", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Row) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Row) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Row) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(Row, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[(Row, B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Row) ⇒ Boolean): Iterator[Row]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Row) ⇒ Boolean): (Iterator[Row], Iterator[Row])", "member" : "scala.collection.Iterator.span", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Row) ⇒ Boolean): (Iterator[Row], Iterator[Row])", "member" : "scala.collection.Iterator.partition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Row) ⇒ Boolean): Iterator[Row]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Row, B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Row) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Row, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Row) ⇒ Boolean): Iterator[Row]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Row) ⇒ Boolean): Iterator[Row]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: (Row, B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Row) ⇒ Boolean): Iterator[Row]", "member" : "scala.collection.Iterator.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Row) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Row) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[Row]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[Row]", "member" : "scala.collection.Iterator.slice", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[Row]", "member" : "scala.collection.Iterator.drop", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[Row]", "member" : "scala.collection.Iterator.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[Row]", "member" : "scala.collection.Iterator.seq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Row, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Row, Col[Row]]): Col[Row]", "member" : "scala.collection.TraversableOnce.to", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Row]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Row]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Row]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Row]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Row]", "member" : "scala.collection.TraversableOnce.toList", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Row) ⇒ B)(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.minBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Row) ⇒ B)(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Row", "member" : "scala.collection.TraversableOnce.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Row) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Row, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Row) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Row, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Row) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Row, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Row) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Row, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Row) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Row, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Row) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Row]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/PrefetchingResultSetIterator.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.RowReader", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "neededColumns", "tail" : "(): Option[Seq[ColumnRef]]", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#neededColumns:Option[Seq[com.khulnasoft.spark.connector.ColumnRef]]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): T", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReader.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):T", "kind" : "abstract def"}], "shortDescription" : "Transforms a Cassandra Java driver Row into high-level row representation, e.g.", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReader.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "targetClass", "tail" : "(): Class[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#targetClass:Class[T]", "kind" : "abstract def"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "abstract def"}], "shortDescription" : "Creates RowReader objects prepared for reading rows from the given Cassandra table.", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html", "members_object" : [{"label" : "IsSingleColumnType", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.IsSingleColumnType", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/LowPriorityRowReaderFactoryImplicits.html#IsSingleColumnType[T]extendsAnyRef", "kind" : "trait"}, {"label" : "GenericRowReader$", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory.GenericRowReader$", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#GenericRowReader$", "kind" : "implicit object"}, {"label" : "valueRowReaderFactory", "tail" : "(ev1: TypeConverter[T], ev2: IsSingleColumnType[T]): RowReaderFactory[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.valueRowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#valueRowReaderFactory[T](implicitev1:com.khulnasoft.spark.connector.types.TypeConverter[T],implicitev2:LowPriorityRowReaderFactoryImplicits.this.IsSingleColumnType[T]):com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T]", "kind" : "implicit def"}, {"label" : "classBasedRowReaderFactory", "tail" : "(tt: scala.reflect.api.JavaUniverse.TypeTag[R], cm: ColumnMapper[R], ev: DoesntHaveImplicit[R, IsSingleColumnType[R]]): RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.classBasedRowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#classBasedRowReaderFactory[R<:java.io.Serializable](implicittt:reflect.runtime.universe.TypeTag[R],implicitcm:com.khulnasoft.spark.connector.mapper.ColumnMapper[R],implicitev:com.khulnasoft.spark.connector.util.MagicalTypeTricks.DoesntHaveImplicit[R,LowPriorityRowReaderFactoryImplicits.this.IsSingleColumnType[R]]):com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit def"}, {"label" : "isSingleColumnType", "tail" : "(ev1: TypeConverter[T], ev2: IsNotSubclassOf[T, Tuple2[_, _]], ev3: IsNotSubclassOf[T, Tuple3[_, _, _]]): IsSingleColumnType[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.LowPriorityRowReaderFactoryImplicits.isSingleColumnType", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#isSingleColumnType[T](implicitev1:com.khulnasoft.spark.connector.types.TypeConverter[T],implicitev2:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[T,Tuple2[_,_]],implicitev3:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[T,Tuple3[_,_,_]]):LowPriorityRowReaderFactoryImplicits.this.IsSingleColumnType[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/RowReaderFactory.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory", "members_trait" : [{"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ThisRowReaderAsFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "targetClass", "tail" : "(): Class[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html#targetClass:Class[T]", "kind" : "abstract def"}], "shortDescription" : "Helper for implementing RowReader objects that can be used as RowReaderFactory objects.", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ThisRowReaderAsFactory.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReader", "shortDescription" : "", "members_class" : [{"label" : "neededColumns", "tail" : "(): Option[Seq[ColumnRef]]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#neededColumns:Option[Seq[com.khulnasoft.spark.connector.ColumnRef]]", "kind" : "def"}, {"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): T", "member" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReader.read", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):T", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReader#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReader.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReaderFactory", "shortDescription" : "", "members_class" : [{"label" : "targetClass", "tail" : "(): Class[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReaderFactory.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#targetClass:Class[T]", "kind" : "def"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[T]", "member" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReaderFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[T]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.reader.ValueRowReaderFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/reader\/ValueRowReaderFactory.html", "kind" : "class"}], "scala.tools.nsc.interpreter" : [], "com.khulnasoft.driver.core" : [{"name" : "com.khulnasoft.driver.core.MetadataHook", "shortDescription" : "", "members_class" : [{"member" : "com.khulnasoft.driver.core.MetadataHook#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/driver\/core\/MetadataHook.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/driver\/core\/MetadataHook.html", "kind" : "class"}], "org.apache.spark.sql.cassandra.execution" : [{"name" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec", "shortDescription" : "A physical plan for performing a join against a CassandraTable given a set of keys.", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: SparkPlan): CassandraDirectJoinExec", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#withNewChildInternal(newChild:org.apache.spark.sql.execution.SparkPlan):org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.simpleString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "doExecute", "tail" : "(): RDD[InternalRow]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.doExecute", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#doExecute():org.apache.spark.rdd.RDD[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "createResultProjection", "tail" : "(): (InternalRow) ⇒ InternalRow", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.createResultProjection", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#createResultProjection():org.apache.spark.sql.catalyst.InternalRow=>org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "output", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.output", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "right", "tail" : ": SparkPlan", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.right", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#right:org.apache.spark.sql.execution.SparkPlan", "kind" : "val"}, {"label" : "left", "tail" : ": SparkPlan", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.left", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#left:org.apache.spark.sql.execution.SparkPlan", "kind" : "val"}, {"label" : "joinExpressions", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.joinExpressions", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#joinExpressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "joinColumns", "tail" : ": Seq[com.khulnasoft.spark.connector.ColumnName]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.joinColumns", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#joinColumns:Seq[com.khulnasoft.spark.connector.ColumnName]", "kind" : "val"}, {"label" : "otherJoinCouplets", "tail" : ": Seq[(Expression, Expression)]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.otherJoinCouplets", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#otherJoinCouplets:Seq[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "val"}, {"label" : "pkJoinCoulplets", "tail" : ": Seq[(Expression, Expression)]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.pkJoinCoulplets", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#pkJoinCoulplets:Seq[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "val"}, {"label" : "leftJoinCouplets", "tail" : ": Seq[(Expression, Expression)]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.leftJoinCouplets", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#leftJoinCouplets:Seq[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "val"}, {"label" : "exprIdToCassandra", "tail" : ": Map[ExprId, String]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.exprIdToCassandra", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#exprIdToCassandra:scala.collection.immutable.Map[org.apache.spark.sql.catalyst.expressions.ExprId,String]", "kind" : "val"}, {"label" : "cassandraSchema", "tail" : ": StructType", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.cassandraSchema", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#cassandraSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "primaryKeys", "tail" : ": IndexedSeq[String]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.primaryKeys", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#primaryKeys:IndexedSeq[String]", "kind" : "val"}, {"label" : "selectedColumns", "tail" : ": IndexedSeq[ColumnRef]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.selectedColumns", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.readConf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "whereClause", "tail" : ": CqlWhereClause", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.whereClause", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#whereClause:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "cqlQueryParts", "tail" : ": CqlQueryParts", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.cqlQueryParts", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "table", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.table", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#table:String", "kind" : "val"}, {"label" : "keyspace", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.keyspace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#keyspace:String", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.connector", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "keySource", "tail" : ": SparkPlan", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.keySource", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#keySource:org.apache.spark.sql.execution.SparkPlan", "kind" : "val"}, {"label" : "cassandraScan", "tail" : "(): CassandraScan", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.cassandraScan", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#cassandraScan:com.khulnasoft.spark.connector.datasource.CassandraScan", "kind" : "def"}, {"label" : "metrics", "tail" : ": Map[String, SQLMetric]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.metrics", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#metrics:scala.collection.immutable.Map[String,org.apache.spark.sql.execution.metric.SQLMetric]", "kind" : "lazy val"}, {"label" : "numOutputRows", "tail" : ": SQLMetric", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.numOutputRows", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#numOutputRows:org.apache.spark.sql.execution.metric.SQLMetric", "kind" : "val"}, {"member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec#<init>", "error" : "unsupported entity"}, {"label" : "cassandraPlan", "tail" : ": BatchScanExec", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.cassandraPlan", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#cassandraPlan:org.apache.spark.sql.execution.datasources.v2.BatchScanExec", "kind" : "val"}, {"label" : "aliasMap", "tail" : ": Map[String, ExprId]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.aliasMap", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#aliasMap:Map[String,org.apache.spark.sql.catalyst.expressions.ExprId]", "kind" : "val"}, {"label" : "child", "tail" : ": SparkPlan", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.child", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#child:org.apache.spark.sql.execution.SparkPlan", "kind" : "val"}, {"label" : "condition", "tail" : ": Option[Expression]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.condition", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#condition:Option[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "cassandraSide", "tail" : ": BuildSide", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.cassandraSide", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#cassandraSide:org.apache.spark.sql.catalyst.optimizer.BuildSide", "kind" : "val"}, {"label" : "joinType", "tail" : ": JoinType", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.joinType", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#joinType:org.apache.spark.sql.catalyst.plans.JoinType", "kind" : "val"}, {"label" : "rightKeys", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.rightKeys", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#rightKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "leftKeys", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec.leftKeys", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#leftKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "verboseStringWithOperatorId", "tail" : "(): String", "member" : "org.apache.spark.sql.execution.UnaryExecNode.verboseStringWithOperatorId", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#verboseStringWithOperatorId():String", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (SparkPlan) ⇒ SparkPlan): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "cleanupResources", "tail" : "(): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.cleanupResources", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#cleanupResources():Unit", "kind" : "def"}, {"label" : "executeTail", "tail" : "(n: Int): Array[InternalRow]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeTail", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeTail(n:Int):Array[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "executeTake", "tail" : "(n: Int): Array[InternalRow]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeTake", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeTake(n:Int):Array[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "executeCollectPublic", "tail" : "(): Array[Row]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeCollectPublic", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeCollectPublic():Array[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "executeToIterator", "tail" : "(): Iterator[InternalRow]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeToIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeToIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "executeCollect", "tail" : "(): Array[InternalRow]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeCollect", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeCollect():Array[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "toRowBased", "tail" : "(): SparkPlan", "member" : "org.apache.spark.sql.execution.SparkPlan.toRowBased", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#toRowBased:org.apache.spark.sql.execution.SparkPlan", "kind" : "def"}, {"label" : "doExecuteWrite", "tail" : "(writeFilesSpec: WriteFilesSpec): RDD[WriterCommitMessage]", "member" : "org.apache.spark.sql.execution.SparkPlan.doExecuteWrite", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#doExecuteWrite(writeFilesSpec:org.apache.spark.sql.execution.datasources.WriteFilesSpec):org.apache.spark.rdd.RDD[org.apache.spark.sql.connector.write.WriterCommitMessage]", "kind" : "def"}, {"label" : "doExecuteColumnar", "tail" : "(): RDD[ColumnarBatch]", "member" : "org.apache.spark.sql.execution.SparkPlan.doExecuteColumnar", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#doExecuteColumnar():org.apache.spark.rdd.RDD[org.apache.spark.sql.vectorized.ColumnarBatch]", "kind" : "def"}, {"label" : "doExecuteBroadcast", "tail" : "(): Broadcast[T]", "member" : "org.apache.spark.sql.execution.SparkPlan.doExecuteBroadcast", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#doExecuteBroadcast[T]():org.apache.spark.broadcast.Broadcast[T]", "kind" : "def"}, {"label" : "doPrepare", "tail" : "(): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.doPrepare", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#doPrepare():Unit", "kind" : "def"}, {"label" : "prepare", "tail" : "(): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.prepare", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#prepare():Unit", "kind" : "final def"}, {"label" : "waitForSubqueries", "tail" : "(): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.waitForSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#waitForSubqueries():Unit", "kind" : "def"}, {"label" : "prepareSubqueries", "tail" : "(): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.prepareSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#prepareSubqueries():Unit", "kind" : "def"}, {"label" : "executeQuery", "tail" : "(query: ⇒ T): T", "member" : "org.apache.spark.sql.execution.SparkPlan.executeQuery", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeQuery[T](query:=>T):T", "kind" : "final def"}, {"label" : "executeWrite", "tail" : "(writeFilesSpec: WriteFilesSpec): RDD[WriterCommitMessage]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeWrite", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeWrite(writeFilesSpec:org.apache.spark.sql.execution.datasources.WriteFilesSpec):org.apache.spark.rdd.RDD[org.apache.spark.sql.connector.write.WriterCommitMessage]", "kind" : "def"}, {"label" : "executeColumnar", "tail" : "(): RDD[ColumnarBatch]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeColumnar", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeColumnar():org.apache.spark.rdd.RDD[org.apache.spark.sql.vectorized.ColumnarBatch]", "kind" : "final def"}, {"label" : "executeBroadcast", "tail" : "(): Broadcast[T]", "member" : "org.apache.spark.sql.execution.SparkPlan.executeBroadcast", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#executeBroadcast[T]():org.apache.spark.broadcast.Broadcast[T]", "kind" : "final def"}, {"label" : "execute", "tail" : "(): RDD[InternalRow]", "member" : "org.apache.spark.sql.execution.SparkPlan.execute", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#execute():org.apache.spark.rdd.RDD[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "final def"}, {"label" : "requiredChildOrdering", "tail" : "(): Seq[Seq[SortOrder]]", "member" : "org.apache.spark.sql.execution.SparkPlan.requiredChildOrdering", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#requiredChildOrdering:Seq[Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]]", "kind" : "def"}, {"label" : "requiredChildDistribution", "tail" : "(): Seq[Distribution]", "member" : "org.apache.spark.sql.execution.SparkPlan.requiredChildDistribution", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#requiredChildDistribution:Seq[org.apache.spark.sql.catalyst.plans.physical.Distribution]", "kind" : "def"}, {"label" : "outputPartitioning", "tail" : "(): Partitioning", "member" : "org.apache.spark.sql.execution.SparkPlan.outputPartitioning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#outputPartitioning:org.apache.spark.sql.catalyst.plans.physical.Partitioning", "kind" : "def"}, {"label" : "longMetric", "tail" : "(name: String): SQLMetric", "member" : "org.apache.spark.sql.execution.SparkPlan.longMetric", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#longMetric(name:String):org.apache.spark.sql.execution.metric.SQLMetric", "kind" : "def"}, {"label" : "resetMetrics", "tail" : "(): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.resetMetrics", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#resetMetrics():Unit", "kind" : "def"}, {"label" : "setLogicalLink", "tail" : "(logicalPlan: LogicalPlan): Unit", "member" : "org.apache.spark.sql.execution.SparkPlan.setLogicalLink", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#setLogicalLink(logicalPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Unit", "kind" : "def"}, {"label" : "logicalLink", "tail" : "(): Option[LogicalPlan]", "member" : "org.apache.spark.sql.execution.SparkPlan.logicalLink", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logicalLink:Option[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): SparkPlan", "member" : "org.apache.spark.sql.execution.SparkPlan.makeCopy", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#makeCopy(newArgs:Array[AnyRef]):org.apache.spark.sql.execution.SparkPlan", "kind" : "def"}, {"label" : "vectorTypes", "tail" : "(): Option[Seq[String]]", "member" : "org.apache.spark.sql.execution.SparkPlan.vectorTypes", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#vectorTypes:Option[Seq[String]]", "kind" : "def"}, {"label" : "supportsColumnar", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.execution.SparkPlan.supportsColumnar", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#supportsColumnar:Boolean", "kind" : "def"}, {"label" : "supportsRowBased", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.execution.SparkPlan.supportsRowBased", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#supportsRowBased:Boolean", "kind" : "def"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.sql.execution.SparkPlan.id", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#id:Int", "kind" : "val"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.execution.SparkPlan.conf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.sql.execution.SparkPlan.sparkContext", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "session", "tail" : ": SparkSession", "member" : "org.apache.spark.sql.execution.SparkPlan.session", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#session:org.apache.spark.sql.SparkSession", "kind" : "final val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#logName:String", "kind" : "def"}, {"label" : "allAttributes", "tail" : ": AttributeSeq", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.allAttributes", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#allAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSeq", "kind" : "lazy val"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.semanticHash", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#semanticHash():Int", "kind" : "final def"}, {"label" : "sameResult", "tail" : "(other: SparkPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.sameResult", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#sameResult(other:PlanType):Boolean", "kind" : "final def"}, {"label" : "doCanonicalize", "tail" : "(): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.doCanonicalize", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#doCanonicalize():PlanType", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.canonicalized", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#canonicalized:PlanType", "kind" : "final lazy val"}, {"label" : "isCanonicalizedPlan", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.isCanonicalizedPlan", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#isCanonicalizedPlan:Boolean", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[QueryPlan[_]]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.innerChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#innerChildren:Seq[org.apache.spark.sql.catalyst.plans.QueryPlan[_]]", "kind" : "def"}, {"label" : "collectWithSubqueries", "tail" : "(f: PartialFunction[SparkPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.collectWithSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#collectWithSubqueries[B](f:PartialFunction[PlanType,B]):Seq[B]", "kind" : "def"}, {"label" : "transformDownWithSubqueriesAndPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(f: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformDownWithSubqueriesAndPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformDownWithSubqueriesAndPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "transformDownWithSubqueries", "tail" : "(f: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformDownWithSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformDownWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "transformUpWithSubqueries", "tail" : "(f: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformUpWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "transformWithSubqueries", "tail" : "(f: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformWithSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "subqueriesAll", "tail" : "(): Seq[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueriesAll", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#subqueriesAll:Seq[PlanType]", "kind" : "def"}, {"label" : "subqueries", "tail" : ": Seq[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#subqueries:Seq[PlanType]", "kind" : "lazy val"}, {"label" : "formattedNodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.formattedNodeName", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#formattedNodeName:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#verboseString(maxFields:Int):String", "kind" : "def"}, {"label" : "statePrefix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.statePrefix", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#statePrefix:String", "kind" : "def"}, {"label" : "printSchema", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.printSchema", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#printSchema():Unit", "kind" : "def"}, {"label" : "schemaString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schemaString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#schemaString:String", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schema", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "updateOuterReferencesInSubquery", "tail" : "(plan: SparkPlan, attrMap: AttributeMap[Attribute]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.updateOuterReferencesInSubquery", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#updateOuterReferencesInSubquery(plan:PlanType,attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "rewriteAttrs", "tail" : "(attrMap: AttributeMap[Attribute]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.rewriteAttrs", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#rewriteAttrs(attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "transformUpWithNewOutput", "tail" : "(rule: PartialFunction[SparkPlan, (SparkPlan, Seq[(Attribute, Attribute)])], skipCond: (SparkPlan) ⇒ Boolean, canGetOutput: (SparkPlan) ⇒ Boolean): SparkPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformUpWithNewOutput(rule:PartialFunction[PlanType,(PlanType,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])],skipCond:PlanType=>Boolean,canGetOutput:PlanType=>Boolean):PlanType", "kind" : "def"}, {"label" : "expressions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.expressions", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "final def"}, {"label" : "transformAllExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformAllExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformAllExpressionsWithSubqueries", "tail" : "(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressionsWithSubqueries", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformAllExpressionsWithSubqueries(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformAllExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressions", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformAllExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "mapExpressions", "tail" : "(f: (Expression) ⇒ Expression): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#mapExpressions(f:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUpWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformExpressionsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUp", "tail" : "(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformExpressionsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformExpressionsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDown", "tail" : "(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformExpressionsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): CassandraDirectJoinExec.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "missingInput", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.missingInput", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#missingInput:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.deterministic", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.references", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "producedAttributes", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.producedAttributes", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#producedAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "inputSet", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.inputSet", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#inputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.treePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "outputOrdering", "tail" : "(): Seq[SortOrder]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputOrdering", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#outputOrdering:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]", "kind" : "def"}, {"label" : "outputSet", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputSet", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: ArrayList[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#generateTreeString(depth:Int,lastChildren:java.util.ArrayList[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#treeString:String", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#toString():String", "kind" : "def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#clone():BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[SparkPlan, Seq[SparkPlan]]): Stream[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[SparkPlan, Seq[SparkPlan]]): Stream[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (SparkPlan) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(SparkPlan, SparkPlan), SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[SparkPlan, SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[SparkPlan]): SparkPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[SparkPlan, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[SparkPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (SparkPlan) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (SparkPlan) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (SparkPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (SparkPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (SparkPlan) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (SparkPlan) ⇒ Boolean): Option[SparkPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: SparkPlan): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinExec.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy", "shortDescription" : "Direct Join StrategyConverts logical plans where the join target is a Cassandra derived branch with joinWithCassandraTablestyle Join", "object" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html", "members_object" : [{"label" : "containsSafePlans", "tail" : "(plan: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.containsSafePlans", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#containsSafePlans(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "aliasMap", "tail" : "(aliases: Seq[NamedExpression]): Map[String, ExprId]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.aliasMap", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#aliasMap(aliases:Seq[org.apache.spark.sql.catalyst.expressions.NamedExpression]):Map[String,org.apache.spark.sql.catalyst.expressions.ExprId]", "kind" : "def"}, {"label" : "getAlias", "tail" : "(expr: NamedExpression): Seq[(String, ExprId)]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.getAlias", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#getAlias(expr:org.apache.spark.sql.catalyst.expressions.NamedExpression):Seq[(String,org.apache.spark.sql.catalyst.expressions.ExprId)]", "kind" : "def"}, {"label" : "allPartitionKeysAreJoined", "tail" : "(plan: LogicalPlan, joinKeys: Seq[Expression]): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.allPartitionKeysAreJoined", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#allPartitionKeysAreJoined(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,joinKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):Boolean", "kind" : "def"}, {"label" : "validJoinBranch", "tail" : "(plan: LogicalPlan, keys: Seq[Expression]): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.validJoinBranch", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#validJoinBranch(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,keys:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):Boolean", "kind" : "def"}, {"label" : "reorderPlan", "tail" : "(plan: SparkPlan, directJoin: CassandraDirectJoinExec, originalOutput: Seq[Attribute]): SparkPlan", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.reorderPlan", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#reorderPlan(plan:org.apache.spark.sql.execution.SparkPlan,directJoin:org.apache.spark.sql.cassandra.execution.CassandraDirectJoinExec,originalOutput:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.execution.SparkPlan", "kind" : "def"}, {"label" : "hasCassandraChild", "tail" : "(plan: T): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.hasCassandraChild", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#hasCassandraChild[T<:org.apache.spark.sql.catalyst.plans.QueryPlan[T]](plan:T):Boolean", "kind" : "def"}, {"label" : "getCassandraScan", "tail" : "(plan: LogicalPlan): Option[CassandraScan]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.getCassandraScan", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#getCassandraScan(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Option[com.khulnasoft.spark.connector.datasource.CassandraScan]", "kind" : "def"}, {"label" : "getCassandraTable", "tail" : "(plan: LogicalPlan): Option[CassandraTable]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.getCassandraTable", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#getCassandraTable(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Option[com.khulnasoft.spark.connector.datasource.CassandraTable]", "kind" : "def"}, {"label" : "getDSV2CassandraRelation", "tail" : "(plan: LogicalPlan): Option[DataSourceV2ScanRelation]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.getDSV2CassandraRelation", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#getDSV2CassandraRelation(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Option[org.apache.spark.sql.execution.datasources.v2.DataSourceV2ScanRelation]", "kind" : "def"}, {"label" : "validJoinType", "tail" : "(cassandraSide: BuildSide, joinType: JoinType): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.validJoinType", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#validJoinType(cassandraSide:org.apache.spark.sql.catalyst.optimizer.BuildSide,joinType:org.apache.spark.sql.catalyst.plans.JoinType):Boolean", "kind" : "def"}, {"label" : "validJoins", "tail" : ": Map[BuildSide, Seq[JoinType]]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.validJoins", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#validJoins:Map[org.apache.spark.sql.catalyst.optimizer.BuildSide,Seq[org.apache.spark.sql.catalyst.plans.JoinType]]", "kind" : "val"}, {"label" : "getScanExec", "tail" : "(plan: SparkPlan): Option[BatchScanExec]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.getScanExec", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#getScanExec(plan:org.apache.spark.sql.execution.SparkPlan):Option[org.apache.spark.sql.execution.datasources.v2.BatchScanExec]", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "rightValid", "tail" : "(joinType: JoinType, leftKeys: Seq[Expression], rightKeys: Seq[Expression], condition: Option[Expression], left: LogicalPlan, right: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.rightValid", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#rightValid(joinType:org.apache.spark.sql.catalyst.plans.JoinType,leftKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression],rightKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression],condition:Option[org.apache.spark.sql.catalyst.expressions.Expression],left:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,right:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "leftValid", "tail" : "(joinType: JoinType, leftKeys: Seq[Expression], rightKeys: Seq[Expression], condition: Option[Expression], left: LogicalPlan, right: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.leftValid", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#leftValid(joinType:org.apache.spark.sql.catalyst.plans.JoinType,leftKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression],rightKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression],condition:Option[org.apache.spark.sql.catalyst.expressions.Expression],left:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,right:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "hasValidDirectJoin", "tail" : "(joinType: JoinType, leftKeys: Seq[Expression], rightKeys: Seq[Expression], condition: Option[Expression], left: LogicalPlan, right: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.hasValidDirectJoin", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#hasValidDirectJoin(joinType:org.apache.spark.sql.catalyst.plans.JoinType,leftKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression],rightKeys:Seq[org.apache.spark.sql.catalyst.expressions.Expression],condition:Option[org.apache.spark.sql.catalyst.expressions.Expression],left:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,right:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(plan: LogicalPlan): Seq[SparkPlan]", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#apply(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Seq[org.apache.spark.sql.execution.SparkPlan]", "kind" : "def"}, {"label" : "conf", "tail" : ": SQLConf", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.conf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "val"}, {"member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy#<init>", "error" : "unsupported entity"}, {"label" : "spark", "tail" : ": SparkSession", "member" : "org.apache.spark.sql.cassandra.execution.CassandraDirectJoinStrategy.spark", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#spark:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "planLater", "tail" : "(plan: LogicalPlan): SparkPlan", "member" : "org.apache.spark.sql.execution.SparkStrategy.planLater", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#planLater(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.execution.SparkPlan", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/execution\/CassandraDirectJoinStrategy.html", "kind" : "case class"}], "com.khulnasoft.bdp" : [], "org.apache.spark" : [], "org.apache" : [], "com.khulnasoft.spark.connector.rdd.partitioner" : [{"name" : "com.khulnasoft.spark.connector.rdd.partitioner.BucketingRangeIndex", "shortDescription" : "A special structure for fast lookup of rangesContaining containing given point.", "members_class" : [{"label" : "rangesContaining", "tail" : "(point: T): IndexedSeq[R]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.BucketingRangeIndex.rangesContaining", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#rangesContaining(point:T):IndexedSeq[R]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.BucketingRangeIndex#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/BucketingRangeIndex.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition", "shortDescription" : "Metadata describing Cassandra table partition processed by a single Spark task.", "members_case class" : [{"label" : "preferredLocations", "tail" : "(): Array[String]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#preferredLocations():Array[String]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition#<init>", "error" : "unsupported entity"}, {"label" : "dataSize", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition.dataSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#dataSize:Long", "kind" : "val"}, {"label" : "tokenRanges", "tail" : ": Iterable[CqlTokenRange[V, T]]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition.tokenRanges", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#tokenRanges:Iterable[com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange[V,T]]", "kind" : "val"}, {"label" : "endpoints", "tail" : ": Array[String]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition.endpoints", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#endpoints:Array[String]", "kind" : "val"}, {"label" : "index", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition.index", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#index:Int", "kind" : "val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.Partition.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.Partition.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#hashCode():Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartition.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD", "shortDescription" : "RDD created by repartitionByCassandraReplica with preferred locations mapping to the CassandraReplicaseach partition was created for.", "members_class" : [{"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[T]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (T) ⇒ K): RDD[(K, T)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[T]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[T]): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[T]): Map[T, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(op: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (T, T) ⇒ T, depth: Int): T", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], p: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[T]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[T]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[T], evaluatorFactory: PartitionEvaluatorFactory[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (T, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[T]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], partitioner: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (T) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[T]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (T) ⇒ Boolean): RDD[T]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraPartitionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionedRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html", "members_object" : [{"label" : "apply", "tail" : "(conn: CassandraConnector, tableDef: TableDef, splitCount: Int)(tokenFactory: TokenFactory[V, T]): CassandraPartitionGenerator[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.apply", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#apply(conn:com.khulnasoft.spark.connector.cql.CassandraConnector,tableDef:com.khulnasoft.spark.connector.cql.TableDef,splitCount:Int)(implicittokenFactory:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.V,com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.T]):com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator[com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.V,com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.T]", "kind" : "def"}, {"label" : "T", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.T", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#T=tforSome{typet<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.V]}", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator.V", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#V=tforSome{typet}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CassandraPartitionGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange", "shortDescription" : "Stores a CQL WHERE predicate matching a range of tokens.", "members_case class" : [{"label" : "cql", "tail" : "(pk: String): (String, Seq[Any])", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange.cql", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#cql(pk:String):(String,Seq[Any])", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange#<init>", "error" : "unsupported entity"}, {"label" : "range", "tail" : ": TokenRange[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange.range", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#range:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange[V,T]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/CqlTokenRange.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.DataSizeEstimates", "shortDescription" : "Estimates amount of data in the Cassandra table.", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html", "members_class" : [{"label" : "totalDataSizeInBytes", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.DataSizeEstimates.totalDataSizeInBytes", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#totalDataSizeInBytes:Long", "kind" : "lazy val"}, {"label" : "dataSizeInBytes", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.DataSizeEstimates.dataSizeInBytes", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#dataSizeInBytes:Long", "kind" : "lazy val"}, {"label" : "partitionCount", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.DataSizeEstimates.partitionCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#partitionCount:Long", "kind" : "lazy val"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.DataSizeEstimates#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "waitForDataSizeEstimates", "tail" : "(conn: CassandraConnector, keyspaceName: String, tableName: String, timeoutInMs: Int): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.DataSizeEstimates.waitForDataSizeEstimates", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#waitForDataSizeEstimates(conn:com.khulnasoft.spark.connector.cql.CassandraConnector,keyspaceName:String,tableName:String,timeoutInMs:Int):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/DataSizeEstimates.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.EndpointPartition", "members_trait" : [{"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.Partition.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.Partition.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#hashCode():Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "endpoints", "tail" : "(): Array[String]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.EndpointPartition.endpoints", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#endpoints:Array[String]", "kind" : "abstract def"}, {"label" : "index", "tail" : "(): Int", "member" : "org.apache.spark.Partition.index", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html#index:Int", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/EndpointPartition.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bucket", "tail" : "(n: Int): (T) ⇒ Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing.bucket", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html#bucket(n:Int):T=>Int", "kind" : "abstract def"}], "shortDescription" : "A mapping from T values to an integer range [0, n),such that for any (t1: T) > (t2: T), bucket(t1) >= bucket(t2).", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html", "members_object" : [{"label" : "LongBucketing", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing.LongBucketing", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#LongBucketing", "kind" : "implicit object"}, {"label" : "IntBucketing", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing.IntBucketing", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#IntBucketing", "kind" : "implicit object"}, {"label" : "log2", "tail" : "(x: Double): Double", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing.log2", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#log2(x:Double):Double", "kind" : "def"}, {"label" : "lnOf2", "tail" : ": Double", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.MonotonicBucketing.lnOf2", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#lnOf2:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/MonotonicBucketing.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.NodeAddresses", "shortDescription" : "Looks up listen address of a cluster node given its Native Transport address.", "members_class" : [{"label" : "hostNames", "tail" : "(nativeTransportAddress: InetAddress): Set[String]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.NodeAddresses.hostNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#hostNames(nativeTransportAddress:java.net.InetAddress):Set[String]", "kind" : "def"}, {"label" : "nativeTransportAddressToListenAddress", "tail" : ": (InetAddress) ⇒ InetAddress", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.NodeAddresses.nativeTransportAddressToListenAddress", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#nativeTransportAddressToListenAddress:java.net.InetAddress=>java.net.InetAddress", "kind" : "lazy val"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.NodeAddresses#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/NodeAddresses.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.RangeBounds", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isFull", "tail" : "(range: R): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.RangeBounds.isFull", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#isFull(range:R):Boolean", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(range: R, point: T): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.RangeBounds.contains", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#contains(range:R,point:T):Boolean", "kind" : "abstract def"}, {"label" : "end", "tail" : "(range: R): T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.RangeBounds.end", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#end(range:R):T", "kind" : "abstract def"}, {"label" : "start", "tail" : "(range: R): T", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.RangeBounds.start", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html#start(range:R):T", "kind" : "abstract def"}], "shortDescription" : "Extracts rangeBounds of a range R.", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/RangeBounds.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartition", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartition#<init>", "error" : "unsupported entity"}, {"label" : "endpoints", "tail" : ": Array[String]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartition.endpoints", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#endpoints:Array[String]", "kind" : "val"}, {"label" : "index", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartition.index", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#index:Int", "kind" : "val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.Partition.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.Partition.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#hashCode():Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartition.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner", "shortDescription" : "The replica partitioner will work on an RDD which is keyed on sets of InetAddresses representing CassandraHosts .", "members_class" : [{"label" : "getEndpointPartition", "tail" : "(partition: Partition): ReplicaPartition", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.getEndpointPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#getEndpointPartition(partition:org.apache.spark.Partition):com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartition", "kind" : "def"}, {"label" : "nodeAddresses", "tail" : ": NodeAddresses", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.nodeAddresses", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#nodeAddresses:com.khulnasoft.spark.connector.rdd.partitioner.NodeAddresses", "kind" : "val"}, {"label" : "numPartitions", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.numPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#numPartitions:Int", "kind" : "def"}, {"label" : "getPartition", "tail" : "(key: Any): Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.getPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#getPartition(key:Any):Int", "kind" : "def"}, {"label" : "rowWriter", "tail" : ": RowWriter[T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#rowWriter:com.khulnasoft.spark.connector.writer.RowWriter[T]", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "_keyspace", "tail" : ": CqlIdentifier", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner._keyspace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#_keyspace:com.khulnasoft.oss.driver.api.core.CqlIdentifier", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner#<init>", "error" : "unsupported entity"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/ReplicaPartitioner.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeClusterer", "shortDescription" : "Groups a set of token ranges into groupCount groups containing not more than maxGroupSize tokenranges.", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html", "members_class" : [{"label" : "group", "tail" : "(tokenRanges: Seq[TokenRange[V, T]]): Iterable[Seq[TokenRange[V, T]]]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeClusterer.group", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#group(tokenRanges:Seq[com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange[V,T]]):Iterable[Seq[com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange[V,T]]]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeClusterer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeClusterer.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeSplitter", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeSplitter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex", "shortDescription" : "Holds a token range together with the index of a partition this token range belongs to", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html", "members_object" : [{"label" : "rangeBounds", "tail" : "(tf: TokenFactory[V, T]): RangeBounds[TokenRangeWithPartitionIndex[V, T], T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex.rangeBounds", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#rangeBounds[V,T<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[V]](implicittf:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenFactory[V,T]):com.khulnasoft.spark.connector.rdd.partitioner.RangeBounds[com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex[V,T],T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex#<init>", "error" : "unsupported entity"}, {"label" : "partitionIndex", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex.partitionIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#partitionIndex:Int", "kind" : "val"}, {"label" : "range", "tail" : ": TokenRange[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex.range", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#range:com.khulnasoft.spark.connector.rdd.partitioner.dht.TokenRange[V,T]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/partitioner\/TokenRangeWithPartitionIndex.html", "kind" : "case class"}], "com.khulnasoft.spark.connector.japi.rdd" : [{"name" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD", "shortDescription" : "", "members_class" : [{"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "spanBy", "tail" : "(function: Function[(K, V), U], uClass: Class[U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#spanBy[U](function:org.apache.spark.api.java.function.Function[(K,V),U],uClass:Class[U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[(K,V)]]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(function: Function[(K, V), U], uClassTag: ClassTag[U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#spanBy[U](function:org.apache.spark.api.java.function.Function[(K,V),U],uClassTag:scala.reflect.ClassTag[U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[(K,V)]]", "kind" : "def"}, {"label" : "spanByKey", "tail" : "(): JavaPairRDD[K, Collection[V]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.spanByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#spanByKey():org.apache.spark.api.java.JavaPairRDD[K,java.util.Collection[V]]", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#toEmptyCassandraRDD():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(config: ReadConf): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#withReadConf(config:com.khulnasoft.spark.connector.rdd.ReadConf):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Array[String]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#selectedColumnNames():Array[String]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : "(): Array[ColumnRef]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#selectedColumnRefs():Array[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowsNumber: Long): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#perPartitionLimit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "limit", "tail" : "(rowsNumber: Long): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#limit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#withDescOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#withAscOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "where", "tail" : "(cqlWhereClause: String, args: <repeated...>[AnyRef]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#where(cqlWhereClause:String,args:Object*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "select", "tail" : "(selectionColumns: <repeated...>[ColumnRef]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#select(selectionColumns:com.khulnasoft.spark.connector.ColumnRef*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "select", "tail" : "(columnNames: <repeated...>[String]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#select(columnNames:String*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "rdd", "tail" : "(): CassandraRDD[(K, V)]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.rdd", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#rdd():com.khulnasoft.spark.connector.rdd.CassandraRDD[(K,V)]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD#<init>", "error" : "unsupported entity"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD#<init>", "error" : "unsupported entity"}, {"label" : "setName", "tail" : "(name: String): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#setName(name:String):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countApproxDistinctByKey(relativeSD:Double):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, numPartitions: Int): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countApproxDistinctByKey(relativeSD:Double,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, partitioner: Partitioner): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countApproxDistinctByKey(relativeSD:Double,partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "values", "tail" : "(): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.values", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#values():org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): JavaRDD[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.keys", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#keys():org.apache.spark.api.java.JavaRDD[K]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(comp: Comparator[K], lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#filterByRange(comp:java.util.Comparator[K],lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#filterByRange(lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sortByKey(comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sortByKey(ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sortByKey(ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sortByKey():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner, comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner,comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "saveAsHadoopDataset", "tail" : "(conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopDataset", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsHadoopDataset(conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopDataset", "tail" : "(conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopDataset", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsNewAPIHadoopDataset(conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(key: K): List[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.lookup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#lookup(key:K):java.util.List[V]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupWith[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupWith[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupWith[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "flatMapValues", "tail" : "(f: FlatMapFunction[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.flatMapValues", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#flatMapValues[U](f:org.apache.spark.api.java.function.FlatMapFunction[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: Function[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.mapValues", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapValues[U](f:org.apache.spark.api.java.function.Function[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "collectAsMap", "tail" : "(): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.collectAsMap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#collectAsMap():java.util.Map[K,V]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupByKey():org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C]): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C]):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.partitionBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#partitionBy(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(numPartitions: Int): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupByKey(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupByKey(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foldByKey(zeroValue:V,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, numPartitions: Int, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foldByKey(zeroValue:V,numPartitions:Int,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foldByKey(zeroValue:V,partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#aggregateByKey[U](zeroValue:U,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, numPartitions: Int, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#aggregateByKey[U](zeroValue:U,numPartitions:Int,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, partitioner: Partitioner, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#aggregateByKey[U](zeroValue:U,partitioner:org.apache.spark.Partitioner,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countByKeyApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countByKeyApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKey", "tail" : "(): Map[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countByKey():java.util.Map[K,Long]", "kind" : "def"}, {"label" : "reduceByKeyLocally", "tail" : "(func: Function2[V, V, V]): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKeyLocally", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#reduceByKeyLocally(func:org.apache.spark.api.java.function.Function2[V,V,V]):java.util.Map[K,V]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#reduceByKey(partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], numPartitions: Int): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.api.java.JavaPairRDD.first", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#first():(K,V)", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#intersection(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.union", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#union(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[(K, V), Boolean]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#filter(f:org.apache.spark.api.java.function.Function[(K,V),Boolean]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#distinct():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#unpersist():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cache():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#classTag:scala.reflect.ClassTag[(K,V)]", "kind" : "val"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.wrapRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "vClassTag", "tail" : ": ClassTag[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.vClassTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#vClassTag:scala.reflect.ClassTag[V]", "kind" : "implicit val"}, {"label" : "kClassTag", "tail" : ": ClassTag[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.kClassTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#kClassTag:scala.reflect.ClassTag[K]", "kind" : "implicit val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[(K, V)]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, (K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int, finalAggregateOnExecutor: Boolean): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int,finalAggregateOnExecutor:Boolean):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)], depth: Int): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[(K, V)]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[(K, V)], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U], numPartitions: Int): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[(K, V), U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapToDouble[R<:<?>](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[(K, V), R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaPairRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD", "shortDescription" : "", "members_class" : [{"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#toEmptyCassandraRDD():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: Function[R, K], keyClass: Class[K]): JavaPairRDD[K, Iterable[R]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#spanBy[K](f:org.apache.spark.api.java.function.Function[R,K],keyClass:Class[K]):org.apache.spark.api.java.JavaPairRDD[K,Iterable[R]]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: Function[R, K], keyClassTag: ClassTag[K]): JavaPairRDD[K, Iterable[R]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#spanBy[K](f:org.apache.spark.api.java.function.Function[R,K],keyClassTag:scala.reflect.ClassTag[K]):org.apache.spark.api.java.JavaPairRDD[K,Iterable[R]]", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowsNumber: Long): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#perPartitionLimit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "limit", "tail" : "(rowsNumber: Long): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#limit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(config: ReadConf): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#withReadConf(config:com.khulnasoft.spark.connector.rdd.ReadConf):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Array[String]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#selectedColumnNames():Array[String]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : "(): Array[ColumnRef]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#selectedColumnRefs():Array[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#withDescOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#withAscOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "where", "tail" : "(cqlWhereClause: String, args: <repeated...>[AnyRef]): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#where(cqlWhereClause:String,args:Object*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "select", "tail" : "(columns: <repeated...>[ColumnRef]): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "select", "tail" : "(columnNames: <repeated...>[String]): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#select(columnNames:String*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "wrap", "tail" : "(newRDD: CassandraRDD[R]): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.wrap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#wrap(newRDD:com.khulnasoft.spark.connector.rdd.CassandraRDD[R]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "rdd", "tail" : "(): CassandraRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.rdd", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#rdd():com.khulnasoft.spark.connector.rdd.CassandraRDD[R]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD#<init>", "error" : "unsupported entity"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD#<init>", "error" : "unsupported entity"}, {"label" : "sortBy", "tail" : "(f: Function[R, S], ascending: Boolean, numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#sortBy[S](f:org.apache.spark.api.java.function.Function[T,S],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "setName", "tail" : "(name: String): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#setName(name:String):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#toString():String", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[R], p: Partitioner): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[R], numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T],numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaRDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#intersection(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaRDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.union", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#union(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[JavaRDD[R]]", "member" : "org.apache.spark.api.java.JavaRDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.api.java.JavaRDD[T]]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double]): Array[JavaRDD[R]]", "member" : "org.apache.spark.api.java.JavaRDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#randomSplit(weights:Array[Double]):Array[org.apache.spark.api.java.JavaRDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[R, Boolean]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#filter(f:org.apache.spark.api.java.function.Function[T,Boolean]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#distinct():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#unpersist():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.api.java.JavaRDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#cache():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.wrapRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "org.apache.spark.api.java.JavaRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#classTag:scala.reflect.ClassTag[T]", "kind" : "implicit val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[R]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[R]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[R]): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[R]): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[R, U]): JavaPairRDD[U, R]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.api.java.JavaRDDLike.first", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#first():T", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[R, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, R, U], combOp: Function2[U, U, U], depth: Int, finalAggregateOnExecutor: Boolean): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int,finalAggregateOnExecutor:Boolean):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, R, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, R, U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, R, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(f: Function2[R, R, R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[R, R, R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[R, R, R], depth: Int): R", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[R, R, R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[R]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[R, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[R, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[R], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[R, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[R, U], numPartitions: Int): JavaPairRDD[U, Iterable[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[R, U]): JavaPairRDD[U, Iterable[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[R, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[R]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[R], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[R]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[R], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[R]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[R], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[R], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[R, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[R]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[R, U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[R, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[R]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapToDouble[R<:<?>](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[R], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[R, R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJavaRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJoinJavaRDD", "shortDescription" : "", "members_class" : [{"label" : "rdd", "tail" : "(): CassandraJoinRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJoinJavaRDD.rdd", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#rdd():com.khulnasoft.spark.connector.rdd.CassandraJoinRDD[K,V]", "kind" : "def"}, {"label" : "on", "tail" : "(joinColumns: ColumnSelector): CassandraJoinJavaRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJoinJavaRDD.on", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#on(joinColumns:com.khulnasoft.spark.connector.ColumnSelector):com.khulnasoft.spark.connector.japi.rdd.CassandraJoinJavaRDD[K,V]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJoinJavaRDD#<init>", "error" : "unsupported entity"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJoinJavaRDD#<init>", "error" : "unsupported entity"}, {"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "spanBy", "tail" : "(function: Function[(K, V), U], uClass: Class[U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#spanBy[U](function:org.apache.spark.api.java.function.Function[(K,V),U],uClass:Class[U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[(K,V)]]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(function: Function[(K, V), U], uClassTag: ClassTag[U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#spanBy[U](function:org.apache.spark.api.java.function.Function[(K,V),U],uClassTag:scala.reflect.ClassTag[U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[(K,V)]]", "kind" : "def"}, {"label" : "spanByKey", "tail" : "(): JavaPairRDD[K, Collection[V]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.spanByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#spanByKey():org.apache.spark.api.java.JavaPairRDD[K,java.util.Collection[V]]", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#toEmptyCassandraRDD():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(config: ReadConf): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#withReadConf(config:com.khulnasoft.spark.connector.rdd.ReadConf):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Array[String]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#selectedColumnNames():Array[String]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : "(): Array[ColumnRef]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#selectedColumnRefs():Array[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowsNumber: Long): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#perPartitionLimit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "limit", "tail" : "(rowsNumber: Long): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#limit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#withDescOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#withAscOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "where", "tail" : "(cqlWhereClause: String, args: <repeated...>[AnyRef]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#where(cqlWhereClause:String,args:Object*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "select", "tail" : "(selectionColumns: <repeated...>[ColumnRef]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#select(selectionColumns:com.khulnasoft.spark.connector.ColumnRef*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "select", "tail" : "(columnNames: <repeated...>[String]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#select(columnNames:String*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "setName", "tail" : "(name: String): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#setName(name:String):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countApproxDistinctByKey(relativeSD:Double):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, numPartitions: Int): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countApproxDistinctByKey(relativeSD:Double,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, partitioner: Partitioner): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countApproxDistinctByKey(relativeSD:Double,partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "values", "tail" : "(): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.values", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#values():org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): JavaRDD[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.keys", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#keys():org.apache.spark.api.java.JavaRDD[K]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(comp: Comparator[K], lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#filterByRange(comp:java.util.Comparator[K],lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#filterByRange(lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sortByKey(comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sortByKey(ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sortByKey(ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sortByKey():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner, comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner,comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "saveAsHadoopDataset", "tail" : "(conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopDataset", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsHadoopDataset(conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopDataset", "tail" : "(conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopDataset", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsNewAPIHadoopDataset(conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(key: K): List[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.lookup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#lookup(key:K):java.util.List[V]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupWith[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupWith[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupWith[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "flatMapValues", "tail" : "(f: FlatMapFunction[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.flatMapValues", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#flatMapValues[U](f:org.apache.spark.api.java.function.FlatMapFunction[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: Function[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.mapValues", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapValues[U](f:org.apache.spark.api.java.function.Function[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "collectAsMap", "tail" : "(): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.collectAsMap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#collectAsMap():java.util.Map[K,V]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupByKey():org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C]): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C]):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.partitionBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#partitionBy(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(numPartitions: Int): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupByKey(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupByKey(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foldByKey(zeroValue:V,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, numPartitions: Int, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foldByKey(zeroValue:V,numPartitions:Int,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foldByKey(zeroValue:V,partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#aggregateByKey[U](zeroValue:U,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, numPartitions: Int, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#aggregateByKey[U](zeroValue:U,numPartitions:Int,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, partitioner: Partitioner, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#aggregateByKey[U](zeroValue:U,partitioner:org.apache.spark.Partitioner,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countByKeyApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countByKeyApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKey", "tail" : "(): Map[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countByKey():java.util.Map[K,Long]", "kind" : "def"}, {"label" : "reduceByKeyLocally", "tail" : "(func: Function2[V, V, V]): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKeyLocally", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#reduceByKeyLocally(func:org.apache.spark.api.java.function.Function2[V,V,V]):java.util.Map[K,V]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#reduceByKey(partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], numPartitions: Int): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.api.java.JavaPairRDD.first", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#first():(K,V)", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#intersection(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.union", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#union(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[(K, V), Boolean]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#filter(f:org.apache.spark.api.java.function.Function[(K,V),Boolean]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#distinct():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#unpersist():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cache():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#classTag:scala.reflect.ClassTag[(K,V)]", "kind" : "val"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.wrapRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "vClassTag", "tail" : ": ClassTag[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.vClassTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#vClassTag:scala.reflect.ClassTag[V]", "kind" : "implicit val"}, {"label" : "kClassTag", "tail" : ": ClassTag[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.kClassTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#kClassTag:scala.reflect.ClassTag[K]", "kind" : "implicit val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[(K, V)]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, (K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int, finalAggregateOnExecutor: Boolean): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int,finalAggregateOnExecutor:Boolean):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)], depth: Int): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[(K, V)]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[(K, V)], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U], numPartitions: Int): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[(K, V), U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapToDouble[R<:<?>](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[(K, V), R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraJoinJavaRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD", "shortDescription" : "", "members_class" : [{"label" : "keyAndApplyPartitionerFrom", "tail" : "(rrf: RowReaderFactory[K], rwf: RowWriterFactory[K], keyClass: Class[K], otherRDD: CassandraJavaPairRDD[K, _]): CassandraJavaPairRDD[K, R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.keyAndApplyPartitionerFrom", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#keyAndApplyPartitionerFrom[K](rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],rwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K],keyClass:Class[K],otherRDD:com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,_]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,R]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(rrf: RowReaderFactory[K], rwf: RowWriterFactory[K], keyClass: Class[K]): CassandraJavaPairRDD[K, R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#keyBy[K](rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],rwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K],keyClass:Class[K]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,R]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(rrf: RowReaderFactory[K], rwf: RowWriterFactory[K], keyClass: Class[K], columnNames: <repeated...>[String]): CassandraJavaPairRDD[K, R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#keyBy[K](rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],rwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K],keyClass:Class[K],columnNames:String*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,R]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(rrf: RowReaderFactory[K], rwf: RowWriterFactory[K], keyClass: Class[K], columns: <repeated...>[ColumnRef]): CassandraJavaPairRDD[K, R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#keyBy[K](rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],rwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K],keyClass:Class[K],columns:com.khulnasoft.spark.connector.ColumnRef*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,R]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(keyClassTag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K], columns: <repeated...>[ColumnRef]): CassandraJavaPairRDD[K, R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#keyBy[K](keyClassTag:scala.reflect.ClassTag[K],rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],rwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K],columns:com.khulnasoft.spark.connector.ColumnRef*):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,R]", "kind" : "def"}, {"label" : "limit", "tail" : "(rowsNumber: Long): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#limit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(config: ReadConf): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#withReadConf(config:com.khulnasoft.spark.connector.rdd.ReadConf):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#withDescOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#withAscOrder():com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "where", "tail" : "(cqlWhereClause: String, args: <repeated...>[AnyRef]): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#where(cqlWhereClause:String,args:Object*):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "select", "tail" : "(columns: <repeated...>[ColumnRef]): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "select", "tail" : "(columnNames: <repeated...>[String]): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#select(columnNames:String*):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "wrap", "tail" : "(newRDD: CassandraRDD[R]): CassandraTableScanJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.wrap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#wrap(newRDD:com.khulnasoft.spark.connector.rdd.CassandraRDD[R]):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[R]", "kind" : "def"}, {"label" : "rdd", "tail" : "(): CassandraTableScanRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD.rdd", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#rdd():com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[R]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD#<init>", "error" : "unsupported entity"}, {"member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD#<init>", "error" : "unsupported entity"}, {"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#toEmptyCassandraRDD():com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: Function[R, K], keyClass: Class[K]): JavaPairRDD[K, Iterable[R]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#spanBy[K](f:org.apache.spark.api.java.function.Function[R,K],keyClass:Class[K]):org.apache.spark.api.java.JavaPairRDD[K,Iterable[R]]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: Function[R, K], keyClassTag: ClassTag[K]): JavaPairRDD[K, Iterable[R]]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#spanBy[K](f:org.apache.spark.api.java.function.Function[R,K],keyClassTag:scala.reflect.ClassTag[K]):org.apache.spark.api.java.JavaPairRDD[K,Iterable[R]]", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowsNumber: Long): CassandraJavaRDD[R]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#perPartitionLimit(rowsNumber:Long):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[R]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Array[String]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#selectedColumnNames():Array[String]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : "(): Array[ColumnRef]", "member" : "com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#selectedColumnRefs():Array[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: Function[R, S], ascending: Boolean, numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#sortBy[S](f:org.apache.spark.api.java.function.Function[T,S],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "setName", "tail" : "(name: String): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#setName(name:String):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#toString():String", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[R], p: Partitioner): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[R], numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T],numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaRDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#intersection(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaRDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.union", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#union(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[JavaRDD[R]]", "member" : "org.apache.spark.api.java.JavaRDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.api.java.JavaRDD[T]]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double]): Array[JavaRDD[R]]", "member" : "org.apache.spark.api.java.JavaRDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#randomSplit(weights:Array[Double]):Array[org.apache.spark.api.java.JavaRDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[R, Boolean]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#filter(f:org.apache.spark.api.java.function.Function[T,Boolean]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#distinct():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#unpersist():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.api.java.JavaRDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#cache():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDD.wrapRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "org.apache.spark.api.java.JavaRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#classTag:scala.reflect.ClassTag[T]", "kind" : "implicit val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[R]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[R]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[R]): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[R]): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[R, U]): JavaPairRDD[U, R]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.api.java.JavaRDDLike.first", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#first():T", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[R, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, R, U], combOp: Function2[U, U, U], depth: Int, finalAggregateOnExecutor: Boolean): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int,finalAggregateOnExecutor:Boolean):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, R, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, R, U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, R, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(f: Function2[R, R, R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[R, R, R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[R, R, R], depth: Int): R", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[R, R, R]): R", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[R]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[R, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[R, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[R], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[R, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[R, U], numPartitions: Int): JavaPairRDD[U, Iterable[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[R, U]): JavaPairRDD[U, Iterable[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[R, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[R]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[R]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[R], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[R]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[R], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[R]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[R], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[R], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[R, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[R]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[R, U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[R, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[R]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapToDouble[R<:<?>](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[R], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[R, R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/rdd\/CassandraTableScanJavaRDD.html", "kind" : "class"}], "com.khulnasoft.spark.connector.writer" : [{"name" : "com.khulnasoft.spark.connector.writer.AsyncExecutor", "shortDescription" : "Asynchronously executes tasks but blocks if the limit of unfinished tasks is reached.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html", "members_class" : [{"label" : "waitForCurrentlyExecutingTasks", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.waitForCurrentlyExecutingTasks", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#waitForCurrentlyExecutingTasks():Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(task: T): R", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.execute", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#execute(task:T):R", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(task: T): Future[R]", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.executeAsync", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#executeAsync(task:T):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "getLatestException", "tail" : "(): Option[Throwable]", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.getLatestException", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#getLatestException():Option[Throwable]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Handler", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.Handler", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#Handler[T]=(T,Long,Long)=>Unit", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncExecutor.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter", "shortDescription" : "", "members_case class" : [{"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.close", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#close():Unit", "kind" : "def"}, {"label" : "write", "tail" : "(record: T): Unit", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.write", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#write(record:T):Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter#<init>", "error" : "unsupported entity"}, {"label" : "failureHandler", "tail" : ": Option[Handler[RichStatement]]", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.failureHandler", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#failureHandler:Option[com.khulnasoft.spark.connector.writer.AsyncExecutor.Handler[com.khulnasoft.spark.connector.writer.RichStatement]]", "kind" : "val"}, {"label" : "successHandler", "tail" : ": Option[Handler[RichStatement]]", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.successHandler", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#successHandler:Option[com.khulnasoft.spark.connector.writer.AsyncExecutor.Handler[com.khulnasoft.spark.connector.writer.RichStatement]]", "kind" : "val"}, {"label" : "maybeRateLimit", "tail" : ": (RichStatement) ⇒ Unit", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#maybeRateLimit:com.khulnasoft.spark.connector.writer.RichStatement=>Unit", "kind" : "val"}, {"label" : "groupingBatchBuilderBase", "tail" : ": GroupingBatchBuilderBase[T]", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.groupingBatchBuilderBase", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#groupingBatchBuilderBase:com.khulnasoft.spark.connector.writer.GroupingBatchBuilderBase[T]", "kind" : "val"}, {"label" : "preparedStatement", "tail" : ": PreparedStatement", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.preparedStatement", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#preparedStatement:com.khulnasoft.oss.driver.api.core.cql.PreparedStatement", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "writeConf", "tail" : ": WriteConf", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.writeConf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#writeConf:com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.writer.AsyncStatementWriter.connector", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/AsyncStatementWriter.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.BatchGroupingKey", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html", "members_object" : [{"label" : "apply", "tail" : "(name: String): BatchGroupingKey", "member" : "com.khulnasoft.spark.connector.writer.BatchGroupingKey.apply", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#apply(name:String):com.khulnasoft.spark.connector.writer.BatchGroupingKey", "kind" : "def"}, {"label" : "Partition", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.BatchGroupingKey.Partition", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#Partition", "kind" : "object"}, {"label" : "ReplicaSet", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.BatchGroupingKey.ReplicaSet", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#ReplicaSet", "kind" : "object"}, {"label" : "None", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.BatchGroupingKey.None", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#None", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/writer\/BatchGroupingKey.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.writer.CassandraRowWriter", "shortDescription" : "A RowWriter that can write CassandraRow objects.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html", "members_class" : [{"label" : "readColumnValues", "tail" : "(data: CassandraRow, buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.writer.CassandraRowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#readColumnValues(data:com.khulnasoft.spark.connector.CassandraRow,buffer:Array[Any]):Unit", "kind" : "def"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.writer.CassandraRowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.writer.CassandraRowWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Factory", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.CassandraRowWriter.Factory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#Factory", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/CassandraRowWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.DefaultRowWriter", "shortDescription" : "A RowWriter suitable for saving objects mappable by a ColumnMapper.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html", "members_class" : [{"label" : "readColumnValues", "tail" : "(data: T, buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.writer.DefaultRowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#readColumnValues(data:T,buffer:Array[Any]):Unit", "kind" : "def"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.writer.DefaultRowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.writer.DefaultRowWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "factory", "tail" : "(arg0: ColumnMapper[T], arg1: scala.reflect.api.JavaUniverse.TypeTag[T]): RowWriterFactory[T] { def rowWriter(tableDef: com.khulnasoft.spark.connector.cql.TableDef,selectedColumns: IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]): com.khulnasoft.spark.connector.writer.DefaultRowWriter[T] }", "member" : "com.khulnasoft.spark.connector.writer.DefaultRowWriter.factory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#factory[T](implicitevidence$3:com.khulnasoft.spark.connector.mapper.ColumnMapper[T],implicitevidence$4:reflect.runtime.universe.TypeTag[T]):com.khulnasoft.spark.connector.writer.RowWriterFactory[T]{defrowWriter(tableDef:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.writer.DefaultRowWriter[T]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultRowWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.DefaultValue", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/DefaultValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.writer.LowPriorityRowWriterFactoryImplicits", "members_trait" : [{"label" : "defaultRowWriterFactory", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T], arg1: ColumnMapper[T]): RowWriterFactory[T]", "member" : "com.khulnasoft.spark.connector.writer.LowPriorityRowWriterFactoryImplicits.defaultRowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#defaultRowWriterFactory[T](implicitevidence$2:reflect.runtime.universe.TypeTag[T],implicitevidence$3:com.khulnasoft.spark.connector.mapper.ColumnMapper[T]):com.khulnasoft.spark.connector.writer.RowWriterFactory[T]", "kind" : "implicit def"}, {"label" : "sqlRowWriterFactory", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): RowWriterFactory[Row]", "member" : "com.khulnasoft.spark.connector.writer.LowPriorityRowWriterFactoryImplicits.sqlRowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#sqlRowWriterFactory[T<:org.apache.spark.sql.Row](implicitevidence$1:reflect.runtime.universe.TypeTag[T]):com.khulnasoft.spark.connector.writer.RowWriterFactory[org.apache.spark.sql.Row]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides a low-priority implicit RowWriterFactory able to write objects of any class for whicha ColumnMapper is defined.", "trait" : "com\/khulnasoft\/spark\/connector\/writer\/LowPriorityRowWriterFactoryImplicits.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.writer.NullKeyColumnException", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.writer.NullKeyColumnException#<init>", "error" : "unsupported entity"}, {"label" : "columnName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.NullKeyColumnException.columnName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#columnName:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/NullKeyColumnException.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.ObjectSizeEstimator", "shortDescription" : "Estimates amount of memory required to serialize Java\/Scala objects", "object" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html", "members_object" : [{"label" : "measureSerializedSize", "tail" : "(objects: Seq[Any]): Int", "member" : "com.khulnasoft.spark.connector.writer.ObjectSizeEstimator.measureSerializedSize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#measureSerializedSize(objects:Seq[Any]):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ObjectSizeEstimator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.writer.PerRowWriteOptionValue", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.writer.PerRowWriteOptionValue#<init>", "error" : "unsupported entity"}, {"label" : "placeholder", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.PerRowWriteOptionValue.placeholder", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#placeholder:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/PerRowWriteOptionValue.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.QueryExecutor", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html", "members_class" : [{"member" : "com.khulnasoft.spark.connector.writer.QueryExecutor#<init>", "error" : "unsupported entity"}, {"label" : "waitForCurrentlyExecutingTasks", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.waitForCurrentlyExecutingTasks", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#waitForCurrentlyExecutingTasks():Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(task: RichStatement): AsyncResultSet", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.execute", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#execute(task:T):R", "kind" : "def"}, {"label" : "executeAsync", "tail" : "(task: RichStatement): Future[AsyncResultSet]", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.executeAsync", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#executeAsync(task:T):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "getLatestException", "tail" : "(): Option[Throwable]", "member" : "com.khulnasoft.spark.connector.writer.AsyncExecutor.getLatestException", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#getLatestException():Option[Throwable]", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(session: CqlSession, maxConcurrentQueries: Int, successHandler: Option[Handler[RichStatement]], failureHandler: Option[Handler[RichStatement]]): QueryExecutor", "member" : "com.khulnasoft.spark.connector.writer.QueryExecutor.apply", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#apply(session:com.khulnasoft.oss.driver.api.core.CqlSession,maxConcurrentQueries:Int,successHandler:Option[com.khulnasoft.spark.connector.writer.AsyncExecutor.Handler[com.khulnasoft.spark.connector.writer.RichStatement]],failureHandler:Option[com.khulnasoft.spark.connector.writer.AsyncExecutor.Handler[com.khulnasoft.spark.connector.writer.RichStatement]]):com.khulnasoft.spark.connector.writer.QueryExecutor", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/QueryExecutor.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.RateLimiter", "shortDescription" : "A leaking bucket rate limiter.", "members_class" : [{"label" : "maybeSleep", "tail" : "(packetSize: Long): Unit", "member" : "com.khulnasoft.spark.connector.writer.RateLimiter.maybeSleep", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#maybeSleep(packetSize:Long):Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.writer.RateLimiter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/RateLimiter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.ReplicaLocator", "shortDescription" : "A utility class for determining the Replica Set (Ip Addresses) of a particular Cassandra Row.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html", "members_class" : [{"label" : "keyByReplicas", "tail" : "(data: Iterator[T]): Iterator[(Set[InetAddress], T)]", "member" : "com.khulnasoft.spark.connector.writer.ReplicaLocator.keyByReplicas", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#keyByReplicas(data:Iterator[T]):Iterator[(scala.collection.immutable.Set[java.net.InetAddress],T)]", "kind" : "def"}, {"label" : "tokenMap", "tail" : ": TokenMap", "member" : "com.khulnasoft.spark.connector.writer.ReplicaLocator.tokenMap", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#tokenMap:com.khulnasoft.oss.driver.api.core.metadata.TokenMap", "kind" : "val"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.writer.ReplicaLocator.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#columnNames:Seq[String]", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.ReplicaLocator.tableName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.ReplicaLocator.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#keyspaceName:String", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(connector: CassandraConnector, keyspaceName: String, tableName: String, partitionKeyMapper: ColumnSelector)(arg0: RowWriterFactory[T]): ReplicaLocator[T]", "member" : "com.khulnasoft.spark.connector.writer.ReplicaLocator.apply", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#apply[T](connector:com.khulnasoft.spark.connector.cql.CassandraConnector,keyspaceName:String,tableName:String,partitionKeyMapper:com.khulnasoft.spark.connector.ColumnSelector)(implicitevidence$1:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.writer.ReplicaLocator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/ReplicaLocator.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.RichStatement", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executeAs", "tail" : "(executeAs: Option[String]): RichStatement", "member" : "com.khulnasoft.spark.connector.writer.RichStatement.executeAs", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#executeAs(executeAs:Option[String]):com.khulnasoft.spark.connector.writer.RichStatement", "kind" : "abstract def"}, {"label" : "stmt", "tail" : "(): DriverStatement", "member" : "com.khulnasoft.spark.connector.writer.RichStatement.stmt", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#stmt:com.khulnasoft.spark.connector.writer.RichStatement.DriverStatement", "kind" : "abstract def"}, {"label" : "rowsCount", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.writer.RichStatement.rowsCount", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#rowsCount:Int", "kind" : "abstract def"}, {"label" : "bytesCount", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.writer.RichStatement.bytesCount", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html#bytesCount:Int", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html", "members_object" : [{"label" : "DriverStatement", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.RichStatement.DriverStatement", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#DriverStatement=com.khulnasoft.oss.driver.api.core.cql.Statement[_<:com.khulnasoft.oss.driver.api.core.cql.Statement[_]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/writer\/RichStatement.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.writer.RowWriter", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "readColumnValues", "tail" : "(data: T, buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.writer.RowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#readColumnValues(data:T,buffer:Array[Any]):Unit", "kind" : "abstract def"}, {"label" : "columnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.writer.RowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html#columnNames:Seq[String]", "kind" : "abstract def"}], "shortDescription" : "RowWriter knows how to extract column names and values from custom row objectsand how to convert them to values that can be written to Cassandra.", "trait" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriter.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.writer.RowWriterFactory", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rowWriter", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowWriter[T]", "member" : "com.khulnasoft.spark.connector.writer.RowWriterFactory.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html#rowWriter(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.writer.RowWriter[T]", "kind" : "abstract def"}], "shortDescription" : "Creates instances of RowWriter objects for the given row type T.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html", "members_object" : [{"label" : "genericRowWriterFactory", "tail" : ": Factory.type", "member" : "com.khulnasoft.spark.connector.writer.RowWriterFactory.genericRowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#genericRowWriterFactory:com.khulnasoft.spark.connector.writer.CassandraRowWriter.Factory.type", "kind" : "implicit val"}, {"label" : "defaultRowWriterFactory", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T], arg1: ColumnMapper[T]): RowWriterFactory[T]", "member" : "com.khulnasoft.spark.connector.writer.LowPriorityRowWriterFactoryImplicits.defaultRowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#defaultRowWriterFactory[T](implicitevidence$2:reflect.runtime.universe.TypeTag[T],implicitevidence$3:com.khulnasoft.spark.connector.mapper.ColumnMapper[T]):com.khulnasoft.spark.connector.writer.RowWriterFactory[T]", "kind" : "implicit def"}, {"label" : "sqlRowWriterFactory", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): RowWriterFactory[Row]", "member" : "com.khulnasoft.spark.connector.writer.LowPriorityRowWriterFactoryImplicits.sqlRowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#sqlRowWriterFactory[T<:org.apache.spark.sql.Row](implicitevidence$1:reflect.runtime.universe.TypeTag[T]):com.khulnasoft.spark.connector.writer.RowWriterFactory[org.apache.spark.sql.Row]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/writer\/RowWriterFactory.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.writer.SqlRowWriter", "shortDescription" : "A RowWriter that can write SparkSQL Row objects.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html", "members_class" : [{"label" : "readColumnValues", "tail" : "(row: Row, buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.writer.SqlRowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#readColumnValues(row:org.apache.spark.sql.Row,buffer:Array[Any]):Unit", "kind" : "def"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.writer.SqlRowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.writer.SqlRowWriter#<init>", "error" : "unsupported entity"}, {"label" : "selectedColumns", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.writer.SqlRowWriter.selectedColumns", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "val"}, {"label" : "table", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.writer.SqlRowWriter.table", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#table:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Factory", "tail" : "", "member" : "com.khulnasoft.spark.connector.writer.SqlRowWriter.Factory", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#Factory", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/SqlRowWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.StaticWriteOptionValue", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.writer.StaticWriteOptionValue#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": T", "member" : "com.khulnasoft.spark.connector.writer.StaticWriteOptionValue.value", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#value:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/StaticWriteOptionValue.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.TableWriter", "shortDescription" : "Writes RDD data into given Cassandra table.", "object" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html", "members_class" : [{"label" : "getAsyncWriter", "tail" : "(): AsyncStatementWriter[T]", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.getAsyncWriter", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#getAsyncWriter():com.khulnasoft.spark.connector.writer.AsyncStatementWriter[T]", "kind" : "def"}, {"label" : "delete", "tail" : "(columns: ColumnSelector)(taskContext: TaskContext, data: Iterator[T]): Unit", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.delete", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#delete(columns:com.khulnasoft.spark.connector.ColumnSelector)(taskContext:org.apache.spark.TaskContext,data:Iterator[T]):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(taskContext: TaskContext, data: Iterator[T]): Unit", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.write", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#write(taskContext:org.apache.spark.TaskContext,data:Iterator[T]):Unit", "kind" : "def"}, {"label" : "batchRoutingKey", "tail" : "(session: CqlSession)(bs: RichBoundStatementWrapper): Any", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.batchRoutingKey", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#batchRoutingKey(session:com.khulnasoft.oss.driver.api.core.CqlSession)(bs:com.khulnasoft.spark.connector.writer.RichBoundStatementWrapper):Any", "kind" : "def"}, {"label" : "columns", "tail" : ": Seq[ColumnDef]", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.columns", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#columns:Seq[com.khulnasoft.spark.connector.cql.ColumnDef]", "kind" : "val"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.tableName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#keyspaceName:String", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(connector: CassandraConnector, tableDef: TableDef, columnNames: ColumnSelector, writeConf: WriteConf, checkPartitionKey: Boolean)(arg0: RowWriterFactory[T]): TableWriter[T]", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.apply", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#apply[T](connector:com.khulnasoft.spark.connector.cql.CassandraConnector,tableDef:com.khulnasoft.spark.connector.cql.TableDef,columnNames:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf,checkPartitionKey:Boolean)(implicitevidence$2:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.writer.TableWriter[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(connector: CassandraConnector, keyspaceName: String, tableName: String, columnNames: ColumnSelector, writeConf: WriteConf, checkPartitionKey: Boolean)(arg0: RowWriterFactory[T]): TableWriter[T]", "member" : "com.khulnasoft.spark.connector.writer.TableWriter.apply", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#apply[T](connector:com.khulnasoft.spark.connector.cql.CassandraConnector,keyspaceName:String,tableName:String,columnNames:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf,checkPartitionKey:Boolean)(implicitevidence$1:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.writer.TableWriter[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/TableWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.TimestampOption", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html", "members_object" : [{"label" : "perRow", "tail" : "(placeholder: String): TimestampOption", "member" : "com.khulnasoft.spark.connector.writer.TimestampOption.perRow", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#perRow(placeholder:String):com.khulnasoft.spark.connector.writer.TimestampOption", "kind" : "def"}, {"label" : "constant", "tail" : "(timestamp: DateTime): TimestampOption", "member" : "com.khulnasoft.spark.connector.writer.TimestampOption.constant", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#constant(timestamp:org.joda.time.DateTime):com.khulnasoft.spark.connector.writer.TimestampOption", "kind" : "def"}, {"label" : "constant", "tail" : "(timestamp: Date): TimestampOption", "member" : "com.khulnasoft.spark.connector.writer.TimestampOption.constant", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#constant(timestamp:java.util.Date):com.khulnasoft.spark.connector.writer.TimestampOption", "kind" : "def"}, {"label" : "constant", "tail" : "(microseconds: Long): TimestampOption", "member" : "com.khulnasoft.spark.connector.writer.TimestampOption.constant", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#constant(microseconds:Long):com.khulnasoft.spark.connector.writer.TimestampOption", "kind" : "def"}, {"label" : "defaultValue", "tail" : ": TimestampOption", "member" : "com.khulnasoft.spark.connector.writer.TimestampOption.defaultValue", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#defaultValue:com.khulnasoft.spark.connector.writer.TimestampOption", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.khulnasoft.spark.connector.writer.TimestampOption#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": WriteOptionValue[Long]", "member" : "com.khulnasoft.spark.connector.writer.TimestampOption.value", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#value:com.khulnasoft.spark.connector.writer.WriteOptionValue[Long]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/TimestampOption.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.TTLOption", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html", "members_object" : [{"label" : "perRow", "tail" : "(placeholder: String): TTLOption", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.perRow", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#perRow(placeholder:String):com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "def"}, {"label" : "constant", "tail" : "(ttl: Duration): TTLOption", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.constant", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#constant(ttl:scala.concurrent.duration.Duration):com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "def"}, {"label" : "constant", "tail" : "(ttl: Duration): TTLOption", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.constant", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#constant(ttl:org.joda.time.Duration):com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "def"}, {"label" : "constant", "tail" : "(ttl: Int): TTLOption", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.constant", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#constant(ttl:Int):com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "def"}, {"label" : "forever", "tail" : "(): TTLOption", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.forever", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#forever:com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "def"}, {"label" : "defaultValue", "tail" : ": TTLOption", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.defaultValue", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#defaultValue:com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.khulnasoft.spark.connector.writer.TTLOption#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": WriteOptionValue[Int]", "member" : "com.khulnasoft.spark.connector.writer.TTLOption.value", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#value:com.khulnasoft.spark.connector.writer.WriteOptionValue[Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/TTLOption.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.WritableToCassandra", "shortDescription" : "", "members_class" : [{"member" : "com.khulnasoft.spark.connector.writer.WritableToCassandra#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deleteFromCassandra", "tail" : "(keyspaceName: String, tableName: String, deleteColumns: ColumnSelector, keyColumns: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.writer.WritableToCassandra.deleteFromCassandra", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#deleteFromCassandra(keyspaceName:String,tableName:String,deleteColumns:com.khulnasoft.spark.connector.ColumnSelector,keyColumns:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "abstract def"}, {"label" : "saveToCassandra", "tail" : "(keyspaceName: String, tableName: String, columnNames: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.writer.WritableToCassandra.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#saveToCassandra(keyspaceName:String,tableName:String,columnNames:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "abstract def"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "com.khulnasoft.spark.connector.writer.WritableToCassandra.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html#sparkContext:org.apache.spark.SparkContext", "kind" : "abstract def"}], "class" : "com\/khulnasoft\/spark\/connector\/writer\/WritableToCassandra.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.writer.WriteConf", "shortDescription" : "Write settings for RDD", "object" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html", "members_object" : [{"label" : "fromSparkConf", "tail" : "(conf: SparkConf): WriteConf", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.fromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#fromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "def"}, {"label" : "TaskMetricsParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.TaskMetricsParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#TaskMetricsParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "TimestampParam", "tail" : ": ConfigParameter[Long]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.TimestampParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#TimestampParam:com.khulnasoft.spark.connector.util.ConfigParameter[Long]", "kind" : "val"}, {"label" : "TTLParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.TTLParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#TTLParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "DeprecatedThroughputMiBPSParam", "tail" : ": DeprecatedConfigParameter[Option[Double]]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.DeprecatedThroughputMiBPSParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#DeprecatedThroughputMiBPSParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Option[Double]]", "kind" : "val"}, {"label" : "ThroughputMiBPSParam", "tail" : ": ConfigParameter[Option[Double]]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ThroughputMiBPSParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#ThroughputMiBPSParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Double]]", "kind" : "val"}, {"label" : "ParallelismLevelParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ParallelismLevelParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#ParallelismLevelParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "IgnoreNullsParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.IgnoreNullsParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#IgnoreNullsParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "IfNotExistsParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.IfNotExistsParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#IfNotExistsParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "BatchLevelParam", "tail" : ": ConfigParameter[BatchGroupingKey]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.BatchLevelParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#BatchLevelParam:com.khulnasoft.spark.connector.util.ConfigParameter[com.khulnasoft.spark.connector.writer.BatchGroupingKey]", "kind" : "val"}, {"label" : "BatchBufferSizeParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.BatchBufferSizeParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#BatchBufferSizeParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "BatchSizeBytesParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.BatchSizeBytesParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#BatchSizeBytesParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "BatchSizeRowsParam", "tail" : ": ConfigParameter[Option[Int]]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.BatchSizeRowsParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#BatchSizeRowsParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Int]]", "kind" : "val"}, {"label" : "ConsistencyLevelParam", "tail" : ": ConfigParameter[ConsistencyLevel]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ConsistencyLevelParam", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#ConsistencyLevelParam:com.khulnasoft.spark.connector.util.ConfigParameter[com.khulnasoft.oss.driver.api.core.ConsistencyLevel]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ReferenceSection", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "throttlingEnabled", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.throttlingEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#throttlingEnabled:Boolean", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.writer.WriteConf#<init>", "error" : "unsupported entity"}, {"label" : "executeAs", "tail" : ": Option[String]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.executeAs", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#executeAs:Option[String]", "kind" : "val"}, {"label" : "taskMetricsEnabled", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.taskMetricsEnabled", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#taskMetricsEnabled:Boolean", "kind" : "val"}, {"label" : "timestamp", "tail" : ": TimestampOption", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.timestamp", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#timestamp:com.khulnasoft.spark.connector.writer.TimestampOption", "kind" : "val"}, {"label" : "ttl", "tail" : ": TTLOption", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ttl", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#ttl:com.khulnasoft.spark.connector.writer.TTLOption", "kind" : "val"}, {"label" : "throughputMiBPS", "tail" : ": Option[Double]", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.throughputMiBPS", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#throughputMiBPS:Option[Double]", "kind" : "val"}, {"label" : "parallelismLevel", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.parallelismLevel", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#parallelismLevel:Int", "kind" : "val"}, {"label" : "ignoreNulls", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ignoreNulls", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#ignoreNulls:Boolean", "kind" : "val"}, {"label" : "ifNotExists", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.ifNotExists", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#ifNotExists:Boolean", "kind" : "val"}, {"label" : "consistencyLevel", "tail" : ": ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "val"}, {"label" : "batchGroupingKey", "tail" : ": BatchGroupingKey", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.batchGroupingKey", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#batchGroupingKey:com.khulnasoft.spark.connector.writer.BatchGroupingKey", "kind" : "val"}, {"label" : "batchGroupingBufferSize", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.batchGroupingBufferSize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#batchGroupingBufferSize:Int", "kind" : "val"}, {"label" : "batchSize", "tail" : ": BatchSize", "member" : "com.khulnasoft.spark.connector.writer.WriteConf.batchSize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#batchSize:com.khulnasoft.spark.connector.BatchSize", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/writer\/WriteConf.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.writer.WriteOption", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html", "members_object" : [{"label" : "unapply", "tail" : "(writeOption: WriteOption[_]): Option[WriteOptionValue[_]]", "member" : "com.khulnasoft.spark.connector.writer.WriteOption.unapply", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#unapply(writeOption:com.khulnasoft.spark.connector.writer.WriteOption[_]):Option[com.khulnasoft.spark.connector.writer.WriteOptionValue[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOption.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.writer.WriteOptionValue", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/writer\/WriteOptionValue.html", "kind" : "trait"}], "com.khulnasoft.spark" : [], "com.khulnasoft.bdp.util" : [{"name" : "com.khulnasoft.bdp.util.MiscUtil", "shortDescription" : "", "object" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html", "members_object" : [{"label" : "objectOrClassName", "tail" : "(o: AnyRef): String", "member" : "com.khulnasoft.bdp.util.MiscUtil.objectOrClassName", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#objectOrClassName(o:AnyRef):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/bdp\/util\/MiscUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.bdp.util.ScalaJavaUtil", "shortDescription" : "", "object" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html", "members_object" : [{"label" : "asScalaFuture", "tail" : "(completionStage: CompletionStage[T])(context: ExecutionContextExecutor): Future[T]", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asScalaFuture", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asScalaFuture[T](completionStage:java.util.concurrent.CompletionStage[T])(implicitcontext:scala.concurrent.ExecutionContextExecutor):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "asScalaFunction", "tail" : "(f: Function[T, R]): (T) ⇒ R", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asScalaFunction", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asScalaFunction[T,R](f:java.util.function.Function[T,R]):T=>R", "kind" : "def"}, {"label" : "asJavaFunction", "tail" : "(f: (T) ⇒ R): Function[T, R]", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asJavaFunction", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asJavaFunction[T,R](f:T=>R):java.util.function.Function[T,R]", "kind" : "implicit def"}, {"label" : "asJavaSupplier", "tail" : "(f: () ⇒ T): Supplier[T]", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asJavaSupplier", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asJavaSupplier[T](f:()=>T):java.util.function.Supplier[T]", "kind" : "implicit def"}, {"label" : "asJavaConsumer", "tail" : "(f: (T) ⇒ Unit): Consumer[T]", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asJavaConsumer", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asJavaConsumer[T](f:T=>Unit):java.util.function.Consumer[T]", "kind" : "implicit def"}, {"label" : "asJavaPredicate", "tail" : "(f: (T) ⇒ Boolean): Predicate[T]", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asJavaPredicate", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asJavaPredicate[T](f:T=>Boolean):java.util.function.Predicate[T]", "kind" : "implicit def"}, {"label" : "asJavaCallable", "tail" : "(f: () ⇒ T): Callable[T]", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.asJavaCallable", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asJavaCallable[T](f:()=>T):java.util.concurrent.Callable[T]", "kind" : "implicit def"}, {"label" : "ScalaDurationWrapper", "tail" : "", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.ScalaDurationWrapper", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#ScalaDurationWrapperextendsAnyVal", "kind" : "implicit final class"}, {"label" : "JavaDurationWrapper", "tail" : "", "member" : "com.khulnasoft.bdp.util.ScalaJavaUtil.JavaDurationWrapper", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#JavaDurationWrapperextendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/bdp\/util\/ScalaJavaUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.khulnasoft.bdp.spark" : [{"name" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner", "shortDescription" : "", "object" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html", "members_object" : [{"label" : "apply", "tail" : "(readConf: ReadConf, connConf: CassandraConnectorConf, columnNames: IndexedSeq[String]): ContinuousPagingScanner", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.apply", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#apply(readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf,columnNames:IndexedSeq[String]):com.khulnasoft.bdp.spark.ContinuousPagingScanner", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "scan", "tail" : "(statement: StatementT): ScanResult", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.scan", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#scan[StatementT<:com.khulnasoft.oss.driver.api.core.cql.Statement[StatementT]](statement:StatementT):com.khulnasoft.spark.connector.cql.ScanResult", "kind" : "def"}, {"label" : "getSession", "tail" : "(): CqlSession", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.getSession", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#getSession():com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.close", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#close():Unit", "kind" : "def"}, {"label" : "isSolr", "tail" : "(statement: Statement[_]): Boolean", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.isSolr", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#isSolr(statement:com.khulnasoft.oss.driver.api.core.cql.Statement[_]):Boolean", "kind" : "def"}, {"label" : "MIN_PAGES_PER_SECOND", "tail" : ": Int", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.MIN_PAGES_PER_SECOND", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#MIN_PAGES_PER_SECOND:Int", "kind" : "val"}, {"label" : "TARGET_PAGE_SIZE_IN_BYTES", "tail" : ": Int", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.TARGET_PAGE_SIZE_IN_BYTES", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#TARGET_PAGE_SIZE_IN_BYTES:Int", "kind" : "val"}, {"member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner#<init>", "error" : "unsupported entity"}, {"label" : "cqlSession", "tail" : ": CqlSession", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.cqlSession", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#cqlSession:com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "val"}, {"label" : "columnNames", "tail" : ": IndexedSeq[String]", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.columnNames", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#columnNames:IndexedSeq[String]", "kind" : "val"}, {"label" : "connConf", "tail" : ": CassandraConnectorConf", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.connConf", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#connConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.bdp.spark.ContinuousPagingScanner.readConf", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/bdp\/spark\/ContinuousPagingScanner.html", "kind" : "case class"}], "com.khulnasoft.spark.connector.japi" : [{"name" : "com.khulnasoft.spark.connector.japi.CassandraJavaUtil", "shortDescription" : "", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraJavaUtil.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.CassandraStreamingJavaUtil", "shortDescription" : "", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/CassandraStreamingJavaUtil.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.DStreamJavaFunctions", "shortDescription" : "", "members_class" : [{"label" : "WriterBuilder", "tail" : "", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.WriterBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#WriterBuilderextendsSerializable", "kind" : "class"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], columnNames: ColumnSelector, conf: WriteConf, connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.japi.DStreamJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector,conf:com.khulnasoft.spark.connector.writer.WriteConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "getConf", "tail" : "(): SparkConf", "member" : "com.khulnasoft.spark.connector.japi.DStreamJavaFunctions.getConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#getConf():org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "defaultConnector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.japi.DStreamJavaFunctions.defaultConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#defaultConnector():com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "writerBuilder", "tail" : "(keyspaceName: String, tableName: String, rowWriterFactory: RowWriterFactory[T]): WriterBuilder", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.writerBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#writerBuilder(keyspaceName:String,tableName:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):RDDAndDStreamCommonJavaFunctions.this.WriterBuilder", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], columnNames: ColumnSelector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector):Unit", "kind" : "def"}, {"label" : "defaultWriteConf", "tail" : "(): WriteConf", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.defaultWriteConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#defaultWriteConf():com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/DStreamJavaFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.GenericJavaRowReaderFactory", "shortDescription" : "", "members_class" : [{"member" : "com.khulnasoft.spark.connector.japi.GenericJavaRowReaderFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/GenericJavaRowReaderFactory.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.PairRDDJavaFunctions", "shortDescription" : "", "members_class" : [{"label" : "WriterBuilder", "tail" : "", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.WriterBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#WriterBuilderextendsSerializable", "kind" : "class"}, {"label" : "spanByKey", "tail" : "(keyClassTag: ClassTag[K]): JavaPairRDD[K, Collection[V]]", "member" : "com.khulnasoft.spark.connector.japi.PairRDDJavaFunctions.spanByKey", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#spanByKey(keyClassTag:scala.reflect.ClassTag[K]):org.apache.spark.api.java.JavaPairRDD[K,java.util.Collection[V]]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.PairRDDJavaFunctions#<init>", "error" : "unsupported entity"}, {"label" : "repartitionByCassandraReplica", "tail" : "(keyspaceName: String, tableName: String, partitionsPerHost: Int, partitionkeyMapper: ColumnSelector, rowWriterFactory: RowWriterFactory[(K, V)]): JavaRDD[(K, V)]", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.repartitionByCassandraReplica", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#repartitionByCassandraReplica(keyspaceName:String,tableName:String,partitionsPerHost:Int,partitionkeyMapper:com.khulnasoft.spark.connector.ColumnSelector,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "joinWithCassandraTable", "tail" : "(keyspaceName: String, tableName: String, selectedColumns: ColumnSelector, joinColumns: ColumnSelector, rowReaderFactory: RowReaderFactory[R], rowWriterFactory: RowWriterFactory[(K, V)]): CassandraJavaPairRDD[(K, V), R]", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.joinWithCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#joinWithCassandraTable[R](keyspaceName:String,tableName:String,selectedColumns:com.khulnasoft.spark.connector.ColumnSelector,joinColumns:com.khulnasoft.spark.connector.ColumnSelector,rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R],rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[T,R]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: Function[(K, V), U], keyClassTag: ClassTag[U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#spanBy[U](f:org.apache.spark.api.java.function.Function[T,U],keyClassTag:scala.reflect.ClassTag[U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "deleteFromCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[(K, V)], deleteColumns: ColumnSelector, keyColumns: ColumnSelector, conf: WriteConf, connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.deleteFromCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#deleteFromCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],deleteColumns:com.khulnasoft.spark.connector.ColumnSelector,keyColumns:com.khulnasoft.spark.connector.ColumnSelector,conf:com.khulnasoft.spark.connector.writer.WriteConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[(K, V)], columnNames: ColumnSelector, conf: WriteConf, connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector,conf:com.khulnasoft.spark.connector.writer.WriteConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "getConf", "tail" : "(): SparkConf", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.getConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#getConf():org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "defaultConnector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.defaultConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#defaultConnector():com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "writerBuilder", "tail" : "(keyspaceName: String, tableName: String, rowWriterFactory: RowWriterFactory[(K, V)]): WriterBuilder", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.writerBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#writerBuilder(keyspaceName:String,tableName:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):RDDAndDStreamCommonJavaFunctions.this.WriterBuilder", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[(K, V)], columnNames: ColumnSelector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector):Unit", "kind" : "def"}, {"label" : "defaultWriteConf", "tail" : "(): WriteConf", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.defaultWriteConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#defaultWriteConf():com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/PairRDDJavaFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions", "shortDescription" : "", "members_class" : [{"label" : "WriterBuilder", "tail" : "", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.WriterBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#WriterBuilderextendsSerializable", "kind" : "class"}, {"label" : "writerBuilder", "tail" : "(keyspaceName: String, tableName: String, rowWriterFactory: RowWriterFactory[T]): WriterBuilder", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.writerBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#writerBuilder(keyspaceName:String,tableName:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):RDDAndDStreamCommonJavaFunctions.this.WriterBuilder", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], columnNames: ColumnSelector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector):Unit", "kind" : "def"}, {"label" : "defaultWriteConf", "tail" : "(): WriteConf", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.defaultWriteConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#defaultWriteConf():com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], columnNames: ColumnSelector, conf: WriteConf, connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector,conf:com.khulnasoft.spark.connector.writer.WriteConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "abstract def"}, {"label" : "getConf", "tail" : "(): SparkConf", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.getConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#getConf():org.apache.spark.SparkConf", "kind" : "abstract def"}, {"label" : "defaultConnector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.defaultConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#defaultConnector():com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "abstract def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions", "shortDescription" : "", "members_class" : [{"label" : "WriterBuilder", "tail" : "", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.WriterBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDAndDStreamCommonJavaFunctions.html#WriterBuilderextendsSerializable", "kind" : "class"}, {"label" : "repartitionByCassandraReplica", "tail" : "(keyspaceName: String, tableName: String, partitionsPerHost: Int, partitionkeyMapper: ColumnSelector, rowWriterFactory: RowWriterFactory[T]): JavaRDD[T]", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.repartitionByCassandraReplica", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#repartitionByCassandraReplica(keyspaceName:String,tableName:String,partitionsPerHost:Int,partitionkeyMapper:com.khulnasoft.spark.connector.ColumnSelector,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "joinWithCassandraTable", "tail" : "(keyspaceName: String, tableName: String, selectedColumns: ColumnSelector, joinColumns: ColumnSelector, rowReaderFactory: RowReaderFactory[R], rowWriterFactory: RowWriterFactory[T]): CassandraJavaPairRDD[T, R]", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.joinWithCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#joinWithCassandraTable[R](keyspaceName:String,tableName:String,selectedColumns:com.khulnasoft.spark.connector.ColumnSelector,joinColumns:com.khulnasoft.spark.connector.ColumnSelector,rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R],rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[T,R]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: Function[T, U], keyClassTag: ClassTag[U]): JavaPairRDD[U, Iterable[T]]", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#spanBy[U](f:org.apache.spark.api.java.function.Function[T,U],keyClassTag:scala.reflect.ClassTag[U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "deleteFromCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], deleteColumns: ColumnSelector, keyColumns: ColumnSelector, conf: WriteConf, connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.deleteFromCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#deleteFromCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],deleteColumns:com.khulnasoft.spark.connector.ColumnSelector,keyColumns:com.khulnasoft.spark.connector.ColumnSelector,conf:com.khulnasoft.spark.connector.writer.WriteConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], columnNames: ColumnSelector, conf: WriteConf, connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector,conf:com.khulnasoft.spark.connector.writer.WriteConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "getConf", "tail" : "(): SparkConf", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.getConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#getConf():org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "defaultConnector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions.defaultConnector", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#defaultConnector():com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.japi.RDDJavaFunctions#<init>", "error" : "unsupported entity"}, {"label" : "writerBuilder", "tail" : "(keyspaceName: String, tableName: String, rowWriterFactory: RowWriterFactory[T]): WriterBuilder", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.writerBuilder", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#writerBuilder(keyspaceName:String,tableName:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):RDDAndDStreamCommonJavaFunctions.this.WriterBuilder", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspace: String, table: String, rowWriterFactory: RowWriterFactory[T], columnNames: ColumnSelector): Unit", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#saveToCassandra(keyspace:String,table:String,rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],columnNames:com.khulnasoft.spark.connector.ColumnSelector):Unit", "kind" : "def"}, {"label" : "defaultWriteConf", "tail" : "(): WriteConf", "member" : "com.khulnasoft.spark.connector.japi.RDDAndDStreamCommonJavaFunctions.defaultWriteConf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#defaultWriteConf():com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/RDDJavaFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions", "shortDescription" : "", "members_class" : [{"label" : "cassandraTable", "tail" : "(keyspace: String, table: String, rrf: RowReaderFactory[T]): CassandraTableScanJavaRDD[T]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.cassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#cassandraTable[T](keyspace:String,table:String,rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T]):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[T]", "kind" : "def"}, {"label" : "cassandraTable", "tail" : "(keyspace: String, table: String): CassandraTableScanJavaRDD[CassandraRow]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.cassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#cassandraTable(keyspace:String,table:String):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[com.khulnasoft.spark.connector.japi.CassandraRow]", "kind" : "def"}, {"label" : "toJavaPairRDD", "tail" : "(rdd: CassandraRDD[(K, V)], keyClass: Class[K], valueClass: Class[V]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.toJavaPairRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#toJavaPairRDD[K,V](rdd:com.khulnasoft.spark.connector.rdd.CassandraRDD[(K,V)],keyClass:Class[K],valueClass:Class[V]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "toJavaRDD", "tail" : "(rdd: CassandraRDD[T], targetClass: Class[T]): CassandraJavaRDD[T]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#toJavaRDD[T](rdd:com.khulnasoft.spark.connector.rdd.CassandraRDD[T],targetClass:Class[T]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/SparkContextJavaFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.japi.StreamingContextJavaFunctions", "shortDescription" : "", "members_class" : [{"label" : "cassandraTable", "tail" : "(keyspace: String, table: String, rrf: RowReaderFactory[T]): CassandraTableScanJavaRDD[T]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.cassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#cassandraTable[T](keyspace:String,table:String,rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T]):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[T]", "kind" : "def"}, {"label" : "cassandraTable", "tail" : "(keyspace: String, table: String): CassandraTableScanJavaRDD[CassandraRow]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.cassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#cassandraTable(keyspace:String,table:String):com.khulnasoft.spark.connector.japi.rdd.CassandraTableScanJavaRDD[com.khulnasoft.spark.connector.japi.CassandraRow]", "kind" : "def"}, {"label" : "toJavaPairRDD", "tail" : "(rdd: CassandraRDD[(K, V)], keyClass: Class[K], valueClass: Class[V]): CassandraJavaPairRDD[K, V]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.toJavaPairRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#toJavaPairRDD[K,V](rdd:com.khulnasoft.spark.connector.rdd.CassandraRDD[(K,V)],keyClass:Class[K],valueClass:Class[V]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaPairRDD[K,V]", "kind" : "def"}, {"label" : "toJavaRDD", "tail" : "(rdd: CassandraRDD[T], targetClass: Class[T]): CassandraJavaRDD[T]", "member" : "com.khulnasoft.spark.connector.japi.SparkContextJavaFunctions.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#toJavaRDD[T](rdd:com.khulnasoft.spark.connector.rdd.CassandraRDD[T],targetClass:Class[T]):com.khulnasoft.spark.connector.japi.rdd.CassandraJavaRDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/japi\/StreamingContextJavaFunctions.html", "kind" : "class"}], "scala" : [], "org.apache.spark.metrics" : [{"name" : "org.apache.spark.metrics.CassandraConnectorSource", "shortDescription" : "This class is a Source implementation for Cassandra Connector related Codahale metrics.", "members_class" : [{"label" : "readTaskTimer", "tail" : ": com.codahale.metrics.Timer", "member" : "org.apache.spark.metrics.CassandraConnectorSource.readTaskTimer", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#readTaskTimer:com.codahale.metrics.Timer", "kind" : "val"}, {"label" : "readRowMeter", "tail" : ": Meter", "member" : "org.apache.spark.metrics.CassandraConnectorSource.readRowMeter", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#readRowMeter:com.codahale.metrics.Meter", "kind" : "val"}, {"label" : "readByteMeter", "tail" : ": Meter", "member" : "org.apache.spark.metrics.CassandraConnectorSource.readByteMeter", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#readByteMeter:com.codahale.metrics.Meter", "kind" : "val"}, {"label" : "writeFailureCounter", "tail" : ": Counter", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeFailureCounter", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeFailureCounter:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "writeSuccessCounter", "tail" : ": Counter", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeSuccessCounter", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeSuccessCounter:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "writeBatchSizeHistogram", "tail" : ": Histogram", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeBatchSizeHistogram", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeBatchSizeHistogram:com.codahale.metrics.Histogram", "kind" : "val"}, {"label" : "writeTaskTimer", "tail" : ": com.codahale.metrics.Timer", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeTaskTimer", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeTaskTimer:com.codahale.metrics.Timer", "kind" : "val"}, {"label" : "writeBatchWaitTimer", "tail" : ": com.codahale.metrics.Timer", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeBatchWaitTimer", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeBatchWaitTimer:com.codahale.metrics.Timer", "kind" : "val"}, {"label" : "writeBatchTimer", "tail" : ": com.codahale.metrics.Timer", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeBatchTimer", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeBatchTimer:com.codahale.metrics.Timer", "kind" : "val"}, {"label" : "writeRowMeter", "tail" : ": Meter", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeRowMeter", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeRowMeter:com.codahale.metrics.Meter", "kind" : "val"}, {"label" : "writeByteMeter", "tail" : ": Meter", "member" : "org.apache.spark.metrics.CassandraConnectorSource.writeByteMeter", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#writeByteMeter:com.codahale.metrics.Meter", "kind" : "val"}, {"label" : "metricRegistry", "tail" : ": MetricRegistry", "member" : "org.apache.spark.metrics.CassandraConnectorSource.metricRegistry", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#metricRegistry:com.codahale.metrics.MetricRegistry", "kind" : "val"}, {"label" : "sourceName", "tail" : ": String", "member" : "org.apache.spark.metrics.CassandraConnectorSource.sourceName", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#sourceName:String", "kind" : "val"}, {"member" : "org.apache.spark.metrics.CassandraConnectorSource#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/metrics\/CassandraConnectorSource.html", "kind" : "class"}, {"name" : "org.apache.spark.metrics.CassandraSink", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/CassandraSink$.html", "members_class" : [{"label" : "tryGetOrCreateWriter", "tail" : "(sparkConfOpt: ⇒ Option[SparkConf]): Option[Writer]", "member" : "org.apache.spark.metrics.CassandraSink.tryGetOrCreateWriter", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#tryGetOrCreateWriter(sparkConfOpt:=>Option[org.apache.spark.SparkConf]):Option[org.apache.spark.metrics.CassandraSink.Writer]", "kind" : "def"}, {"label" : "tryGetOrCreateConnector", "tail" : "(sparkConfOpt: ⇒ Option[SparkConf]): Option[CassandraConnector]", "member" : "org.apache.spark.metrics.CassandraSink.tryGetOrCreateConnector", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#tryGetOrCreateConnector(sparkConfOpt:=>Option[org.apache.spark.SparkConf]):Option[com.khulnasoft.spark.connector.cql.CassandraConnector]", "kind" : "def"}, {"label" : "getSparkConf", "tail" : "(): Option[SparkConf]", "member" : "org.apache.spark.metrics.CassandraSink.getSparkConf", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#getSparkConf:Option[org.apache.spark.SparkConf]", "kind" : "def"}, {"label" : "MetricName", "tail" : "", "member" : "org.apache.spark.metrics.CassandraSink.MetricName", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#MetricName", "kind" : "object"}, {"label" : "report", "tail" : "(): Unit", "member" : "org.apache.spark.metrics.CassandraSink.report", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#report():Unit", "kind" : "def"}, {"label" : "warnOnError", "tail" : ": BiConsumer[AsyncResultSet, Throwable]", "member" : "org.apache.spark.metrics.CassandraSink.warnOnError", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#warnOnError:java.util.function.BiConsumer[com.khulnasoft.oss.driver.api.core.cql.AsyncResultSet,Throwable]", "kind" : "val"}, {"label" : "run", "tail" : "(): Unit", "member" : "org.apache.spark.metrics.CassandraSink.run", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#run():Unit", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.metrics.CassandraSink.stop", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#stop():Unit", "kind" : "def"}, {"label" : "start", "tail" : "(): Unit", "member" : "org.apache.spark.metrics.CassandraSink.start", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#start():Unit", "kind" : "def"}, {"label" : "executor", "tail" : ": ScheduledExecutorService", "member" : "org.apache.spark.metrics.CassandraSink.executor", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#executor:java.util.concurrent.ScheduledExecutorService", "kind" : "val"}, {"label" : "refreshRate", "tail" : ": Long", "member" : "org.apache.spark.metrics.CassandraSink.refreshRate", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#refreshRate:Long", "kind" : "val"}, {"label" : "ttl", "tail" : ": Int", "member" : "org.apache.spark.metrics.CassandraSink.ttl", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#ttl:Int", "kind" : "val"}, {"member" : "org.apache.spark.metrics.CassandraSink#<init>", "error" : "unsupported entity"}, {"label" : "registry", "tail" : ": MetricRegistry", "member" : "org.apache.spark.metrics.CassandraSink.registry", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#registry:com.codahale.metrics.MetricRegistry", "kind" : "val"}, {"label" : "properties", "tail" : ": Properties", "member" : "org.apache.spark.metrics.CassandraSink.properties", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#properties:java.util.Properties", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/CassandraSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Writer", "tail" : "", "member" : "org.apache.spark.metrics.CassandraSink.Writer", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#WriterextendsAnyRef", "kind" : "class"}, {"label" : "Fields", "tail" : "", "member" : "org.apache.spark.metrics.CassandraSink.Fields", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#Fields", "kind" : "object"}, {"label" : "DSE_PERF_KEYSPACE", "tail" : ": String", "member" : "org.apache.spark.metrics.CassandraSink.DSE_PERF_KEYSPACE", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#DSE_PERF_KEYSPACE:String", "kind" : "val"}, {"label" : "TableName", "tail" : ": String", "member" : "org.apache.spark.metrics.CassandraSink.TableName", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#TableName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/CassandraSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/metrics\/CassandraSink.html", "kind" : "class"}, {"name" : "org.apache.spark.metrics.CCSTimer", "members_trait" : [{"label" : "stopTimer", "tail" : "(): Long", "member" : "org.apache.spark.metrics.CCSTimer.stopTimer", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#stopTimer():Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "timer", "tail" : ": Context", "member" : "org.apache.spark.metrics.CCSTimer.timer", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#timer:com.codahale.metrics.Timer.Context", "kind" : "abstract val"}, {"label" : "source", "tail" : "(): CassandraConnectorSource", "member" : "org.apache.spark.metrics.CCSTimer.source", "link" : "org\/apache\/spark\/metrics\/CCSTimer.html#source:org.apache.spark.metrics.CassandraConnectorSource", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/metrics\/CCSTimer.html", "kind" : "trait"}, {"name" : "org.apache.spark.metrics.InputMetricsUpdater", "members_trait" : [{"label" : "updateMetrics", "tail" : "(row: Row): Row", "member" : "org.apache.spark.metrics.InputMetricsUpdater.updateMetrics", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#updateMetrics(row:com.khulnasoft.oss.driver.api.core.cql.Row):com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "finish", "tail" : "(): Long", "member" : "org.apache.spark.metrics.MetricsUpdater.finish", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html#finish():Long", "kind" : "abstract def"}], "shortDescription" : "A trait that provides a method to update read metrics which are collected for connector related tasks.", "object" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html", "members_object" : [{"label" : "apply", "tail" : "(taskContext: TaskContext, readConf: ReadConf, interval: FiniteDuration): InputMetricsUpdater", "member" : "org.apache.spark.metrics.InputMetricsUpdater.apply", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#apply(taskContext:org.apache.spark.TaskContext,readConf:com.khulnasoft.spark.connector.rdd.ReadConf,interval:scala.concurrent.duration.FiniteDuration):org.apache.spark.metrics.InputMetricsUpdater", "kind" : "def"}, {"label" : "DefaultInterval", "tail" : ": FiniteDuration", "member" : "org.apache.spark.metrics.InputMetricsUpdater.DefaultInterval", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#DefaultInterval:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/InputMetricsUpdater$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/metrics\/InputMetricsUpdater.html", "kind" : "trait"}, {"name" : "org.apache.spark.metrics.MetricsUpdater", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "finish", "tail" : "(): Long", "member" : "org.apache.spark.metrics.MetricsUpdater.finish", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater.html#finish():Long", "kind" : "abstract def"}], "shortDescription" : "The base trait for metrics updaters implementations.", "object" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html", "members_object" : [{"label" : "getSource", "tail" : "(taskContext: TaskContext): Option[CassandraConnectorSource]", "member" : "org.apache.spark.metrics.MetricsUpdater.getSource", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#getSource(taskContext:org.apache.spark.TaskContext):Option[org.apache.spark.metrics.CassandraConnectorSource]", "kind" : "def"}, {"label" : "cassandraConnectorSourceName", "tail" : ": String", "member" : "org.apache.spark.metrics.MetricsUpdater.cassandraConnectorSourceName", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#cassandraConnectorSourceName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/MetricsUpdater$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/metrics\/MetricsUpdater.html", "kind" : "trait"}, {"name" : "org.apache.spark.metrics.OutputMetricsUpdater", "members_trait" : [{"label" : "batchFinished", "tail" : "(success: Boolean, stmt: RichStatement, submissionTimestamp: Long, executionTimestamp: Long): Unit", "member" : "org.apache.spark.metrics.OutputMetricsUpdater.batchFinished", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#batchFinished(success:Boolean,stmt:com.khulnasoft.spark.connector.writer.RichStatement,submissionTimestamp:Long,executionTimestamp:Long):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "finish", "tail" : "(): Long", "member" : "org.apache.spark.metrics.MetricsUpdater.finish", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html#finish():Long", "kind" : "abstract def"}], "shortDescription" : "A trait that provides a method to update write metrics which are collected for connector related tasks.", "object" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html", "members_object" : [{"label" : "apply", "tail" : "(taskContext: TaskContext, writeConf: WriteConf): OutputMetricsUpdater", "member" : "org.apache.spark.metrics.OutputMetricsUpdater.apply", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#apply(taskContext:org.apache.spark.TaskContext,writeConf:com.khulnasoft.spark.connector.writer.WriteConf):org.apache.spark.metrics.OutputMetricsUpdater", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/metrics\/OutputMetricsUpdater.html", "kind" : "trait"}, {"name" : "org.apache.spark.metrics.SimpleTimer", "members_trait" : [{"label" : "stopTimer", "tail" : "(): Long", "member" : "org.apache.spark.metrics.SimpleTimer.stopTimer", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#stopTimer():Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/SimpleTimer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/metrics\/SimpleTimer.html", "kind" : "trait"}, {"name" : "org.apache.spark.metrics.Timer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/Timer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/Timer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/Timer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/Timer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/Timer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/Timer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/Timer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/Timer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/Timer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/Timer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/Timer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/Timer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/Timer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/Timer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/Timer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/Timer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/Timer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/Timer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/Timer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "stopTimer", "tail" : "(): Long", "member" : "org.apache.spark.metrics.Timer.stopTimer", "link" : "org\/apache\/spark\/metrics\/Timer.html#stopTimer():Long", "kind" : "abstract def"}], "shortDescription" : "Timer mixin allows to measure the time of a task - or, in other words - the time from creating aninstance to calling com.codahale.metrics.Timer.Context.stop method.", "trait" : "org\/apache\/spark\/metrics\/Timer.html", "kind" : "trait"}], "com.khulnasoft.spark.connector.types" : [{"name" : "com.khulnasoft.spark.connector.types.ColumnTypeConf", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html", "members_object" : [{"label" : "deprecatedCustomDriverTypeParam", "tail" : ": DeprecatedConfigParameter[Nothing]", "member" : "com.khulnasoft.spark.connector.types.ColumnTypeConf.deprecatedCustomDriverTypeParam", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#deprecatedCustomDriverTypeParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Nothing]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.types.ColumnTypeConf.ReferenceSection", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.khulnasoft.spark.connector.types.ColumnTypeConf#<init>", "error" : "unsupported entity"}, {"label" : "customFromDriver", "tail" : ": Option[String]", "member" : "com.khulnasoft.spark.connector.types.ColumnTypeConf.customFromDriver", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#customFromDriver:Option[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/types\/ColumnTypeConf.html", "kind" : "case class"}], "com.khulnasoft.spark.connector.rdd" : [{"name" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD", "shortDescription" : "A RDD which pulls from provided separate CassandraTableScanRDDs which share partition keys type andkeyspaces.", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html", "members_class" : [{"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[Seq[Seq[T]]]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[Seq[Seq[T]]]", "kind" : "def"}, {"label" : "tokenExtractor", "tail" : "(row: Row): Token", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.tokenExtractor", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#tokenExtractor(row:com.khulnasoft.oss.driver.api.core.cql.Row):com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "def"}, {"label" : "isValidMergeJoin", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.isValidMergeJoin", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#isValidMergeJoin():Boolean", "kind" : "def"}, {"label" : "checkValidMergeJoin", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.checkValidMergeJoin", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#checkValidMergeJoin():Unit", "kind" : "def"}, {"label" : "getPartitionKey", "tail" : "(connector: CassandraConnector, keyspaceName: String, tableName: String): Seq[ColumnDef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.getPartitionKey", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getPartitionKey(connector:com.khulnasoft.spark.connector.cql.CassandraConnector,keyspaceName:String,tableName:String):Seq[com.khulnasoft.spark.connector.cql.ColumnDef]", "kind" : "def"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "lazy val"}, {"member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ K): RDD[(K, Seq[Seq[T]])]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[Seq[Seq[T]]]): Seq[Seq[T]]", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[Seq[Seq[T]]]): Seq[Seq[T]]", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[Seq[Seq[T]]]): Array[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[Seq[Seq[T]]]): Array[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Seq[Seq[T]]", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(Seq[Seq[T]], Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(Seq[Seq[T]], Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[Seq[Seq[T]]]): PartialResult[Map[Seq[Seq[T]], BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[Seq[Seq[T]]]): Map[Seq[Seq[T]], Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, Seq[Seq[T]]) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, Seq[Seq[T]]) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, Seq[Seq[T]]) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: Seq[Seq[T]])(op: (Seq[Seq[T]], Seq[Seq[T]]) ⇒ Seq[Seq[T]]): Seq[Seq[T]]", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (Seq[Seq[T]], Seq[Seq[T]]) ⇒ Seq[Seq[T]], depth: Int): Seq[Seq[T]]", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (Seq[Seq[T]], Seq[Seq[T]]) ⇒ Seq[Seq[T]]): Seq[Seq[T]]", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Seq[Seq[T]]], p: Partitioner)(ord: Ordering[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Seq[Seq[T]]], numPartitions: Int): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[Seq[Seq[T]], U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[Seq[Seq[T]]]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Seq[Seq[T]]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[Seq[Seq[T]]], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[Seq[Seq[T]]], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[Seq[Seq[T]]], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[Seq[Seq[T]]], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[Seq[Seq[T]]], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[Seq[Seq[T]]], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(Seq[Seq[T]], U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[Seq[Seq[T]]], evaluatorFactory: PartitionEvaluatorFactory[Seq[Seq[T]], U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[Seq[Seq[T]], U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[Seq[Seq[T]]]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[Seq[Seq[T]]]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (Seq[Seq[T]], (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[Seq[Seq[T]]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[Seq[Seq[T]]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[Seq[Seq[T]]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(Seq[Seq[T]], U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[Seq[Seq[T]]]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Seq[Seq[T]]], numPartitions: Int): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Seq[Seq[T]]], partitioner: Partitioner)(ord: Ordering[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[Seq[Seq[T]]]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[Seq[Seq[T]]]): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (Seq[Seq[T]]) ⇒ Boolean): RDD[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Seq[Seq[T]]) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Seq[Seq[T]]) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[Seq[Seq[T]]]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraCoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "TokenColumn", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraCoGroupedRDD.TokenColumn", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#TokenColumn:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraCoGroupedRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD", "shortDescription" : "An RDD that will do a selecting join between left RDD and the specifiedCassandra Table This will perform individual selects to retrieve the rows from Cassandra and will takeadvantage of RDDs that have been partitioned with thecom.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner", "members_class" : [{"label" : "on", "tail" : "(joinColumns: ColumnSelector): CassandraJoinRDD[L, R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.on", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#on(joinColumns:com.khulnasoft.spark.connector.ColumnSelector):com.khulnasoft.spark.connector.rdd.CassandraJoinRDD[L,R]", "kind" : "def"}, {"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "copy", "tail" : "(columnNames: ColumnSelector, where: CqlWhereClause, limit: Option[CassandraLimit], clusteringOrder: Option[ClusteringOrder], readConf: ReadConf, connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.copy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#copy(columnNames:com.khulnasoft.spark.connector.ColumnSelector,where:com.khulnasoft.spark.connector.rdd.CqlWhereClause,limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit],clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder],readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraJoinRDD.this.Self", "kind" : "def"}, {"label" : "rowReader", "tail" : ": RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "lazy val"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#classTag:scala.reflect.ClassTag[R]", "kind" : "val"}, {"label" : "Self", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.Self", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#Self=com.khulnasoft.spark.connector.rdd.CassandraJoinRDD[L,R]", "kind" : "type"}, {"member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD#<init>", "error" : "unsupported entity"}, {"label" : "rowReaderFactory", "tail" : ": RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.rowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit val"}, {"label" : "rowWriterFactory", "tail" : ": RowWriterFactory[L]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.rowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[L]", "kind" : "implicit val"}, {"label" : "rightClassTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.rightClassTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#rightClassTag:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "leftClassTag", "tail" : ": ClassTag[L]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.leftClassTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#leftClassTag:scala.reflect.ClassTag[L]", "kind" : "implicit val"}, {"label" : "manualRowWriter", "tail" : ": Option[RowWriter[L]]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.manualRowWriter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#manualRowWriter:Option[com.khulnasoft.spark.connector.writer.RowWriter[L]]", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.readConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "clusteringOrder", "tail" : ": Option[ClusteringOrder]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder]", "kind" : "val"}, {"label" : "limit", "tail" : ": Option[CassandraLimit]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]", "kind" : "val"}, {"label" : "where", "tail" : ": CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#where:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "joinColumns", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.joinColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#joinColumns:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "columnNames", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.tableName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#keyspaceName:String", "kind" : "val"}, {"label" : "left", "tail" : ": RDD[L]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraJoinRDD.left", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#left:org.apache.spark.rdd.RDD[L]", "kind" : "val"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): EmptyCassandraRDD[(L, R)]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#toEmptyCassandraRDD:com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[(L,R)]", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[(L, R)]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(L,R)]", "kind" : "def"}, {"label" : "checkValidJoin", "tail" : "(): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.checkValidJoin", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#checkValidJoin():Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "rowWriter", "tail" : ": RowWriter[L]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#rowWriter:com.khulnasoft.spark.connector.writer.RowWriter[L]", "kind" : "lazy val"}, {"label" : "joinColumnNames", "tail" : ": Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.joinColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#joinColumnNames:Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "maybeRateLimit", "tail" : ": (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#maybeRateLimit:com.khulnasoft.oss.driver.api.core.cql.Row=>com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "val"}, {"label" : "requestsPerSecondRateLimiter", "tail" : ": RateLimiter", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.requestsPerSecondRateLimiter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#requestsPerSecondRateLimiter:com.khulnasoft.spark.connector.writer.RateLimiter", "kind" : "val"}, {"label" : "verify", "tail" : "(): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.verify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#verify():com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "def"}, {"label" : "cassandraPartitionerClassName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.cassandraPartitionerClassName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#cassandraPartitionerClassName:String", "kind" : "lazy val"}, {"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#selectedColumnRefs:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "lazy val"}, {"label" : "consistencyLevel", "tail" : "(): ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "def"}, {"label" : "fetchSize", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.fetchSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#fetchSize:Int", "kind" : "def"}, {"label" : "splitSize", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#splitSize:Long", "kind" : "def"}, {"label" : "splitCount", "tail" : "(): Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#splitCount:Option[Int]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10], arg12: TypeConverter[A11]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$81:scala.reflect.ClassTag[B],implicitevidence$82:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$83:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$84:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$85:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$86:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$87:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$88:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$89:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$90:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$91:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$92:com.khulnasoft.spark.connector.types.TypeConverter[A10],implicitevidence$93:com.khulnasoft.spark.connector.types.TypeConverter[A11]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$69:scala.reflect.ClassTag[B],implicitevidence$70:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$71:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$72:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$73:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$74:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$75:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$76:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$77:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$78:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$79:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$80:com.khulnasoft.spark.connector.types.TypeConverter[A10]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$58:scala.reflect.ClassTag[B],implicitevidence$59:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$60:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$61:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$62:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$63:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$64:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$65:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$66:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$67:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$68:com.khulnasoft.spark.connector.types.TypeConverter[A9]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$48:scala.reflect.ClassTag[B],implicitevidence$49:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$50:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$51:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$52:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$53:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$54:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$55:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$56:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$57:com.khulnasoft.spark.connector.types.TypeConverter[A8]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$39:scala.reflect.ClassTag[B],implicitevidence$40:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$41:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$42:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$43:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$44:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$45:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$46:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$47:com.khulnasoft.spark.connector.types.TypeConverter[A7]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$31:scala.reflect.ClassTag[B],implicitevidence$32:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$33:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$34:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$35:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$36:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$37:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$38:com.khulnasoft.spark.connector.types.TypeConverter[A6]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$26:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$27:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$28:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$29:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$30:com.khulnasoft.spark.connector.types.TypeConverter[A5]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3,A4](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$20:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$21:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$22:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$23:com.khulnasoft.spark.connector.types.TypeConverter[A4]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2,A3](f:(A0,A1,A2,A3)=>B)(implicitevidence$13:scala.reflect.ClassTag[B],implicitevidence$14:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$15:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$16:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$17:com.khulnasoft.spark.connector.types.TypeConverter[A3]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1,A2](f:(A0,A1,A2)=>B)(implicitevidence$9:scala.reflect.ClassTag[B],implicitevidence$10:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$11:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$12:com.khulnasoft.spark.connector.types.TypeConverter[A2]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0,A1](f:(A0,A1)=>B)(implicitevidence$6:scala.reflect.ClassTag[B],implicitevidence$7:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$8:com.khulnasoft.spark.connector.types.TypeConverter[A1]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#as[B,A0](f:A0=>B)(implicitevidence$4:scala.reflect.ClassTag[B],implicitevidence$5:com.khulnasoft.spark.connector.types.TypeConverter[A0]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "convertTo", "tail" : "(arg0: ClassTag[B], arg1: RowReaderFactory[B]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.convertTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#convertTo[B](implicitevidence$2:scala.reflect.ClassTag[B],implicitevidence$3:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[B]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#selectedColumnNames:Seq[String]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(L, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#take(num:Int):Array[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#withDescOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#withAscOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "clusteringOrder", "tail" : "(order: ClusteringOrder): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#clusteringOrder(order:com.khulnasoft.spark.connector.rdd.ClusteringOrder):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#perPartitionLimit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "limit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#limit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "select", "tail" : "(columns: ColumnRef*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "where", "tail" : "(cql: String, values: Any*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#where(cql:String,values:Any*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(readConf: ReadConf): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#withReadConf(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(L, R)]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((L, R)) ⇒ K): RDD[(K, (L, R))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(L, R)]): (L, R)", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(L, R)]): (L, R)", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(L, R)]): Array[(L, R)]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(L, R)]): Array[(L, R)]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (L, R)", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#first():T", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((L, R), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((L, R), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(L, R)]): PartialResult[Map[(L, R), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(L, R)]): Map[(L, R), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, (L, R)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (L, R)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (L, R)) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (L, R))(op: ((L, R), (L, R)) ⇒ (L, R)): (L, R)", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((L, R), (L, R)) ⇒ (L, R), depth: Int): (L, R)", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((L, R), (L, R)) ⇒ (L, R)): (L, R)", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(L, R)], p: Partitioner)(ord: Ordering[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(L, R)], numPartitions: Int): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(L, R), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(L, R)]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(L, R)]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(L, R)]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((L, R)) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(L, R)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(L, R)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(L, R)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(L, R)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(L, R)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(L, R)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((L, R), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[(L, R)], evaluatorFactory: PartitionEvaluatorFactory[(L, R), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[(L, R), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(L, R)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(L, R)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((L, R), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((L, R)) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(L, R)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((L, R)) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(L, R)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((L, R)) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(L, R)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((L, R), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(L, R)]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(L, R)], numPartitions: Int): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(L, R)], partitioner: Partitioner)(ord: Ordering[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((L, R)) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(L, R)]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(L, R)]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(L, R)]): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((L, R)) ⇒ Boolean): RDD[(L, R)]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((L, R)) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((L, R)) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(L, R)]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraJoinRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD", "shortDescription" : "An RDD that will do a selecting join between left RDD and the specifiedCassandra Table This will perform individual selects to retrieve the rows from Cassandra and will takeadvantage of RDDs that have been partitioned with thecom.khulnasoft.spark.connector.rdd.partitioner.ReplicaPartitioner", "members_class" : [{"label" : "on", "tail" : "(joinColumns: ColumnSelector): CassandraLeftJoinRDD[L, R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.on", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#on(joinColumns:com.khulnasoft.spark.connector.ColumnSelector):com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD[L,R]", "kind" : "def"}, {"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "copy", "tail" : "(columnNames: ColumnSelector, where: CqlWhereClause, limit: Option[CassandraLimit], clusteringOrder: Option[ClusteringOrder], readConf: ReadConf, connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.copy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#copy(columnNames:com.khulnasoft.spark.connector.ColumnSelector,where:com.khulnasoft.spark.connector.rdd.CqlWhereClause,limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit],clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder],readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraLeftJoinRDD.this.Self", "kind" : "def"}, {"label" : "rowReader", "tail" : ": RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "lazy val"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#classTag:scala.reflect.ClassTag[R]", "kind" : "val"}, {"label" : "Self", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.Self", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#Self=com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD[L,R]", "kind" : "type"}, {"member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD#<init>", "error" : "unsupported entity"}, {"label" : "rowReaderFactory", "tail" : ": RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.rowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit val"}, {"label" : "rowWriterFactory", "tail" : ": RowWriterFactory[L]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.rowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#rowWriterFactory:com.khulnasoft.spark.connector.writer.RowWriterFactory[L]", "kind" : "implicit val"}, {"label" : "rightClassTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.rightClassTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#rightClassTag:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "leftClassTag", "tail" : ": ClassTag[L]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.leftClassTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#leftClassTag:scala.reflect.ClassTag[L]", "kind" : "implicit val"}, {"label" : "manualRowWriter", "tail" : ": Option[RowWriter[L]]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.manualRowWriter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#manualRowWriter:Option[com.khulnasoft.spark.connector.writer.RowWriter[L]]", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.readConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "clusteringOrder", "tail" : ": Option[ClusteringOrder]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder]", "kind" : "val"}, {"label" : "limit", "tail" : ": Option[CassandraLimit]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]", "kind" : "val"}, {"label" : "where", "tail" : ": CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#where:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "joinColumns", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.joinColumns", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#joinColumns:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "columnNames", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.tableName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#keyspaceName:String", "kind" : "val"}, {"label" : "left", "tail" : ": RDD[L]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD.left", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#left:org.apache.spark.rdd.RDD[L]", "kind" : "val"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): EmptyCassandraRDD[(L, Option[R])]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#toEmptyCassandraRDD:com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[(L,R)]", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[(L, Option[R])]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(L,R)]", "kind" : "def"}, {"label" : "checkValidJoin", "tail" : "(): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.checkValidJoin", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#checkValidJoin():Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "rowWriter", "tail" : ": RowWriter[L]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#rowWriter:com.khulnasoft.spark.connector.writer.RowWriter[L]", "kind" : "lazy val"}, {"label" : "joinColumnNames", "tail" : ": Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.joinColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#joinColumnNames:Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "maybeRateLimit", "tail" : ": (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#maybeRateLimit:com.khulnasoft.oss.driver.api.core.cql.Row=>com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "val"}, {"label" : "requestsPerSecondRateLimiter", "tail" : ": RateLimiter", "member" : "com.khulnasoft.spark.connector.rdd.AbstractCassandraJoin.requestsPerSecondRateLimiter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#requestsPerSecondRateLimiter:com.khulnasoft.spark.connector.writer.RateLimiter", "kind" : "val"}, {"label" : "verify", "tail" : "(): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.verify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#verify():com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "def"}, {"label" : "cassandraPartitionerClassName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.cassandraPartitionerClassName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#cassandraPartitionerClassName:String", "kind" : "lazy val"}, {"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#selectedColumnRefs:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "lazy val"}, {"label" : "consistencyLevel", "tail" : "(): ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "def"}, {"label" : "fetchSize", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.fetchSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#fetchSize:Int", "kind" : "def"}, {"label" : "splitSize", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#splitSize:Long", "kind" : "def"}, {"label" : "splitCount", "tail" : "(): Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#splitCount:Option[Int]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10], arg12: TypeConverter[A11]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$81:scala.reflect.ClassTag[B],implicitevidence$82:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$83:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$84:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$85:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$86:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$87:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$88:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$89:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$90:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$91:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$92:com.khulnasoft.spark.connector.types.TypeConverter[A10],implicitevidence$93:com.khulnasoft.spark.connector.types.TypeConverter[A11]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$69:scala.reflect.ClassTag[B],implicitevidence$70:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$71:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$72:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$73:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$74:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$75:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$76:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$77:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$78:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$79:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$80:com.khulnasoft.spark.connector.types.TypeConverter[A10]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$58:scala.reflect.ClassTag[B],implicitevidence$59:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$60:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$61:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$62:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$63:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$64:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$65:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$66:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$67:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$68:com.khulnasoft.spark.connector.types.TypeConverter[A9]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$48:scala.reflect.ClassTag[B],implicitevidence$49:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$50:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$51:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$52:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$53:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$54:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$55:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$56:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$57:com.khulnasoft.spark.connector.types.TypeConverter[A8]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$39:scala.reflect.ClassTag[B],implicitevidence$40:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$41:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$42:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$43:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$44:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$45:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$46:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$47:com.khulnasoft.spark.connector.types.TypeConverter[A7]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$31:scala.reflect.ClassTag[B],implicitevidence$32:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$33:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$34:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$35:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$36:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$37:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$38:com.khulnasoft.spark.connector.types.TypeConverter[A6]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4,A5](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$26:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$27:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$28:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$29:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$30:com.khulnasoft.spark.connector.types.TypeConverter[A5]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3,A4](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$20:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$21:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$22:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$23:com.khulnasoft.spark.connector.types.TypeConverter[A4]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2,A3](f:(A0,A1,A2,A3)=>B)(implicitevidence$13:scala.reflect.ClassTag[B],implicitevidence$14:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$15:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$16:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$17:com.khulnasoft.spark.connector.types.TypeConverter[A3]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1,A2](f:(A0,A1,A2)=>B)(implicitevidence$9:scala.reflect.ClassTag[B],implicitevidence$10:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$11:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$12:com.khulnasoft.spark.connector.types.TypeConverter[A2]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0,A1](f:(A0,A1)=>B)(implicitevidence$6:scala.reflect.ClassTag[B],implicitevidence$7:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$8:com.khulnasoft.spark.connector.types.TypeConverter[A1]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#as[B,A0](f:A0=>B)(implicitevidence$4:scala.reflect.ClassTag[B],implicitevidence$5:com.khulnasoft.spark.connector.types.TypeConverter[A0]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "convertTo", "tail" : "(arg0: ClassTag[B], arg1: RowReaderFactory[B]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.convertTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#convertTo[B](implicitevidence$2:scala.reflect.ClassTag[B],implicitevidence$3:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[B]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#selectedColumnNames:Seq[String]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(L, Option[R])]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#take(num:Int):Array[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#withDescOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#withAscOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "clusteringOrder", "tail" : "(order: ClusteringOrder): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#clusteringOrder(order:com.khulnasoft.spark.connector.rdd.ClusteringOrder):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#perPartitionLimit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "limit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#limit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "select", "tail" : "(columns: ColumnRef*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "where", "tail" : "(cql: String, values: Any*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#where(cql:String,values:Any*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(readConf: ReadConf): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#withReadConf(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((L, Option[R])) ⇒ K): RDD[(K, (L, Option[R]))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(L, Option[R])]): (L, Option[R])", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(L, Option[R])]): (L, Option[R])", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(L, Option[R])]): Array[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(L, Option[R])]): Array[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (L, Option[R])", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#first():T", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((L, Option[R]), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((L, Option[R]), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(L, Option[R])]): PartialResult[Map[(L, Option[R]), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(L, Option[R])]): Map[(L, Option[R]), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, (L, Option[R])) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (L, Option[R])) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (L, Option[R])) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (L, Option[R]))(op: ((L, Option[R]), (L, Option[R])) ⇒ (L, Option[R])): (L, Option[R])", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((L, Option[R]), (L, Option[R])) ⇒ (L, Option[R]), depth: Int): (L, Option[R])", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((L, Option[R]), (L, Option[R])) ⇒ (L, Option[R])): (L, Option[R])", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(L, Option[R])], p: Partitioner)(ord: Ordering[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(L, Option[R])], numPartitions: Int): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(L, Option[R]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(L, Option[R])]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((L, Option[R])) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(L, Option[R])], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(L, Option[R])], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(L, Option[R])], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(L, Option[R])], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(L, Option[R])], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(L, Option[R])], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((L, Option[R]), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[(L, Option[R])], evaluatorFactory: PartitionEvaluatorFactory[(L, Option[R]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[(L, Option[R]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(L, Option[R])]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(L, Option[R])]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((L, Option[R]), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((L, Option[R])) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(L, Option[R])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((L, Option[R])) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(L, Option[R])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((L, Option[R])) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(L, Option[R])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((L, Option[R]), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(L, Option[R])]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(L, Option[R])], numPartitions: Int): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(L, Option[R])], partitioner: Partitioner)(ord: Ordering[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((L, Option[R])) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(L, Option[R])]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(L, Option[R])]): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((L, Option[R])) ⇒ Boolean): RDD[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((L, Option[R])) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((L, Option[R])) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(L, Option[R])]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraLeftJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLeftJoinRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraLimit", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html", "members_object" : [{"label" : "limitForIterator", "tail" : "(limit: Option[CassandraLimit]): Option[Long]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLimit.limitForIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#limitForIterator(limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]):Option[Long]", "kind" : "def"}, {"label" : "limitToClause", "tail" : "(limit: Option[CassandraLimit]): String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraLimit.limitToClause", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#limitToClause(limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraLimit.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD", "shortDescription" : "A RDD which pulls from two separate CassandraTableScanRDDs which share partition keys andkeyspaces.", "members_class" : [{"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[(Seq[L], Seq[R])]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(Seq[L],Seq[R])]", "kind" : "def"}, {"label" : "tokenExtractor", "tail" : "(row: Row): Token", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.tokenExtractor", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#tokenExtractor(row:com.khulnasoft.oss.driver.api.core.cql.Row):com.khulnasoft.oss.driver.api.core.metadata.token.Token", "kind" : "def"}, {"label" : "TokenColumn", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.TokenColumn", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#TokenColumn:String", "kind" : "val"}, {"label" : "checkValidMergeJoin", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.checkValidMergeJoin", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#checkValidMergeJoin():Unit", "kind" : "def"}, {"label" : "getPartitionKey", "tail" : "(connector: CassandraConnector, keyspaceName: String, tableName: String): Seq[ColumnDef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.getPartitionKey", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getPartitionKey(connector:com.khulnasoft.spark.connector.cql.CassandraConnector,keyspaceName:String,tableName:String):Seq[com.khulnasoft.spark.connector.cql.ColumnDef]", "kind" : "def"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.rdd.CassandraMergeJoinRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ K): RDD[(K, (Seq[L], Seq[R]))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(Seq[L], Seq[R])]): (Seq[L], Seq[R])", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(Seq[L], Seq[R])]): (Seq[L], Seq[R])", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(Seq[L], Seq[R])]): Array[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(Seq[L], Seq[R])]): Array[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (Seq[L], Seq[R])", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((Seq[L], Seq[R]), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((Seq[L], Seq[R]), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(Seq[L], Seq[R])]): PartialResult[Map[(Seq[L], Seq[R]), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(Seq[L], Seq[R])]): Map[(Seq[L], Seq[R]), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, (Seq[L], Seq[R])) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (Seq[L], Seq[R])) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (Seq[L], Seq[R])) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (Seq[L], Seq[R]))(op: ((Seq[L], Seq[R]), (Seq[L], Seq[R])) ⇒ (Seq[L], Seq[R])): (Seq[L], Seq[R])", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((Seq[L], Seq[R]), (Seq[L], Seq[R])) ⇒ (Seq[L], Seq[R]), depth: Int): (Seq[L], Seq[R])", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((Seq[L], Seq[R]), (Seq[L], Seq[R])) ⇒ (Seq[L], Seq[R])): (Seq[L], Seq[R])", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(Seq[L], Seq[R])], p: Partitioner)(ord: Ordering[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(Seq[L], Seq[R])], numPartitions: Int): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(Seq[L], Seq[R]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(Seq[L], Seq[R])]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(Seq[L], Seq[R])], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(Seq[L], Seq[R])], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(Seq[L], Seq[R])], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(Seq[L], Seq[R])], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(Seq[L], Seq[R])], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(Seq[L], Seq[R])], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((Seq[L], Seq[R]), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[(Seq[L], Seq[R])], evaluatorFactory: PartitionEvaluatorFactory[(Seq[L], Seq[R]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[(Seq[L], Seq[R]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(Seq[L], Seq[R])]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(Seq[L], Seq[R])]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((Seq[L], Seq[R]), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(Seq[L], Seq[R])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(Seq[L], Seq[R])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(Seq[L], Seq[R])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((Seq[L], Seq[R]), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(Seq[L], Seq[R])]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(Seq[L], Seq[R])], numPartitions: Int): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(Seq[L], Seq[R])], partitioner: Partitioner)(ord: Ordering[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(Seq[L], Seq[R])]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(Seq[L], Seq[R])]): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ Boolean): RDD[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((Seq[L], Seq[R])) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(Seq[L], Seq[R])]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraMergeJoinRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraMergeJoinRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraPartitionLimit", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.rdd.CassandraPartitionLimit#<init>", "error" : "unsupported entity"}, {"label" : "rowsNumber", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraPartitionLimit.rowsNumber", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#rowsNumber:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraPartitionLimit.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraRDD", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html", "members_class" : [{"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10], arg12: TypeConverter[A11]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$81:scala.reflect.ClassTag[B],implicitevidence$82:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$83:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$84:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$85:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$86:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$87:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$88:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$89:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$90:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$91:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$92:com.khulnasoft.spark.connector.types.TypeConverter[A10],implicitevidence$93:com.khulnasoft.spark.connector.types.TypeConverter[A11]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$69:scala.reflect.ClassTag[B],implicitevidence$70:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$71:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$72:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$73:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$74:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$75:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$76:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$77:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$78:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$79:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$80:com.khulnasoft.spark.connector.types.TypeConverter[A10]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$58:scala.reflect.ClassTag[B],implicitevidence$59:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$60:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$61:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$62:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$63:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$64:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$65:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$66:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$67:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$68:com.khulnasoft.spark.connector.types.TypeConverter[A9]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$48:scala.reflect.ClassTag[B],implicitevidence$49:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$50:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$51:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$52:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$53:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$54:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$55:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$56:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$57:com.khulnasoft.spark.connector.types.TypeConverter[A8]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$39:scala.reflect.ClassTag[B],implicitevidence$40:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$41:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$42:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$43:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$44:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$45:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$46:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$47:com.khulnasoft.spark.connector.types.TypeConverter[A7]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$31:scala.reflect.ClassTag[B],implicitevidence$32:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$33:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$34:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$35:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$36:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$37:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$38:com.khulnasoft.spark.connector.types.TypeConverter[A6]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$26:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$27:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$28:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$29:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$30:com.khulnasoft.spark.connector.types.TypeConverter[A5]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3,A4](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$20:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$21:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$22:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$23:com.khulnasoft.spark.connector.types.TypeConverter[A4]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2,A3](f:(A0,A1,A2,A3)=>B)(implicitevidence$13:scala.reflect.ClassTag[B],implicitevidence$14:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$15:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$16:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$17:com.khulnasoft.spark.connector.types.TypeConverter[A3]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1,A2](f:(A0,A1,A2)=>B)(implicitevidence$9:scala.reflect.ClassTag[B],implicitevidence$10:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$11:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$12:com.khulnasoft.spark.connector.types.TypeConverter[A2]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0,A1](f:(A0,A1)=>B)(implicitevidence$6:scala.reflect.ClassTag[B],implicitevidence$7:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$8:com.khulnasoft.spark.connector.types.TypeConverter[A1]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#as[B,A0](f:A0=>B)(implicitevidence$4:scala.reflect.ClassTag[B],implicitevidence$5:com.khulnasoft.spark.connector.types.TypeConverter[A0]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "convertTo", "tail" : "(arg0: ClassTag[B], arg1: RowReaderFactory[B]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.convertTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#convertTo[B](implicitevidence$2:scala.reflect.ClassTag[B],implicitevidence$3:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[B]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#selectedColumnNames:Seq[String]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#take(num:Int):Array[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#withDescOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#withAscOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "clusteringOrder", "tail" : "(order: ClusteringOrder): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#clusteringOrder(order:com.khulnasoft.spark.connector.rdd.ClusteringOrder):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#perPartitionLimit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "limit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#limit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "select", "tail" : "(columns: ColumnRef*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "where", "tail" : "(cql: String, values: Any*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#where(cql:String,values:Any*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(readConf: ReadConf): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#withReadConf(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):CassandraRDD.this.Self", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[R]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (R) ⇒ K): RDD[(K, R)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#first():T", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[R]): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[R]): Map[R, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(op: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (R, R) ⇒ R, depth: Int): R", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], p: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[R]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[R]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (R) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[R], evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (R, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[R]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], partitioner: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (R) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[R]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (R) ⇒ Boolean): RDD[R]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "selectedColumnRefs", "tail" : ": Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#selectedColumnRefs:Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "abstract val"}, {"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "abstract def"}, {"label" : "copy", "tail" : "(columnNames: ColumnSelector, where: CqlWhereClause, limit: Option[CassandraLimit], clusteringOrder: Option[ClusteringOrder], readConf: ReadConf, connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.copy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#copy(columnNames:com.khulnasoft.spark.connector.ColumnSelector,where:com.khulnasoft.spark.connector.rdd.CqlWhereClause,limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit],clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder],readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "abstract def"}, {"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#cassandraCount():Long", "kind" : "abstract def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): EmptyCassandraRDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#toEmptyCassandraRDD:com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[R]", "kind" : "abstract def"}, {"label" : "connector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "abstract def"}, {"label" : "clusteringOrder", "tail" : "(): Option[ClusteringOrder]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder]", "kind" : "abstract def"}, {"label" : "limit", "tail" : "(): Option[CassandraLimit]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]", "kind" : "abstract def"}, {"label" : "readConf", "tail" : "(): ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.readConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "abstract def"}, {"label" : "where", "tail" : "(): CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#where:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "abstract def"}, {"label" : "columnNames", "tail" : "(): ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "abstract def"}, {"label" : "tableName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.tableName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#tableName:String", "kind" : "abstract def"}, {"label" : "keyspaceName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#keyspaceName:String", "kind" : "abstract def"}, {"member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.Self", "error" : "unsupported entity"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "abstract def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(sc: SparkContext, keyspaceName: String, tableName: String)(keyCT: ClassTag[K], valueCT: ClassTag[V], rrf: RowReaderFactory[(K, V)]): CassandraRDD[(K, V)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.apply", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#apply[K,V](sc:org.apache.spark.SparkContext,keyspaceName:String,tableName:String)(implicitkeyCT:scala.reflect.ClassTag[K],implicitvalueCT:scala.reflect.ClassTag[V],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[(K,V)]):com.khulnasoft.spark.connector.rdd.CassandraRDD[(K,V)]", "kind" : "def"}, {"label" : "apply", "tail" : "(sc: SparkContext, keyspaceName: String, tableName: String)(ct: ClassTag[T], rrf: RowReaderFactory[T]): CassandraRDD[T]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.apply", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#apply[T](sc:org.apache.spark.SparkContext,keyspaceName:String,tableName:String)(implicitct:scala.reflect.ClassTag[T],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T]):com.khulnasoft.spark.connector.rdd.CassandraRDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider", "members_trait" : [{"label" : "verify", "tail" : "(): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.verify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#verify():com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "def"}, {"label" : "cassandraPartitionerClassName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.cassandraPartitionerClassName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#cassandraPartitionerClassName:String", "kind" : "lazy val"}, {"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#selectedColumnRefs:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "lazy val"}, {"label" : "rowReader", "tail" : ": RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "lazy val"}, {"label" : "consistencyLevel", "tail" : "(): ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "def"}, {"label" : "fetchSize", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.fetchSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#fetchSize:Int", "kind" : "def"}, {"label" : "splitSize", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#splitSize:Long", "kind" : "def"}, {"label" : "splitCount", "tail" : "(): Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#splitCount:Option[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.classTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#classTag:scala.reflect.ClassTag[R]", "kind" : "abstract val"}, {"label" : "rowReaderFactory", "tail" : ": RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.rowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "abstract val"}, {"label" : "readConf", "tail" : "(): ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.readConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "abstract def"}, {"label" : "columnNames", "tail" : "(): ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "abstract def"}, {"label" : "tableName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.tableName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#tableName:String", "kind" : "abstract def"}, {"label" : "keyspaceName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#keyspaceName:String", "kind" : "abstract def"}, {"label" : "connector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "abstract def"}], "shortDescription" : "Used to get a RowReader of type [R] for transforming the rows of a particular Cassandra table intoscala objects.", "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableRowReaderProvider.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD", "shortDescription" : "RDD representing a Table Scan of A Cassandra table.", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html", "members_class" : [{"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): EmptyCassandraRDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#toEmptyCassandraRDD:com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[R]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[R]", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[R]): RDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[R]):org.apache.spark.rdd.RDD[R]", "kind" : "def"}, {"label" : "partitionGenerator", "tail" : ": CassandraPartitionGenerator[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.partitionGenerator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#partitionGenerator:com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator[com.khulnasoft.spark.connector.datasource.ScanHelper.V,com.khulnasoft.spark.connector.datasource.ScanHelper.T]", "kind" : "lazy val"}, {"label" : "minimalSplitCount", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.minimalSplitCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#minimalSplitCount:Int", "kind" : "def"}, {"label" : "keyBy", "tail" : "()(classtag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#keyBy[K]()(implicitclasstag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(columns: ColumnRef*)(classtag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#keyBy[K](columns:com.khulnasoft.spark.connector.ColumnRef*)(implicitclasstag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(columns: ColumnSelector)(classtag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#keyBy[K](columns:com.khulnasoft.spark.connector.ColumnSelector)(implicitclasstag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"label" : "convertTo", "tail" : "(arg0: ClassTag[B], arg1: RowReaderFactory[B]): CassandraTableScanRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.convertTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#convertTo[B](implicitevidence$1:scala.reflect.ClassTag[B],implicitevidence$2:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[B]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[B]", "kind" : "def"}, {"label" : "copy", "tail" : "(columnNames: ColumnSelector, where: CqlWhereClause, limit: Option[CassandraLimit], clusteringOrder: Option[ClusteringOrder], readConf: ReadConf, connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.copy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#copy(columnNames:com.khulnasoft.spark.connector.ColumnSelector,where:com.khulnasoft.spark.connector.rdd.CqlWhereClause,limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit],clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder],readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraTableScanRDD.this.Self", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.Self", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#Self=com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[R]", "kind" : "type"}, {"label" : "rowReaderFactory", "tail" : ": RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.rowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit val"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#classTag:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.readConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "clusteringOrder", "tail" : ": Option[ClusteringOrder]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder]", "kind" : "val"}, {"label" : "limit", "tail" : ": Option[CassandraLimit]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]", "kind" : "val"}, {"label" : "where", "tail" : ": CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#where:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "columnNames", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.tableName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#keyspaceName:String", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "sc", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.sc", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#sc:org.apache.spark.SparkContext", "kind" : "val"}, {"label" : "verify", "tail" : "(): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.verify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#verify():com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "def"}, {"label" : "cassandraPartitionerClassName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.cassandraPartitionerClassName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#cassandraPartitionerClassName:String", "kind" : "lazy val"}, {"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#selectedColumnRefs:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "lazy val"}, {"label" : "rowReader", "tail" : ": RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "lazy val"}, {"label" : "consistencyLevel", "tail" : "(): ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "def"}, {"label" : "fetchSize", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.fetchSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#fetchSize:Int", "kind" : "def"}, {"label" : "splitSize", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitSize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#splitSize:Long", "kind" : "def"}, {"label" : "splitCount", "tail" : "(): Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#splitCount:Option[Int]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10], arg12: TypeConverter[A11]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$81:scala.reflect.ClassTag[B],implicitevidence$82:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$83:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$84:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$85:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$86:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$87:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$88:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$89:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$90:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$91:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$92:com.khulnasoft.spark.connector.types.TypeConverter[A10],implicitevidence$93:com.khulnasoft.spark.connector.types.TypeConverter[A11]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$69:scala.reflect.ClassTag[B],implicitevidence$70:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$71:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$72:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$73:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$74:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$75:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$76:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$77:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$78:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$79:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$80:com.khulnasoft.spark.connector.types.TypeConverter[A10]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$58:scala.reflect.ClassTag[B],implicitevidence$59:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$60:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$61:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$62:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$63:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$64:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$65:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$66:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$67:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$68:com.khulnasoft.spark.connector.types.TypeConverter[A9]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$48:scala.reflect.ClassTag[B],implicitevidence$49:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$50:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$51:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$52:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$53:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$54:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$55:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$56:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$57:com.khulnasoft.spark.connector.types.TypeConverter[A8]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$39:scala.reflect.ClassTag[B],implicitevidence$40:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$41:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$42:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$43:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$44:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$45:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$46:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$47:com.khulnasoft.spark.connector.types.TypeConverter[A7]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$31:scala.reflect.ClassTag[B],implicitevidence$32:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$33:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$34:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$35:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$36:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$37:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$38:com.khulnasoft.spark.connector.types.TypeConverter[A6]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4,A5](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$26:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$27:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$28:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$29:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$30:com.khulnasoft.spark.connector.types.TypeConverter[A5]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3,A4](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$20:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$21:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$22:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$23:com.khulnasoft.spark.connector.types.TypeConverter[A4]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2,A3](f:(A0,A1,A2,A3)=>B)(implicitevidence$13:scala.reflect.ClassTag[B],implicitevidence$14:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$15:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$16:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$17:com.khulnasoft.spark.connector.types.TypeConverter[A3]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1,A2](f:(A0,A1,A2)=>B)(implicitevidence$9:scala.reflect.ClassTag[B],implicitevidence$10:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$11:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$12:com.khulnasoft.spark.connector.types.TypeConverter[A2]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0,A1](f:(A0,A1)=>B)(implicitevidence$6:scala.reflect.ClassTag[B],implicitevidence$7:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$8:com.khulnasoft.spark.connector.types.TypeConverter[A1]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#as[B,A0](f:A0=>B)(implicitevidence$4:scala.reflect.ClassTag[B],implicitevidence$5:com.khulnasoft.spark.connector.types.TypeConverter[A0]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#selectedColumnNames:Seq[String]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#take(num:Int):Array[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#withDescOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#withAscOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "clusteringOrder", "tail" : "(order: ClusteringOrder): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#clusteringOrder(order:com.khulnasoft.spark.connector.rdd.ClusteringOrder):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#perPartitionLimit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "limit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#limit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "select", "tail" : "(columns: ColumnRef*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "where", "tail" : "(cql: String, values: Any*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#where(cql:String,values:Any*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(readConf: ReadConf): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#withReadConf(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[R]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (R) ⇒ K): RDD[(K, R)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#first():T", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[R]): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[R]): Map[R, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(op: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (R, R) ⇒ R, depth: Int): R", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], p: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[R]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[R]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (R) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[R], evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (R, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[R]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], partitioner: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (R) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[R]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (R) ⇒ Boolean): RDD[R]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraTableScanRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "countRDD", "tail" : "(rdd: CassandraTableScanRDD[R]): CassandraTableScanRDD[Long]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.countRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#countRDD[R](rdd:com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[R]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[Long]", "kind" : "def"}, {"label" : "apply", "tail" : "(sc: SparkContext, keyspaceName: String, tableName: String)(keyCT: ClassTag[K], valueCT: ClassTag[V], rrf: RowReaderFactory[(K, V)], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, V)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.apply", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#apply[K,V](sc:org.apache.spark.SparkContext,keyspaceName:String,tableName:String)(implicitkeyCT:scala.reflect.ClassTag[K],implicitvalueCT:scala.reflect.ClassTag[V],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[(K,V)],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,V)]", "kind" : "def"}, {"label" : "apply", "tail" : "(sc: SparkContext, keyspaceName: String, tableName: String)(arg0: ClassTag[T], arg1: RowReaderFactory[T]): CassandraTableScanRDD[T]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.apply", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#apply[T](sc:org.apache.spark.SparkContext,keyspaceName:String,tableName:String)(implicitevidence$3:scala.reflect.ClassTag[T],implicitevidence$4:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/CassandraTableScanRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.ClusteringOrder", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html", "members_object" : [{"label" : "Descending", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.ClusteringOrder.Descending", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#Descending", "kind" : "object"}, {"label" : "Ascending", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.ClusteringOrder.Ascending", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#Ascending", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/ClusteringOrder.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause", "shortDescription" : "Represents a logical conjunction of CQL predicates.", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html", "members_object" : [{"label" : "empty", "tail" : ": CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause.empty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#empty:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#toString():String", "kind" : "def"}, {"label" : "and", "tail" : "(other: CqlWhereClause): CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause.and", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#and(other:com.khulnasoft.spark.connector.rdd.CqlWhereClause):com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Seq[Any]", "member" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause.values", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#values:Seq[Any]", "kind" : "val"}, {"label" : "predicates", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CqlWhereClause.predicates", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#predicates:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/CqlWhereClause.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner", "shortDescription" : "A custom partitoner specifically for RDDs made for DseGraph.", "members_class" : [{"label" : "numPartitions", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner.numPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#numPartitions:Int", "kind" : "val"}, {"label" : "getPartition", "tail" : "(key: Any): Int", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner.getPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#getPartition(key:Any):Int", "kind" : "def"}, {"label" : "conf", "tail" : ": SparkConf", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner.conf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#conf:org.apache.spark.SparkConf", "kind" : "lazy val"}, {"label" : "LabelAccessor", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner.LabelAccessor", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#LabelAccessor:String", "kind" : "val"}, {"label" : "ITR", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner.ITR", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#ITR=com.khulnasoft.spark.connector.rdd.partitioner.TokenRangeWithPartitionIndex[V,T]", "kind" : "type"}, {"member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner#<init>", "error" : "unsupported entity"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphPartitioner.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "implicit val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphPartitioner.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.DseGraphUnionedRDD", "shortDescription" : "A Java Friendly api for DseGraphUnionedRDD to make it easier to callfrom VertexInputRDD", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html", "members_class" : [{"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphUnionedRDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.rdd.DseGraphUnionedRDD#<init>", "error" : "unsupported entity"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.UnionRDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(s: Partition): Seq[String]", "member" : "org.apache.spark.rdd.UnionRDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getPreferredLocations(s:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "compute", "tail" : "(s: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.UnionRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#compute(s:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.UnionRDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.UnionRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "rdds", "tail" : ": Seq[RDD[R]]", "member" : "org.apache.spark.rdd.UnionRDD.rdds", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#rdds:Seq[org.apache.spark.rdd.RDD[T]]", "kind" : "var"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[R]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (R) ⇒ K): RDD[(K, R)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[R]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[R]): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[R]): Map[R, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(op: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (R, R) ⇒ R, depth: Int): R", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], p: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[R]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[R]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (R) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[R], evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (R, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[R]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], partitioner: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (R) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[R]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (R) ⇒ Boolean): RDD[R]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): DseGraphUnionedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromJava", "tail" : "(sc: SparkContext, rdds: List[RDD[R]], keyspace: String, graphLabels: List[String])(arg0: ClassTag[R], connector: CassandraConnector): DseGraphUnionedRDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.DseGraphUnionedRDD.fromJava", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#fromJava[R](sc:org.apache.spark.SparkContext,rdds:java.util.List[org.apache.spark.rdd.RDD[R]],keyspace:String,graphLabels:java.util.List[String])(implicitevidence$1:scala.reflect.ClassTag[R],implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.rdd.DseGraphUnionedRDD[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/DseGraphUnionedRDD.html", "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD", "shortDescription" : "Represents a CassandraRDD with no rows.", "members_class" : [{"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): EmptyCassandraRDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#toEmptyCassandraRDD:com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[R]", "kind" : "def"}, {"label" : "connector", "tail" : "(): CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : ": Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#selectedColumnRefs:Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[R]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "cassandraCount", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#cassandraCount:Long", "kind" : "val"}, {"label" : "copy", "tail" : "(columnNames: ColumnSelector, where: CqlWhereClause, limit: Option[CassandraLimit], clusteringOrder: Option[ClusteringOrder], readConf: ReadConf, connector: CassandraConnector): EmptyCassandraRDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.copy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#copy(columnNames:com.khulnasoft.spark.connector.ColumnSelector,where:com.khulnasoft.spark.connector.rdd.CqlWhereClause,limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit],clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder],readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[R]", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.Self", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#Self=com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[R]", "kind" : "type"}, {"member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD#<init>", "error" : "unsupported entity"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.readConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "clusteringOrder", "tail" : ": Option[ClusteringOrder]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder]", "kind" : "val"}, {"label" : "limit", "tail" : ": Option[CassandraLimit]", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]", "kind" : "val"}, {"label" : "where", "tail" : ": CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#where:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "columnNames", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.tableName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#keyspaceName:String", "kind" : "val"}, {"label" : "sc", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD.sc", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#sc:org.apache.spark.SparkContext", "kind" : "val"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10], arg12: TypeConverter[A11]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$81:scala.reflect.ClassTag[B],implicitevidence$82:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$83:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$84:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$85:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$86:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$87:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$88:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$89:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$90:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$91:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$92:com.khulnasoft.spark.connector.types.TypeConverter[A10],implicitevidence$93:com.khulnasoft.spark.connector.types.TypeConverter[A11]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$69:scala.reflect.ClassTag[B],implicitevidence$70:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$71:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$72:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$73:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$74:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$75:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$76:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$77:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$78:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$79:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$80:com.khulnasoft.spark.connector.types.TypeConverter[A10]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$58:scala.reflect.ClassTag[B],implicitevidence$59:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$60:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$61:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$62:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$63:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$64:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$65:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$66:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$67:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$68:com.khulnasoft.spark.connector.types.TypeConverter[A9]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$48:scala.reflect.ClassTag[B],implicitevidence$49:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$50:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$51:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$52:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$53:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$54:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$55:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$56:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$57:com.khulnasoft.spark.connector.types.TypeConverter[A8]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$39:scala.reflect.ClassTag[B],implicitevidence$40:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$41:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$42:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$43:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$44:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$45:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$46:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$47:com.khulnasoft.spark.connector.types.TypeConverter[A7]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$31:scala.reflect.ClassTag[B],implicitevidence$32:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$33:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$34:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$35:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$36:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$37:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$38:com.khulnasoft.spark.connector.types.TypeConverter[A6]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4,A5](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$26:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$27:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$28:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$29:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$30:com.khulnasoft.spark.connector.types.TypeConverter[A5]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3,A4](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$20:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$21:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$22:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$23:com.khulnasoft.spark.connector.types.TypeConverter[A4]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2,A3](f:(A0,A1,A2,A3)=>B)(implicitevidence$13:scala.reflect.ClassTag[B],implicitevidence$14:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$15:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$16:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$17:com.khulnasoft.spark.connector.types.TypeConverter[A3]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1,A2](f:(A0,A1,A2)=>B)(implicitevidence$9:scala.reflect.ClassTag[B],implicitevidence$10:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$11:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$12:com.khulnasoft.spark.connector.types.TypeConverter[A2]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0,A1](f:(A0,A1)=>B)(implicitevidence$6:scala.reflect.ClassTag[B],implicitevidence$7:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$8:com.khulnasoft.spark.connector.types.TypeConverter[A1]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#as[B,A0](f:A0=>B)(implicitevidence$4:scala.reflect.ClassTag[B],implicitevidence$5:com.khulnasoft.spark.connector.types.TypeConverter[A0]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "convertTo", "tail" : "(arg0: ClassTag[B], arg1: RowReaderFactory[B]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.convertTo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#convertTo[B](implicitevidence$2:scala.reflect.ClassTag[B],implicitevidence$3:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[B]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#selectedColumnNames:Seq[String]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.take", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#take(num:Int):Array[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#withDescOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#withAscOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "clusteringOrder", "tail" : "(order: ClusteringOrder): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#clusteringOrder(order:com.khulnasoft.spark.connector.rdd.ClusteringOrder):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#perPartitionLimit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "limit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#limit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "select", "tail" : "(columns: ColumnRef*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "where", "tail" : "(cql: String, values: Any*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#where(cql:String,values:Any*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(readConf: ReadConf): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#withReadConf(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[R]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (R) ⇒ K): RDD[(K, R)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#first():T", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[R]): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[R]): Map[R, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(op: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (R, R) ⇒ R, depth: Int): R", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], p: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[R]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[R]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (R) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[R], evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (R, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[R]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], partitioner: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (R) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[R]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (R) ⇒ Boolean): RDD[R]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): EmptyCassandraRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/EmptyCassandraRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.MapRowWriter", "shortDescription" : "", "members_class" : [{"label" : "readColumnValues", "tail" : "(data: Map[String, AnyRef], buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.rdd.MapRowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#readColumnValues(data:java.util.Map[String,AnyRef],buffer:Array[Any]):Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.rdd.MapRowWriter#<init>", "error" : "unsupported entity"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.MapRowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/rdd\/MapRowWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.rdd.ReadConf", "shortDescription" : "Read settings for RDD", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html", "members_object" : [{"label" : "fromSparkConf", "tail" : "(conf: SparkConf): ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.fromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#fromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "def"}, {"label" : "ParallelismLevelParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.ParallelismLevelParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ParallelismLevelParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "ThroughputJoinQueryPerSecParam", "tail" : ": DeprecatedConfigParameter[Option[Int]]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.ThroughputJoinQueryPerSecParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ThroughputJoinQueryPerSecParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Option[Int]]", "kind" : "val"}, {"label" : "DeprecatedReadsPerSecParam", "tail" : ": DeprecatedConfigParameter[Option[Int]]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.DeprecatedReadsPerSecParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#DeprecatedReadsPerSecParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Option[Int]]", "kind" : "val"}, {"label" : "ReadsPerSecParam", "tail" : ": ConfigParameter[Option[Int]]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.ReadsPerSecParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ReadsPerSecParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Int]]", "kind" : "val"}, {"label" : "TaskMetricParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.TaskMetricParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#TaskMetricParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "ConsistencyLevelParam", "tail" : ": ConfigParameter[ConsistencyLevel]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.ConsistencyLevelParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ConsistencyLevelParam:com.khulnasoft.spark.connector.util.ConfigParameter[com.khulnasoft.oss.driver.api.core.ConsistencyLevel]", "kind" : "val"}, {"label" : "DeprecatedFetchSizeInRowsParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.DeprecatedFetchSizeInRowsParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#DeprecatedFetchSizeInRowsParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "FetchSizeInRowsParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.FetchSizeInRowsParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#FetchSizeInRowsParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "DeprecatedSplitSizeInMBParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.DeprecatedSplitSizeInMBParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#DeprecatedSplitSizeInMBParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "SplitSizeInMBParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.SplitSizeInMBParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#SplitSizeInMBParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "ThroughputMiBPSParam", "tail" : ": ConfigParameter[Option[Double]]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.ThroughputMiBPSParam", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ThroughputMiBPSParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Double]]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.ReferenceSection", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.khulnasoft.spark.connector.rdd.ReadConf#<init>", "error" : "unsupported entity"}, {"label" : "executeAs", "tail" : ": Option[String]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.executeAs", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#executeAs:Option[String]", "kind" : "val"}, {"label" : "parallelismLevel", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.parallelismLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#parallelismLevel:Int", "kind" : "val"}, {"label" : "readsPerSec", "tail" : ": Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.readsPerSec", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#readsPerSec:Option[Int]", "kind" : "val"}, {"label" : "throughputMiBPS", "tail" : ": Option[Double]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.throughputMiBPS", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#throughputMiBPS:Option[Double]", "kind" : "val"}, {"label" : "taskMetricsEnabled", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.taskMetricsEnabled", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#taskMetricsEnabled:Boolean", "kind" : "val"}, {"label" : "consistencyLevel", "tail" : ": ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "val"}, {"label" : "fetchSizeInRows", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.fetchSizeInRows", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#fetchSizeInRows:Int", "kind" : "val"}, {"label" : "splitSizeInMB", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.splitSizeInMB", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#splitSizeInMB:Int", "kind" : "val"}, {"label" : "splitCount", "tail" : ": Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.ReadConf.splitCount", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#splitCount:Option[Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/ReadConf.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.SparkPartitionLimit", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.rdd.SparkPartitionLimit#<init>", "error" : "unsupported entity"}, {"label" : "rowsNumber", "tail" : ": Long", "member" : "com.khulnasoft.spark.connector.rdd.SparkPartitionLimit.rowsNumber", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#rowsNumber:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/rdd\/SparkPartitionLimit.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.rdd.ValidRDDType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html", "members_object" : [{"label" : "javaSerializableAsValidRDDType", "tail" : "(): ValidRDDType[T]", "member" : "com.khulnasoft.spark.connector.rdd.ValidRDDType.javaSerializableAsValidRDDType", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#javaSerializableAsValidRDDType[T<:java.io.Serializable]:com.khulnasoft.spark.connector.rdd.ValidRDDType[T]", "kind" : "implicit def"}, {"label" : "withTypeConverterAsValidRDDType", "tail" : "(tc: TypeConverter[T]): ValidRDDType[T]", "member" : "com.khulnasoft.spark.connector.rdd.ValidRDDType.withTypeConverterAsValidRDDType", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#withTypeConverterAsValidRDDType[T](implicittc:com.khulnasoft.spark.connector.types.TypeConverter[T]):com.khulnasoft.spark.connector.rdd.ValidRDDType[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/rdd\/ValidRDDType.html", "kind" : "trait"}], "org.apache.spark.sql.cassandra" : [{"name" : "org.apache.spark.sql.cassandra.AlwaysOff", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOff$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.AlwaysOn", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/AlwaysOn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.AnalyzedPredicates", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.AnalyzedPredicates.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#toString():String", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.AnalyzedPredicates#<init>", "error" : "unsupported entity"}, {"label" : "handledBySpark", "tail" : ": Set[Filter]", "member" : "org.apache.spark.sql.cassandra.AnalyzedPredicates.handledBySpark", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#handledBySpark:Set[org.apache.spark.sql.sources.Filter]", "kind" : "val"}, {"label" : "handledByCassandra", "tail" : ": Set[Filter]", "member" : "org.apache.spark.sql.cassandra.AnalyzedPredicates.handledByCassandra", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#handledByCassandra:Set[org.apache.spark.sql.sources.Filter]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/AnalyzedPredicates.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.cassandra.Auto", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.Auto.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#toString():String", "kind" : "def"}, {"label" : "enabled", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.Auto.enabled", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#enabled:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.Auto#<init>", "error" : "unsupported entity"}, {"label" : "ratio", "tail" : ": Double", "member" : "org.apache.spark.sql.cassandra.Auto.ratio", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#ratio:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/Auto.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/Auto.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.cassandra.Automatic", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/Automatic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.BasicCassandraPredicatePushDown", "shortDescription" : " Determines which filter predicates can be pushed down to Cassandra.", "members_class" : [{"label" : "predicatesToPreserve", "tail" : ": Set[Predicate]", "member" : "org.apache.spark.sql.cassandra.BasicCassandraPredicatePushDown.predicatesToPreserve", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#predicatesToPreserve:Set[Predicate]", "kind" : "val"}, {"label" : "predicatesToPushDown", "tail" : ": Set[Predicate]", "member" : "org.apache.spark.sql.cassandra.BasicCassandraPredicatePushDown.predicatesToPushDown", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#predicatesToPushDown:Set[Predicate]", "kind" : "val"}, {"label" : "pvOrdering", "tail" : ": Ordering[ProtocolVersion]", "member" : "org.apache.spark.sql.cassandra.BasicCassandraPredicatePushDown.pvOrdering", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#pvOrdering:scala.math.Ordering[com.khulnasoft.oss.driver.api.core.ProtocolVersion]", "kind" : "val"}, {"member" : "org.apache.spark.sql.cassandra.BasicCassandraPredicatePushDown#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/BasicCassandraPredicatePushDown.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction", "members_trait" : [{"label" : "isCollectionType", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.isCollectionType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#isCollectionType(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "cql", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#cql:String", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#foldable:Boolean", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#nullable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: ArrayList[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#generateTreeString(depth:Int,lastChildren:java.util.ArrayList[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "confParam", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.confParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#confParam:String", "kind" : "abstract def"}, {"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#withNewChildInternal(newChild:T):T", "kind" : "abstract def"}, {"label" : "child", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.child", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#child:T", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html", "members_object" : [{"label" : "cassandraWriteTimeFunctionBuilder", "tail" : "(args: Seq[Expression]): CassandraWriteTime", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cassandraWriteTimeFunctionBuilder", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#cassandraWriteTimeFunctionBuilder(args:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.cassandra.CassandraWriteTime", "kind" : "def"}, {"label" : "cassandraWriteTimeFunctionDescriptor", "tail" : ": (FunctionIdentifier, ExpressionInfo, (Seq[Expression]) ⇒ CassandraWriteTime)", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cassandraWriteTimeFunctionDescriptor", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#cassandraWriteTimeFunctionDescriptor:(org.apache.spark.sql.catalyst.FunctionIdentifier,org.apache.spark.sql.catalyst.expressions.ExpressionInfo,Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>org.apache.spark.sql.cassandra.CassandraWriteTime)", "kind" : "val"}, {"label" : "cassandraTTLFunctionBuilder", "tail" : "(args: Seq[Expression]): CassandraTTL", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cassandraTTLFunctionBuilder", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#cassandraTTLFunctionBuilder(args:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.cassandra.CassandraTTL", "kind" : "def"}, {"label" : "cassandraTTLFunctionDescriptor", "tail" : ": (FunctionIdentifier, ExpressionInfo, (Seq[Expression]) ⇒ CassandraTTL)", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cassandraTTLFunctionDescriptor", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#cassandraTTLFunctionDescriptor:(org.apache.spark.sql.catalyst.FunctionIdentifier,org.apache.spark.sql.catalyst.expressions.ExpressionInfo,Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>org.apache.spark.sql.cassandra.CassandraTTL)", "kind" : "val"}, {"label" : "registerMetadataFunctions", "tail" : "(session: SparkSession): Unit", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.registerMetadataFunctions", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#registerMetadataFunctions(session:org.apache.spark.sql.SparkSession):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetadataFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.cassandra.CassandraMetaDataRule", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html", "members_object" : [{"label" : "apply", "tail" : "(plan: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.cassandra.CassandraMetaDataRule.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#apply(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "findMetadataExpressions", "tail" : "(logicalPlan: LogicalPlan): Seq[CassandraMetadataFunction]", "member" : "org.apache.spark.sql.cassandra.CassandraMetaDataRule.findMetadataExpressions", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#findMetadataExpressions(logicalPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Seq[org.apache.spark.sql.cassandra.CassandraMetadataFunction]", "kind" : "def"}, {"label" : "replaceMetadata", "tail" : "(metaDataExpression: CassandraMetadataFunction, plan: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.cassandra.CassandraMetaDataRule.replaceMetadata", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#replaceMetadata(metaDataExpression:org.apache.spark.sql.cassandra.CassandraMetadataFunction,plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "ruleName", "tail" : ": String", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#ruleName:String", "kind" : "val"}, {"label" : "ruleId", "tail" : ": RuleId", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleId", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#ruleId:org.apache.spark.sql.catalyst.rules.RuleId", "kind" : "lazy val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#logName:String", "kind" : "def"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraMetaDataRule$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.CassandraPredicateRules", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef, conf: SparkConf): AnalyzedPredicates", "member" : "org.apache.spark.sql.cassandra.CassandraPredicateRules.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html#apply(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef,conf:org.apache.spark.SparkConf):org.apache.spark.sql.cassandra.AnalyzedPredicates", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/sql\/cassandra\/CassandraPredicateRules.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.cassandra.CassandraSourceOptions", "shortDescription" : "Store data source options", "members_case class" : [{"member" : "org.apache.spark.sql.cassandra.CassandraSourceOptions#<init>", "error" : "unsupported entity"}, {"label" : "cassandraConfs", "tail" : ": Map[String, String]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceOptions.cassandraConfs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#cassandraConfs:Map[String,String]", "kind" : "val"}, {"label" : "confirmTruncate", "tail" : ": Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraSourceOptions.confirmTruncate", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#confirmTruncate:Boolean", "kind" : "val"}, {"label" : "pushdown", "tail" : ": Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraSourceOptions.pushdown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#pushdown:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceOptions.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.cassandra.CassandraSourceRelation", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html", "members_object" : [{"label" : "getDirectJoinSetting", "tail" : "(conf: SparkConf): Product with Serializable with DirectJoinSetting", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.getDirectJoinSetting", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#getDirectJoinSetting(conf:org.apache.spark.SparkConf):ProductwithSerializablewithorg.apache.spark.sql.cassandra.DirectJoinSetting", "kind" : "def"}, {"label" : "applyDirectJoinSetting", "tail" : "(sparkConf: SparkConf, directJoinSetting: DirectJoinSetting): SparkConf", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.applyDirectJoinSetting", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#applyDirectJoinSetting(sparkConf:org.apache.spark.SparkConf,directJoinSetting:org.apache.spark.sql.cassandra.DirectJoinSetting):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "applyDirectJoinSetting", "tail" : "(options: CaseInsensitiveStringMap, directJoinSetting: DirectJoinSetting): CaseInsensitiveStringMap", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.applyDirectJoinSetting", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#applyDirectJoinSetting(options:org.apache.spark.sql.util.CaseInsensitiveStringMap,directJoinSetting:org.apache.spark.sql.cassandra.DirectJoinSetting):org.apache.spark.sql.util.CaseInsensitiveStringMap", "kind" : "def"}, {"label" : "directJoinSettingToString", "tail" : "(directJoinSetting: DirectJoinSetting): String", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.directJoinSettingToString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#directJoinSettingToString(directJoinSetting:org.apache.spark.sql.cassandra.DirectJoinSetting):String", "kind" : "def"}, {"label" : "defaultClusterName", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.defaultClusterName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#defaultClusterName:String", "kind" : "val"}, {"label" : "setDirectJoin", "tail" : "(ds: Dataset[K], directJoinSetting: DirectJoinSetting)(arg0: Encoder[K]): Dataset[K]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.setDirectJoin", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#setDirectJoin[K](ds:org.apache.spark.sql.Dataset[K],directJoinSetting:org.apache.spark.sql.cassandra.DirectJoinSetting)(implicitevidence$1:org.apache.spark.sql.Encoder[K]):org.apache.spark.sql.Dataset[K]", "kind" : "def"}, {"label" : "IgnoreMissingMetaColumns", "tail" : ": ConfigParameter[Boolean]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.IgnoreMissingMetaColumns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#IgnoreMissingMetaColumns:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "DseInClauseToFullTableScanConversionThreshold", "tail" : ": DeprecatedConfigParameter[Long]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.DseInClauseToFullTableScanConversionThreshold", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#DseInClauseToFullTableScanConversionThreshold:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Long]", "kind" : "val"}, {"label" : "InClauseToFullTableScanConversionThreshold", "tail" : ": ConfigParameter[Long]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.InClauseToFullTableScanConversionThreshold", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#InClauseToFullTableScanConversionThreshold:com.khulnasoft.spark.connector.util.ConfigParameter[Long]", "kind" : "val"}, {"label" : "DseInClauseToJoinWithTableConversionThreshold", "tail" : ": DeprecatedConfigParameter[Long]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.DseInClauseToJoinWithTableConversionThreshold", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#DseInClauseToJoinWithTableConversionThreshold:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Long]", "kind" : "val"}, {"label" : "InClauseToJoinWithTableConversionThreshold", "tail" : ": ConfigParameter[Long]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.InClauseToJoinWithTableConversionThreshold", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#InClauseToJoinWithTableConversionThreshold:com.khulnasoft.spark.connector.util.ConfigParameter[Long]", "kind" : "val"}, {"label" : "DirectJoinSettingParam", "tail" : ": ConfigParameter[String]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.DirectJoinSettingParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#DirectJoinSettingParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "DirectJoinSizeRatioParam", "tail" : ": ConfigParameter[Double]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.DirectJoinSizeRatioParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#DirectJoinSizeRatioParam:com.khulnasoft.spark.connector.util.ConfigParameter[Double]", "kind" : "val"}, {"label" : "SolrPredciateOptimizationParam", "tail" : ": DeprecatedConfigParameter[String]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.SolrPredciateOptimizationParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#SolrPredciateOptimizationParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[String]", "kind" : "val"}, {"label" : "SearchPredicateOptimizationParam", "tail" : ": ConfigParameter[String]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.SearchPredicateOptimizationParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#SearchPredicateOptimizationParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "SearchPredicateOptimizationRatioParam", "tail" : ": ConfigParameter[Double]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.SearchPredicateOptimizationRatioParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#SearchPredicateOptimizationRatioParam:com.khulnasoft.spark.connector.util.ConfigParameter[Double]", "kind" : "val"}, {"label" : "AdditionalCassandraPushDownRulesParam", "tail" : ": ConfigParameter[List[CassandraPredicateRules]]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.AdditionalCassandraPushDownRulesParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#AdditionalCassandraPushDownRulesParam:com.khulnasoft.spark.connector.util.ConfigParameter[List[org.apache.spark.sql.cassandra.CassandraPredicateRules]]", "kind" : "val"}, {"label" : "TTLParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.TTLParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#TTLParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "WriteTimeParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.WriteTimeParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#WriteTimeParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "TableSizeInBytesParam", "tail" : ": ConfigParameter[Option[Long]]", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.TableSizeInBytesParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#TableSizeInBytesParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Long]]", "kind" : "val"}, {"label" : "TableOptions", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.TableOptions", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#TableOptions:String", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.CassandraSourceRelation.ReferenceSection", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSourceRelation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions", "shortDescription" : "", "members_class" : [{"label" : "setCassandraConf", "tail" : "(cluster: String, keyspace: String, options: Map[String, String]): SparkSession", "member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions.setCassandraConf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#setCassandraConf(cluster:String,keyspace:String,options:Map[String,String]):org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "setCassandraConf", "tail" : "(cluster: String, options: Map[String, String]): SparkSession", "member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions.setCassandraConf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#setCassandraConf(cluster:String,options:Map[String,String]):org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "setCassandraConf", "tail" : "(options: Map[String, String]): SparkSession", "member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions.setCassandraConf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#setCassandraConf(options:Map[String,String]):org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "getCluster", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions.getCluster", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#getCluster:String", "kind" : "def"}, {"label" : "setCluster", "tail" : "(cluster: String): SparkSession", "member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions.setCluster", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#setCluster(cluster:String):org.apache.spark.sql.SparkSession", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions#<init>", "error" : "unsupported entity"}, {"label" : "sparkSession", "tail" : ": SparkSession", "member" : "org.apache.spark.sql.cassandra.CassandraSparkSessionFunctions.sparkSession", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#sparkSession:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSparkSessionFunctions.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions", "shortDescription" : "", "members_class" : [{"label" : "setCassandraConf", "tail" : "(cluster: String, keyspace: String, options: Map[String, String]): SQLContext", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions.setCassandraConf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#setCassandraConf(cluster:String,keyspace:String,options:Map[String,String]):org.apache.spark.sql.SQLContext", "kind" : "def"}, {"label" : "setCassandraConf", "tail" : "(cluster: String, options: Map[String, String]): SQLContext", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions.setCassandraConf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#setCassandraConf(cluster:String,options:Map[String,String]):org.apache.spark.sql.SQLContext", "kind" : "def"}, {"label" : "setCassandraConf", "tail" : "(options: Map[String, String]): SQLContext", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions.setCassandraConf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#setCassandraConf(options:Map[String,String]):org.apache.spark.sql.SQLContext", "kind" : "def"}, {"label" : "getCluster", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions.getCluster", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#getCluster:String", "kind" : "def"}, {"label" : "setCluster", "tail" : "(cluster: String): SQLContext", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions.setCluster", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#setCluster(cluster:String):org.apache.spark.sql.SQLContext", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions#<init>", "error" : "unsupported entity"}, {"label" : "sqlContext", "tail" : ": SQLContext", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextFunctions.sqlContext", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#sqlContext:org.apache.spark.sql.SQLContext", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextFunctions.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.CassandraSQLContextParams", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html", "members_object" : [{"label" : "SqlClusterParam", "tail" : ": ConfigParameter[String]", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextParams.SqlClusterParam", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#SqlClusterParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.CassandraSQLContextParams.ReferenceSection", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$CassandraSQLContextParams$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.CassandraSQLRow", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html", "members_class" : [{"label" : "toSeq", "tail" : "(): Seq[Any]", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.toSeq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#toSeq:Seq[Any]", "kind" : "def"}, {"label" : "isNullAt", "tail" : "(i: Int): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.isNullAt", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#isNullAt(i:Int):Boolean", "kind" : "def"}, {"label" : "get", "tail" : "(i: Int): Any", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.get", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#get(i:Int):Any", "kind" : "def"}, {"label" : "getString", "tail" : "(i: Int): String", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getString(i:Int):String", "kind" : "def"}, {"label" : "getInt", "tail" : "(i: Int): Int", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getInt", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getInt(i:Int):Int", "kind" : "def"}, {"label" : "getShort", "tail" : "(i: Int): Short", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getShort", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getShort(i:Int):Short", "kind" : "def"}, {"label" : "getBoolean", "tail" : "(i: Int): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getBoolean", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getBoolean(i:Int):Boolean", "kind" : "def"}, {"label" : "getByte", "tail" : "(i: Int): Byte", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getByte", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getByte(i:Int):Byte", "kind" : "def"}, {"label" : "getLong", "tail" : "(i: Int): Long", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getLong", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getLong(i:Int):Long", "kind" : "def"}, {"label" : "getFloat", "tail" : "(i: Int): Float", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getFloat", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getFloat(i:Int):Float", "kind" : "def"}, {"label" : "getDouble", "tail" : "(i: Int): Double", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.getDouble", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getDouble(i:Int):Double", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.size", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#size:Int", "kind" : "def"}, {"label" : "copy", "tail" : "(): CassandraSQLRow", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.copy", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#copy():org.apache.spark.sql.cassandra.CassandraSQLRow", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): AnyRef", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#apply(i:Int):AnyRef", "kind" : "def"}, {"label" : "fieldNames", "tail" : "(): CassandraRowMetadata", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.fieldNames", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#fieldNames:com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.CassandraSQLRow#<init>", "error" : "unsupported entity"}, {"label" : "columnValues", "tail" : ": IndexedSeq[AnyRef]", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.columnValues", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#columnValues:IndexedSeq[AnyRef]", "kind" : "val"}, {"label" : "metaData", "tail" : ": CassandraRowMetadata", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.metaData", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#metaData:com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "val"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.Row.prettyJson", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#prettyJson:String", "kind" : "def"}, {"label" : "json", "tail" : "(): String", "member" : "org.apache.spark.sql.Row.json", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#json:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "org.apache.spark.sql.Row.mkString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "org.apache.spark.sql.Row.mkString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "org.apache.spark.sql.Row.mkString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#mkString:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.Row.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.apache.spark.sql.Row.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "anyNull", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.Row.anyNull", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#anyNull:Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.Row.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#toString():String", "kind" : "def"}, {"label" : "getValuesMap", "tail" : "(fieldNames: Seq[String]): Map[String, T]", "member" : "org.apache.spark.sql.Row.getValuesMap", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getValuesMap[T](fieldNames:Seq[String]):Map[String,T]", "kind" : "def"}, {"label" : "fieldIndex", "tail" : "(name: String): Int", "member" : "org.apache.spark.sql.Row.fieldIndex", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#fieldIndex(name:String):Int", "kind" : "def"}, {"label" : "getAs", "tail" : "(fieldName: String): T", "member" : "org.apache.spark.sql.Row.getAs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getAs[T](fieldName:String):T", "kind" : "def"}, {"label" : "getAs", "tail" : "(i: Int): T", "member" : "org.apache.spark.sql.Row.getAs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getAs[T](i:Int):T", "kind" : "def"}, {"label" : "getStruct", "tail" : "(i: Int): Row", "member" : "org.apache.spark.sql.Row.getStruct", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getStruct(i:Int):org.apache.spark.sql.Row", "kind" : "def"}, {"label" : "getJavaMap", "tail" : "(i: Int): Map[K, V]", "member" : "org.apache.spark.sql.Row.getJavaMap", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getJavaMap[K,V](i:Int):java.util.Map[K,V]", "kind" : "def"}, {"label" : "getMap", "tail" : "(i: Int): Map[K, V]", "member" : "org.apache.spark.sql.Row.getMap", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getMap[K,V](i:Int):scala.collection.Map[K,V]", "kind" : "def"}, {"label" : "getList", "tail" : "(i: Int): List[T]", "member" : "org.apache.spark.sql.Row.getList", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getList[T](i:Int):java.util.List[T]", "kind" : "def"}, {"label" : "getSeq", "tail" : "(i: Int): Seq[T]", "member" : "org.apache.spark.sql.Row.getSeq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getSeq[T](i:Int):Seq[T]", "kind" : "def"}, {"label" : "getInstant", "tail" : "(i: Int): Instant", "member" : "org.apache.spark.sql.Row.getInstant", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getInstant(i:Int):java.time.Instant", "kind" : "def"}, {"label" : "getTimestamp", "tail" : "(i: Int): Timestamp", "member" : "org.apache.spark.sql.Row.getTimestamp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getTimestamp(i:Int):java.sql.Timestamp", "kind" : "def"}, {"label" : "getLocalDate", "tail" : "(i: Int): LocalDate", "member" : "org.apache.spark.sql.Row.getLocalDate", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getLocalDate(i:Int):java.time.LocalDate", "kind" : "def"}, {"label" : "getDate", "tail" : "(i: Int): Date", "member" : "org.apache.spark.sql.Row.getDate", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getDate(i:Int):java.sql.Date", "kind" : "def"}, {"label" : "getDecimal", "tail" : "(i: Int): BigDecimal", "member" : "org.apache.spark.sql.Row.getDecimal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getDecimal(i:Int):java.math.BigDecimal", "kind" : "def"}, {"label" : "schema", "tail" : "(): StructType", "member" : "org.apache.spark.sql.Row.schema", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#schema:org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "dataAsString", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.GettableData.dataAsString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#dataAsString:String", "kind" : "def"}, {"label" : "contains", "tail" : "(name: String): Boolean", "member" : "com.khulnasoft.spark.connector.GettableData.contains", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#contains(name:String):Boolean", "kind" : "def"}, {"label" : "nameOf", "tail" : "(index: Int): String", "member" : "com.khulnasoft.spark.connector.GettableData.nameOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#nameOf(index:Int):String", "kind" : "def"}, {"label" : "indexOf", "tail" : "(name: String): Int", "member" : "com.khulnasoft.spark.connector.GettableData.indexOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#indexOf(name:String):Int", "kind" : "def"}, {"label" : "isNullAt", "tail" : "(name: String): Boolean", "member" : "com.khulnasoft.spark.connector.GettableData.isNullAt", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#isNullAt(name:String):Boolean", "kind" : "def"}, {"label" : "getRawCql", "tail" : "(name: String): AnyRef", "member" : "com.khulnasoft.spark.connector.GettableData.getRawCql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getRawCql(name:String):AnyRef", "kind" : "def"}, {"label" : "getRaw", "tail" : "(name: String): AnyRef", "member" : "com.khulnasoft.spark.connector.GettableData.getRaw", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getRaw(name:String):AnyRef", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.GettableByIndexData.length", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#length:Int", "kind" : "def"}, {"label" : "getRaw", "tail" : "(index: Int): AnyRef", "member" : "com.khulnasoft.spark.connector.GettableByIndexData.getRaw", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getRaw(index:Int):AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : ": CassandraSQLRow", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.empty", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#empty:org.apache.spark.sql.cassandra.CassandraSQLRow", "kind" : "val"}, {"label" : "toUnsafeSqlType", "tail" : "(value: Any): AnyRef", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.toUnsafeSqlType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#toUnsafeSqlType(value:Any):AnyRef", "kind" : "def"}, {"label" : "toSparkSqlType", "tail" : "(value: Any): AnyRef", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.toSparkSqlType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#toSparkSqlType(value:Any):AnyRef", "kind" : "def"}, {"label" : "CassandraSQLRowReader", "tail" : "", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.CassandraSQLRowReader", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#CassandraSQLRowReader", "kind" : "implicit object"}, {"label" : "fromJavaDriverRow", "tail" : "(row: com.khulnasoft.oss.driver.api.core.cql.Row, metaData: CassandraRowMetadata): CassandraSQLRow", "member" : "org.apache.spark.sql.cassandra.CassandraSQLRow.fromJavaDriverRow", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#fromJavaDriverRow(row:com.khulnasoft.oss.driver.api.core.cql.Row,metaData:com.khulnasoft.spark.connector.CassandraRowMetadata):org.apache.spark.sql.cassandra.CassandraSQLRow", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/CassandraSQLRow.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.CassandraTableDefProvider", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withSparkConfOption", "tail" : "(key: String, value: String): BaseRelation", "member" : "org.apache.spark.sql.cassandra.CassandraTableDefProvider.withSparkConfOption", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#withSparkConfOption(key:String,value:String):org.apache.spark.sql.sources.BaseRelation", "kind" : "abstract def"}, {"label" : "tableDef", "tail" : "(): TableDef", "member" : "org.apache.spark.sql.cassandra.CassandraTableDefProvider.tableDef", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/sql\/cassandra\/CassandraTableDefProvider.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.cassandra.CassandraTTL", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): CassandraTTL", "member" : "org.apache.spark.sql.cassandra.CassandraTTL.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.cassandra.CassandraTTL", "kind" : "def"}, {"label" : "confParam", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraTTL.confParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#confParam:String", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.cassandra.CassandraTTL.dataType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraTTL.sql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#sql:String", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraTTL.nullable", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#nullable:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.CassandraTTL#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "org.apache.spark.sql.cassandra.CassandraTTL.child", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "isCollectionType", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.isCollectionType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#isCollectionType(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "cql", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#cql:String", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#foldable:Boolean", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: ArrayList[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#generateTreeString(depth:Int,lastChildren:java.util.ArrayList[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/CassandraTTL.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.cassandra.CassandraWriteTime", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): CassandraWriteTime", "member" : "org.apache.spark.sql.cassandra.CassandraWriteTime.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.cassandra.CassandraWriteTime", "kind" : "def"}, {"label" : "confParam", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraWriteTime.confParam", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#confParam:String", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.cassandra.CassandraWriteTime.dataType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraWriteTime.sql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#sql:String", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraWriteTime.nullable", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#nullable:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.CassandraWriteTime#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "org.apache.spark.sql.cassandra.CassandraWriteTime.child", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "isCollectionType", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.isCollectionType", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#isCollectionType(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "cql", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.CassandraMetadataFunction.cql", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#cql:String", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#foldable:Boolean", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#stateful:Boolean", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: ArrayList[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#generateTreeString(depth:Int,lastChildren:java.util.ArrayList[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/cassandra\/CassandraWriteTime.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.cassandra.DataFrameReaderWrapper", "shortDescription" : "", "members_class" : [{"label" : "cassandraFormat", "tail" : "(table: String, keyspace: String, cluster: String, pushdownEnable: Boolean): DataFrameReader", "member" : "org.apache.spark.sql.cassandra.DataFrameReaderWrapper.cassandraFormat", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#cassandraFormat(table:String,keyspace:String,cluster:String,pushdownEnable:Boolean):org.apache.spark.sql.DataFrameReader", "kind" : "def"}, {"label" : "cassandraFormat", "tail" : "(): DataFrameReader", "member" : "org.apache.spark.sql.cassandra.DataFrameReaderWrapper.cassandraFormat", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#cassandraFormat:org.apache.spark.sql.DataFrameReader", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.DataFrameReaderWrapper#<init>", "error" : "unsupported entity"}, {"label" : "dfReader", "tail" : ": DataFrameReader", "member" : "org.apache.spark.sql.cassandra.DataFrameReaderWrapper.dfReader", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#dfReader:org.apache.spark.sql.DataFrameReader", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameReaderWrapper.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper", "shortDescription" : "", "members_class" : [{"label" : "withWriteTime", "tail" : "(column: String): DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.withWriteTime", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#withWriteTime(column:String):org.apache.spark.sql.DataFrameWriter[T]", "kind" : "def"}, {"label" : "withWriteTime", "tail" : "(constant: Long): DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.withWriteTime", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#withWriteTime(constant:Long):org.apache.spark.sql.DataFrameWriter[T]", "kind" : "def"}, {"label" : "withTTL", "tail" : "(column: String): DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.withTTL", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#withTTL(column:String):org.apache.spark.sql.DataFrameWriter[T]", "kind" : "def"}, {"label" : "withTTL", "tail" : "(constant: Int): DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.withTTL", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#withTTL(constant:Int):org.apache.spark.sql.DataFrameWriter[T]", "kind" : "def"}, {"label" : "cassandraFormat", "tail" : "(table: String, keyspace: String, cluster: String, pushdownEnable: Boolean): DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.cassandraFormat", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#cassandraFormat(table:String,keyspace:String,cluster:String,pushdownEnable:Boolean):org.apache.spark.sql.DataFrameWriter[T]", "kind" : "def"}, {"label" : "cassandraFormat", "tail" : "(): DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.cassandraFormat", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#cassandraFormat:org.apache.spark.sql.DataFrameWriter[T]", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper#<init>", "error" : "unsupported entity"}, {"label" : "dfWriter", "tail" : ": DataFrameWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataFrameWriterWrapper.dfWriter", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#dfWriter:org.apache.spark.sql.DataFrameWriter[T]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/package$$DataFrameWriterWrapper.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper", "shortDescription" : "", "members_class" : [{"label" : "withWriteTime", "tail" : "(column: String): DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.withWriteTime", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#withWriteTime(column:String):org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "def"}, {"label" : "withWriteTime", "tail" : "(constant: Long): DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.withWriteTime", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#withWriteTime(constant:Long):org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "def"}, {"label" : "withTTL", "tail" : "(column: String): DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.withTTL", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#withTTL(column:String):org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "def"}, {"label" : "withTTL", "tail" : "(constant: Int): DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.withTTL", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#withTTL(constant:Int):org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "def"}, {"label" : "cassandraFormat", "tail" : "(table: String, keyspace: String, cluster: String, pushdownEnable: Boolean): DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.cassandraFormat", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#cassandraFormat(table:String,keyspace:String,cluster:String,pushdownEnable:Boolean):org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "def"}, {"label" : "cassandraFormat", "tail" : "(): DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.cassandraFormat", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#cassandraFormat:org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper#<init>", "error" : "unsupported entity"}, {"label" : "dsWriter", "tail" : ": DataStreamWriter[T]", "member" : "org.apache.spark.sql.cassandra.DataStreamWriterWrapper.dsWriter", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#dsWriter:org.apache.spark.sql.streaming.DataStreamWriter[T]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/package$$DataStreamWriterWrapper.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.DataTypeConverter", "shortDescription" : "Convert Cassandra data type to Catalyst data type", "object" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html", "members_object" : [{"label" : "toStructField", "tail" : "(column: ColumnDef): StructField", "member" : "org.apache.spark.sql.cassandra.DataTypeConverter.toStructField", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#toStructField(column:com.khulnasoft.spark.connector.cql.ColumnDef):org.apache.spark.sql.types.StructField", "kind" : "def"}, {"label" : "primitiveCatalystDataType", "tail" : "(cassandraType: ColumnType[_]): DataType", "member" : "org.apache.spark.sql.cassandra.DataTypeConverter.primitiveCatalystDataType", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#primitiveCatalystDataType(cassandraType:com.khulnasoft.spark.connector.types.ColumnType[_]):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "catalystDataType", "tail" : "(cassandraType: ColumnType[_], nullable: Boolean): DataType", "member" : "org.apache.spark.sql.cassandra.DataTypeConverter.catalystDataType", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#catalystDataType(cassandraType:com.khulnasoft.spark.connector.types.ColumnType[_],nullable:Boolean):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DataTypeConverter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.DefaultSource", "shortDescription" : " A Pointer to the DatasourceV2 Implementation of The Cassandra Source", "object" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html", "members_class" : [{"label" : "inferSchema", "tail" : "(options: CaseInsensitiveStringMap): StructType", "member" : "org.apache.spark.sql.cassandra.DefaultSource.inferSchema", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#inferSchema(options:org.apache.spark.sql.util.CaseInsensitiveStringMap):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "getTable", "tail" : "(options: CaseInsensitiveStringMap): CassandraTable", "member" : "org.apache.spark.sql.cassandra.DefaultSource.getTable", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#getTable(options:org.apache.spark.sql.util.CaseInsensitiveStringMap):com.khulnasoft.spark.connector.datasource.CassandraTable", "kind" : "def"}, {"label" : "shortName", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.shortName", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#shortName():String", "kind" : "def"}, {"label" : "getTable", "tail" : "(schema: StructType, partitioning: Array[Transform], properties: Map[String, String]): Table", "member" : "org.apache.spark.sql.cassandra.DefaultSource.getTable", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#getTable(schema:org.apache.spark.sql.types.StructType,partitioning:Array[org.apache.spark.sql.connector.expressions.Transform],properties:java.util.Map[String,String]):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.DefaultSource#<init>", "error" : "unsupported entity"}, {"label" : "supportsExternalMetadata", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.connector.catalog.TableProvider.supportsExternalMetadata", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#supportsExternalMetadata():Boolean", "kind" : "def"}, {"label" : "inferPartitioning", "tail" : "(arg0: CaseInsensitiveStringMap): Array[Transform]", "member" : "org.apache.spark.sql.connector.catalog.TableProvider.inferPartitioning", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#inferPartitioning(x$1:org.apache.spark.sql.util.CaseInsensitiveStringMap):Array[org.apache.spark.sql.connector.expressions.Transform]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "cassandraSource", "tail" : "(provider: String): Boolean", "member" : "org.apache.spark.sql.cassandra.DefaultSource.cassandraSource", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#cassandraSource(provider:String):Boolean", "kind" : "def"}, {"label" : "TableRefAndOptions", "tail" : "(parameters: Map[String, String]): (TableRef, CassandraSourceOptions)", "member" : "org.apache.spark.sql.cassandra.DefaultSource.TableRefAndOptions", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#TableRefAndOptions(parameters:Map[String,String]):(com.khulnasoft.spark.connector.TableRef,org.apache.spark.sql.cassandra.CassandraSourceOptions)", "kind" : "def"}, {"label" : "CassandraDataSourceProviderClassName", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceProviderClassName", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceProviderClassName:String", "kind" : "val"}, {"label" : "CassandraDataSourceProviderPackageName", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceProviderPackageName", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceProviderPackageName:String", "kind" : "val"}, {"label" : "CassandraDataSourceConfirmTruncateProperty", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceConfirmTruncateProperty", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceConfirmTruncateProperty:String", "kind" : "val"}, {"label" : "CassandraDataSourcePushdownEnableProperty", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourcePushdownEnableProperty", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourcePushdownEnableProperty:String", "kind" : "val"}, {"label" : "CassandraDataSourceUserDefinedSchemaNameProperty", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceUserDefinedSchemaNameProperty", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceUserDefinedSchemaNameProperty:String", "kind" : "val"}, {"label" : "CassandraDataSourceClusterNameProperty", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceClusterNameProperty", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceClusterNameProperty:String", "kind" : "val"}, {"label" : "CassandraDataSourceKeyspaceNameProperty", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceKeyspaceNameProperty", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceKeyspaceNameProperty:String", "kind" : "val"}, {"label" : "CassandraDataSourceTableNameProperty", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DefaultSource.CassandraDataSourceTableNameProperty", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#CassandraDataSourceTableNameProperty:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/DefaultSource.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.DirectJoinSetting", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/sql\/cassandra\/DirectJoinSetting.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.cassandra.DsePredicateRules", "shortDescription" : "A series of pushdown rules that only apply when connecting to Khulnasoft Enterprise", "object" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html", "members_object" : [{"label" : "apply", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef, sparkConf: SparkConf): AnalyzedPredicates", "member" : "org.apache.spark.sql.cassandra.DsePredicateRules.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#apply(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef,sparkConf:org.apache.spark.SparkConf):org.apache.spark.sql.cassandra.AnalyzedPredicates", "kind" : "def"}, {"label" : "StorageAttachedIndex", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.DsePredicateRules.StorageAttachedIndex", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#StorageAttachedIndex:String", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DsePredicateRules$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.DseSearchOptimizationSetting", "members_trait" : [{"label" : "enabled", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.DseSearchOptimizationSetting.enabled", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#enabled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/sql\/cassandra\/DseSearchOptimizationSetting.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.cassandra.InClausePredicateRules", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html", "members_object" : [{"label" : "apply", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef, conf: SparkConf): AnalyzedPredicates", "member" : "org.apache.spark.sql.cassandra.InClausePredicateRules.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#apply(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef,conf:org.apache.spark.SparkConf):org.apache.spark.sql.cassandra.AnalyzedPredicates", "kind" : "def"}, {"label" : "inCrossProductSize", "tail" : "(filters: Set[Filter]): Long", "member" : "org.apache.spark.sql.cassandra.InClausePredicateRules.inCrossProductSize", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#inCrossProductSize(filters:Set[org.apache.spark.sql.sources.Filter]):Long", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/InClausePredicateRules$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.NullableUnresolvedAttribute", "shortDescription" : "", "members_class" : [{"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.NullableUnresolvedAttribute.nullable", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#nullable:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.NullableUnresolvedAttribute#<init>", "error" : "unsupported entity"}, {"label" : "equalsIgnoreCase", "tail" : "(token: String): Boolean", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.equalsIgnoreCase", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#equalsIgnoreCase(token:String):Boolean", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.sql", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#toString():String", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.nodePatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "withDataType", "tail" : "(newType: DataType): Attribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.withDataType", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withDataType(newType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.Attribute", "kind" : "def"}, {"label" : "withExprId", "tail" : "(newExprId: ExprId): UnresolvedAttribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.withExprId", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withExprId(newExprId:org.apache.spark.sql.catalyst.expressions.ExprId):org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute", "kind" : "def"}, {"label" : "withMetadata", "tail" : "(newMetadata: Metadata): Attribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.withMetadata", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withMetadata(newMetadata:org.apache.spark.sql.types.Metadata):org.apache.spark.sql.catalyst.expressions.Attribute", "kind" : "def"}, {"label" : "withName", "tail" : "(newName: String): UnresolvedAttribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.withName", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withName(newName:String):org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute", "kind" : "def"}, {"label" : "withQualifier", "tail" : "(newQualifier: Seq[String]): UnresolvedAttribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.withQualifier", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withQualifier(newQualifier:Seq[String]):org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute", "kind" : "def"}, {"label" : "withNullability", "tail" : "(newNullability: Boolean): UnresolvedAttribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.withNullability", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withNullability(newNullability:Boolean):org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute", "kind" : "def"}, {"label" : "newInstance", "tail" : "(): UnresolvedAttribute", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.newInstance", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#newInstance():org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.resolved", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "qualifier", "tail" : "(): Seq[String]", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.qualifier", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#qualifier:Seq[String]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.dataType", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "exprId", "tail" : "(): ExprId", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.exprId", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#exprId:org.apache.spark.sql.catalyst.expressions.ExprId", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.name", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#name:String", "kind" : "def"}, {"label" : "nameParts", "tail" : ": Seq[String]", "member" : "org.apache.spark.sql.catalyst.analysis.UnresolvedAttribute.nameParts", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#nameParts:Seq[String]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#foldable:Boolean", "kind" : "final def"}, {"label" : "toAttribute", "tail" : "(): Attribute", "member" : "org.apache.spark.sql.catalyst.expressions.Attribute.toAttribute", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#toAttribute:org.apache.spark.sql.catalyst.expressions.Attribute", "kind" : "def"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Attribute.references", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "metadata", "tail" : "(): Metadata", "member" : "org.apache.spark.sql.catalyst.expressions.NamedExpression.metadata", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#metadata:org.apache.spark.sql.types.Metadata", "kind" : "def"}, {"label" : "qualifiedName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NamedExpression.qualifiedName", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#qualifiedName:String", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#children:Seq[T]", "kind" : "final def"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.typeSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#typeSuffix:String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "withCanonicalizedChildren", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.withCanonicalizedChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withCanonicalizedChildren:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "freshCopyIfContainsStatefulExpression", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.freshCopyIfContainsStatefulExpression", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#freshCopyIfContainsStatefulExpression():org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "stateful", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.stateful", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#stateful:Boolean", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: ArrayList[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#generateTreeString(depth:Int,lastChildren:java.util.ArrayList[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "multiTransformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#multiTransformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "multiTransformDown", "tail" : "(rule: PartialFunction[Expression, Seq[Expression]]): Stream[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.multiTransformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#multiTransformDown(rule:PartialFunction[BaseType,Seq[BaseType]]):Stream[BaseType]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (Expression) ⇒ Boolean): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.exists", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#exists(f:BaseType=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/NullableUnresolvedAttribute.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.Off", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/Off$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.Off.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#toString():String", "kind" : "def"}, {"label" : "enabled", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.DseSearchOptimizationSetting.enabled", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#enabled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/Off$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.On", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/On$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.cassandra.On.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#toString():String", "kind" : "def"}, {"label" : "enabled", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.cassandra.On.enabled", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#enabled:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/On$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.PredicateOps", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isInPredicate", "tail" : "(p: Predicate): Boolean", "member" : "org.apache.spark.sql.cassandra.PredicateOps.isInPredicate", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#isInPredicate(p:Predicate):Boolean", "kind" : "abstract def"}, {"label" : "isRangePredicate", "tail" : "(p: Predicate): Boolean", "member" : "org.apache.spark.sql.cassandra.PredicateOps.isRangePredicate", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#isRangePredicate(p:Predicate):Boolean", "kind" : "abstract def"}, {"label" : "isEqualToPredicate", "tail" : "(p: Predicate): Boolean", "member" : "org.apache.spark.sql.cassandra.PredicateOps.isEqualToPredicate", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#isEqualToPredicate(p:Predicate):Boolean", "kind" : "abstract def"}, {"label" : "isSingleColumnPredicate", "tail" : "(p: Predicate): Boolean", "member" : "org.apache.spark.sql.cassandra.PredicateOps.isSingleColumnPredicate", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#isSingleColumnPredicate(p:Predicate):Boolean", "kind" : "abstract def"}, {"label" : "columnName", "tail" : "(p: Predicate): String", "member" : "org.apache.spark.sql.cassandra.PredicateOps.columnName", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html#columnName(p:Predicate):String", "kind" : "abstract def"}], "shortDescription" : "A unified API for predicates, used by BasicCassandraPredicatePushDown.", "object" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html", "members_object" : [{"label" : "FilterOps", "tail" : "", "member" : "org.apache.spark.sql.cassandra.PredicateOps.FilterOps", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#FilterOps", "kind" : "implicit object"}, {"label" : "ExpressionOps", "tail" : "", "member" : "org.apache.spark.sql.cassandra.PredicateOps.ExpressionOps", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#ExpressionOps", "kind" : "implicit object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/sql\/cassandra\/PredicateOps.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.cassandra.SolrConstants", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html", "members_object" : [{"label" : "SolrQuery", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.SolrConstants.SolrQuery", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#SolrQuery:String", "kind" : "val"}, {"label" : "DseSolrIndexClassName", "tail" : ": String", "member" : "org.apache.spark.sql.cassandra.SolrConstants.DseSolrIndexClassName", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#DseSolrIndexClassName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrConstants$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.cassandra.SolrPredicateRules", "shortDescription" : "", "members_class" : [{"label" : "escapeSolrCondition", "tail" : "(condition: String): String", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.escapeSolrCondition", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#escapeSolrCondition(condition:String):String", "kind" : "def"}, {"label" : "convertToSolrQuery", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef, solrIndexedFields: Set[String], searchOptimizationEnabled: DseSearchOptimizationSetting, sparkConf: SparkConf): AnalyzedPredicates", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.convertToSolrQuery", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#convertToSolrQuery(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef,solrIndexedFields:Set[String],searchOptimizationEnabled:org.apache.spark.sql.cassandra.DseSearchOptimizationSetting,sparkConf:org.apache.spark.SparkConf):org.apache.spark.sql.cassandra.AnalyzedPredicates", "kind" : "def"}, {"label" : "findUselessIsNotNulls", "tail" : "(filters: Set[Filter], tableDef: TableDef): Set[IsNotNull]", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.findUselessIsNotNulls", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#findUselessIsNotNulls(filters:Set[org.apache.spark.sql.sources.Filter],tableDef:com.khulnasoft.spark.connector.cql.TableDef):Set[org.apache.spark.sql.sources.IsNotNull]", "kind" : "def"}, {"label" : "getPartitionKeyRestriction", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef): Set[EqualTo]", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.getPartitionKeyRestriction", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#getPartitionKeyRestriction(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef):Set[org.apache.spark.sql.sources.EqualTo]", "kind" : "def"}, {"label" : "convertToSolrFilter", "tail" : "(filter: Filter): SolrFilter", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.convertToSolrFilter", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#convertToSolrFilter(filter:org.apache.spark.sql.sources.Filter):SolrPredicateRules.this.SolrFilter", "kind" : "def"}, {"label" : "SolrFilter", "tail" : "", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.SolrFilter", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#SolrFilterextendsProductwithSerializable", "kind" : "case class"}, {"label" : "isConvertibleToSolr", "tail" : "(filter: Filter, indexedCols: Set[String]): Boolean", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.isConvertibleToSolr", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#isConvertibleToSolr(filter:org.apache.spark.sql.sources.Filter,indexedCols:Set[String]):Boolean", "kind" : "def"}, {"label" : "alreadyContainsSolrQuery", "tail" : "(predicates: AnalyzedPredicates): Boolean", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.alreadyContainsSolrQuery", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#alreadyContainsSolrQuery(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates):Boolean", "kind" : "def"}, {"label" : "getSolrIndexedColumnsFromSolrXML", "tail" : "(tableDef: TableDef, sparkConf: SparkConf): Set[String]", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.getSolrIndexedColumnsFromSolrXML", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#getSolrIndexedColumnsFromSolrXML(tableDef:com.khulnasoft.spark.connector.cql.TableDef,sparkConf:org.apache.spark.SparkConf):Set[String]", "kind" : "def"}, {"label" : "apply", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef, sparkConf: SparkConf): AnalyzedPredicates", "member" : "org.apache.spark.sql.cassandra.SolrPredicateRules.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#apply(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef,sparkConf:org.apache.spark.SparkConf):org.apache.spark.sql.cassandra.AnalyzedPredicates", "kind" : "def"}, {"member" : "org.apache.spark.sql.cassandra.SolrPredicateRules#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/cassandra\/SolrPredicateRules.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.cassandra.TimeUUIDPredicateRules", "shortDescription" : "All non-equal predicates on a TimeUUID column are going to fail and failin silent way.", "object" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html", "members_object" : [{"label" : "apply", "tail" : "(predicates: AnalyzedPredicates, tableDef: TableDef, conf: SparkConf): AnalyzedPredicates", "member" : "org.apache.spark.sql.cassandra.TimeUUIDPredicateRules.apply", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#apply(predicates:org.apache.spark.sql.cassandra.AnalyzedPredicates,tableDef:com.khulnasoft.spark.connector.cql.TableDef,conf:org.apache.spark.SparkConf):org.apache.spark.sql.cassandra.AnalyzedPredicates", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/cassandra\/TimeUUIDPredicateRules$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scala.tools.nsc" : [], "scala.collection.compat" : [], "com.khulnasoft.spark.connector.cql" : [{"name" : "com.khulnasoft.spark.connector.cql.AuthConf", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "authProvider", "tail" : "(): Option[AuthProvider]", "member" : "com.khulnasoft.spark.connector.cql.AuthConf.authProvider", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html#authProvider:Option[com.khulnasoft.oss.driver.api.core.auth.AuthProvider]", "kind" : "abstract def"}], "shortDescription" : "Stores credentials used to authenticate to a Cassandra cluster and uses themto configure a Cassandra connection.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html", "members_object" : [{"label" : "fromSparkConf", "tail" : "(conf: SparkConf): AuthConf", "member" : "com.khulnasoft.spark.connector.cql.AuthConf.fromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#fromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.AuthConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConf.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.cql.AuthConfFactory", "members_trait" : [{"label" : "properties", "tail" : "(): Set[String]", "member" : "com.khulnasoft.spark.connector.cql.AuthConfFactory.properties", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#properties:Set[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "authConf", "tail" : "(conf: SparkConf): AuthConf", "member" : "com.khulnasoft.spark.connector.cql.AuthConfFactory.authConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html#authConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.AuthConf", "kind" : "abstract def"}], "shortDescription" : "Obtains authentication configuration by reading  SparkConf object.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html", "members_object" : [{"label" : "fromSparkConf", "tail" : "(conf: SparkConf): AuthConfFactory", "member" : "com.khulnasoft.spark.connector.cql.AuthConfFactory.fromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#fromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.AuthConfFactory", "kind" : "def"}, {"label" : "FactoryParam", "tail" : ": ConfigParameter[AuthConfFactory]", "member" : "com.khulnasoft.spark.connector.cql.AuthConfFactory.FactoryParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#FactoryParam:com.khulnasoft.spark.connector.util.ConfigParameter[com.khulnasoft.spark.connector.cql.AuthConfFactory]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.AuthConfFactory.ReferenceSection", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/cql\/AuthConfFactory.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory", "members_trait" : [{"label" : "getScanner", "tail" : "(readConf: ReadConf, connConf: CassandraConnectorConf, columnNames: IndexedSeq[String]): Scanner", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.getScanner", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#getScanner(readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf,columnNames:IndexedSeq[String]):com.khulnasoft.spark.connector.cql.Scanner", "kind" : "def"}, {"label" : "properties", "tail" : "(): Set[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.properties", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#properties:Set[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createSession", "tail" : "(conf: CassandraConnectorConf): CqlSession", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.createSession", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html#createSession(conf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf):com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "abstract def"}], "shortDescription" : "Creates both native and Thrift connections to Cassandra.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html", "members_object" : [{"label" : "fromNameOrDefault", "tail" : "(factoryName: Option[String]): CassandraConnectionFactory", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.fromNameOrDefault", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#fromNameOrDefault(factoryName:Option[String]):com.khulnasoft.spark.connector.cql.CassandraConnectionFactory", "kind" : "def"}, {"label" : "fromSparkConf", "tail" : "(conf: SparkConf): CassandraConnectionFactory", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.fromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#fromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.CassandraConnectionFactory", "kind" : "def"}, {"label" : "deprecatedContinuousPagingParam", "tail" : ": DeprecatedConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.deprecatedContinuousPagingParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#deprecatedContinuousPagingParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Boolean]", "kind" : "val"}, {"label" : "continuousPagingParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.continuousPagingParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#continuousPagingParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "FactoryParam", "tail" : ": ConfigParameter[CassandraConnectionFactory]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.FactoryParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#FactoryParam:com.khulnasoft.spark.connector.util.ConfigParameter[com.khulnasoft.spark.connector.cql.CassandraConnectionFactory]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.ReferenceSection", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectionFactory.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.cql.CassandraConnector", "shortDescription" : "Provides and manages connections to Cassandra.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html", "members_class" : [{"label" : "closeResourceAfterUse", "tail" : "(closeable: C)(code: (C) ⇒ T): T", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.closeResourceAfterUse", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#closeResourceAfterUse[T,C<:AnyRef{defclose():Unit}](closeable:C)(code:C=>T):T", "kind" : "def"}, {"label" : "jWithSessionDo", "tail" : "(code: Function[CqlSession, T]): T", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.jWithSessionDo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#jWithSessionDo[T](code:java.util.function.Function[com.khulnasoft.oss.driver.api.core.CqlSession,T]):T", "kind" : "def"}, {"label" : "withSessionDo", "tail" : "(code: (CqlSession) ⇒ T): T", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.withSessionDo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#withSessionDo[T](code:com.khulnasoft.oss.driver.api.core.CqlSession=>T):T", "kind" : "def"}, {"label" : "openSession", "tail" : "(): CqlSession", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.openSession", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#openSession():com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "def"}, {"label" : "connectionFactory", "tail" : "(): CassandraConnectionFactory", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.connectionFactory", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#connectionFactory:com.khulnasoft.spark.connector.cql.CassandraConnectionFactory", "kind" : "def"}, {"label" : "hosts", "tail" : "(): Set[InetSocketAddress]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.hosts", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#hosts:Set[java.net.InetSocketAddress]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.CassandraConnector#<init>", "error" : "unsupported entity"}, {"label" : "conf", "tail" : ": CassandraConnectorConf", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.conf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#conf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "evictCache", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.evictCache", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#evictCache():Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(contactInfo: ContactInfo, localDC: Option[String], keepAliveMillis: Int, minReconnectionDelayMillis: Int, maxReconnectionDelayMillis: Int, queryRetryCount: Int, connectTimeoutMillis: Int, readTimeoutMillis: Int, connectionFactory: CassandraConnectionFactory): CassandraConnector", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.apply", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#apply(contactInfo:com.khulnasoft.spark.connector.cql.ContactInfo,localDC:Option[String],keepAliveMillis:Int,minReconnectionDelayMillis:Int,maxReconnectionDelayMillis:Int,queryRetryCount:Int,connectTimeoutMillis:Int,readTimeoutMillis:Int,connectionFactory:com.khulnasoft.spark.connector.cql.CassandraConnectionFactory):com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "apply", "tail" : "(sc: SparkContext): CassandraConnector", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.apply", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#apply(sc:org.apache.spark.SparkContext):com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "apply", "tail" : "(conf: SparkConf): CassandraConnector", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.apply", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#apply(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "apply", "tail" : "(conf: CassandraConnectorConf): CassandraConnector", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnector.apply", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#apply(conf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf):com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnector.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf", "shortDescription" : "Stores configuration of a connection to Cassandra.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html", "members_object" : [{"label" : "fromConnectionParams", "tail" : "(params: Map[String, String]): CassandraConnectorConf", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.fromConnectionParams", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#fromConnectionParams(params:Map[String,String]):com.khulnasoft.spark.connector.cql.CassandraConnectorConf", "kind" : "def"}, {"label" : "fromSparkConf", "tail" : "(conf: SparkConf): CassandraConnectorConf", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.fromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#fromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.CassandraConnectorConf", "kind" : "def"}, {"label" : "getContactInfoFromSparkConf", "tail" : "(conf: SparkConf): ContactInfo", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.getContactInfoFromSparkConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#getContactInfoFromSparkConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.ContactInfo", "kind" : "def"}, {"label" : "apply", "tail" : "(conf: SparkConf): CassandraConnectorConf", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.apply", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#apply(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.CassandraConnectorConf", "kind" : "def"}, {"label" : "SSLKeyStoreTypeParam", "tail" : ": ConfigParameter[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLKeyStoreTypeParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLKeyStoreTypeParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "SSLKeyStorePasswordParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLKeyStorePasswordParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLKeyStorePasswordParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "SSLKeyStorePathParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLKeyStorePathParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLKeyStorePathParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "SSLClientAuthEnabledParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLClientAuthEnabledParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLClientAuthEnabledParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "SSLEnabledAlgorithmsParam", "tail" : ": ConfigParameter[Set[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLEnabledAlgorithmsParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLEnabledAlgorithmsParam:com.khulnasoft.spark.connector.util.ConfigParameter[Set[String]]", "kind" : "val"}, {"label" : "SSLProtocolParam", "tail" : ": ConfigParameter[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLProtocolParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLProtocolParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "SSLTrustStoreTypeParam", "tail" : ": ConfigParameter[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLTrustStoreTypeParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLTrustStoreTypeParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "SSLTrustStorePasswordParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLTrustStorePasswordParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLTrustStorePasswordParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "SSLTrustStorePathParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLTrustStorePathParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLTrustStorePathParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "SSLEnabledParam", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.SSLEnabledParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#SSLEnabledParam:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "DefaultCassandraSSLConf", "tail" : ": CassandraSSLConf", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DefaultCassandraSSLConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DefaultCassandraSSLConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf.CassandraSSLConf", "kind" : "val"}, {"label" : "ReferenceSectionSSL", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ReferenceSectionSSL", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ReferenceSectionSSL:String", "kind" : "val"}, {"label" : "ProfileFileBasedConfigurationParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ProfileFileBasedConfigurationParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ProfileFileBasedConfigurationParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "CloudBasedConfigurationParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.CloudBasedConfigurationParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#CloudBasedConfigurationParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "ReferenceSectionAlternativeConnection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ReferenceSectionAlternativeConnection", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ReferenceSectionAlternativeConnection:String", "kind" : "val"}, {"label" : "ResolveContactPoints", "tail" : ": ConfigParameter[Boolean]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ResolveContactPoints", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ResolveContactPoints:com.khulnasoft.spark.connector.util.ConfigParameter[Boolean]", "kind" : "val"}, {"label" : "DeprecatedReadTimeoutParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DeprecatedReadTimeoutParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DeprecatedReadTimeoutParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "ReadTimeoutParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ReadTimeoutParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ReadTimeoutParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "QueryRetryParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.QueryRetryParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#QueryRetryParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "TimeoutBeforeCloseParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.TimeoutBeforeCloseParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#TimeoutBeforeCloseParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "QuietPeriodBeforeCloseParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.QuietPeriodBeforeCloseParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#QuietPeriodBeforeCloseParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "CompressionParam", "tail" : ": ConfigParameter[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.CompressionParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#CompressionParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "RemoteConnectionsPerExecutorParam", "tail" : ": ConfigParameter[Option[Int]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.RemoteConnectionsPerExecutorParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#RemoteConnectionsPerExecutorParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Int]]", "kind" : "val"}, {"label" : "DeprecatedMaxReconnectionDelayParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DeprecatedMaxReconnectionDelayParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DeprecatedMaxReconnectionDelayParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "LocalConnectionsPerExecutorParam", "tail" : ": ConfigParameter[Option[Int]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.LocalConnectionsPerExecutorParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#LocalConnectionsPerExecutorParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[Int]]", "kind" : "val"}, {"label" : "MaxReconnectionDelayParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.MaxReconnectionDelayParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#MaxReconnectionDelayParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "DeprecatedMinReconnectionDelayParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DeprecatedMinReconnectionDelayParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DeprecatedMinReconnectionDelayParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "MinReconnectionDelayParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.MinReconnectionDelayParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#MinReconnectionDelayParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "DeprecatedKeepAliveMillisParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DeprecatedKeepAliveMillisParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DeprecatedKeepAliveMillisParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "KeepAliveMillisParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.KeepAliveMillisParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#KeepAliveMillisParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "DeprecatedConnectionTimeoutParam", "tail" : ": DeprecatedConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DeprecatedConnectionTimeoutParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DeprecatedConnectionTimeoutParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Int]", "kind" : "val"}, {"label" : "ConnectionTimeoutParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ConnectionTimeoutParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ConnectionTimeoutParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "DeprecatedLocalDCParam", "tail" : ": DeprecatedConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.DeprecatedLocalDCParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#DeprecatedLocalDCParam:com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "LocalDCParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.LocalDCParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#LocalDCParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "ConnectionHostParam", "tail" : ": ConfigParameter[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ConnectionHostParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ConnectionHostParam:com.khulnasoft.spark.connector.util.ConfigParameter[String]", "kind" : "val"}, {"label" : "ConnectionPortParam", "tail" : ": ConfigParameter[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ConnectionPortParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ConnectionPortParam:com.khulnasoft.spark.connector.util.ConfigParameter[Int]", "kind" : "val"}, {"label" : "ReferenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.ReferenceSection", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ReferenceSection:String", "kind" : "val"}, {"label" : "CassandraSSLConf", "tail" : "", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.CassandraSSLConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#CassandraSSLConfextendsProductwithSerializable", "kind" : "case class"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#hashCode():Int", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf#<init>", "error" : "unsupported entity"}, {"label" : "resolveContactPoints", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.resolveContactPoints", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#resolveContactPoints:Boolean", "kind" : "val"}, {"label" : "timeoutBeforeCloseMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.timeoutBeforeCloseMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#timeoutBeforeCloseMillis:Int", "kind" : "val"}, {"label" : "quietPeriodBeforeCloseMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.quietPeriodBeforeCloseMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#quietPeriodBeforeCloseMillis:Int", "kind" : "val"}, {"label" : "connectionFactory", "tail" : ": CassandraConnectionFactory", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.connectionFactory", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#connectionFactory:com.khulnasoft.spark.connector.cql.CassandraConnectionFactory", "kind" : "val"}, {"label" : "readTimeoutMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.readTimeoutMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#readTimeoutMillis:Int", "kind" : "val"}, {"label" : "connectTimeoutMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.connectTimeoutMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#connectTimeoutMillis:Int", "kind" : "val"}, {"label" : "queryRetryCount", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.queryRetryCount", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#queryRetryCount:Int", "kind" : "val"}, {"label" : "compression", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.compression", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#compression:String", "kind" : "val"}, {"label" : "remoteConnectionsPerExecutor", "tail" : ": Option[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.remoteConnectionsPerExecutor", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#remoteConnectionsPerExecutor:Option[Int]", "kind" : "val"}, {"label" : "localConnectionsPerExecutor", "tail" : ": Option[Int]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.localConnectionsPerExecutor", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#localConnectionsPerExecutor:Option[Int]", "kind" : "val"}, {"label" : "maxReconnectionDelayMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.maxReconnectionDelayMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#maxReconnectionDelayMillis:Int", "kind" : "val"}, {"label" : "minReconnectionDelayMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.minReconnectionDelayMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#minReconnectionDelayMillis:Int", "kind" : "val"}, {"label" : "keepAliveMillis", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.keepAliveMillis", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#keepAliveMillis:Int", "kind" : "val"}, {"label" : "localDC", "tail" : ": Option[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.localDC", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#localDC:Option[String]", "kind" : "val"}, {"label" : "contactInfo", "tail" : ": ContactInfo", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectorConf.contactInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#contactInfo:com.khulnasoft.spark.connector.cql.ContactInfo", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/cql\/CassandraConnectorConf.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.cql.CloudBasedContactInfo", "shortDescription" : "", "members_case class" : [{"label" : "endPointStr", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.cql.CloudBasedContactInfo.endPointStr", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#endPointStr():String", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.CloudBasedContactInfo#<init>", "error" : "unsupported entity"}, {"label" : "authConf", "tail" : ": AuthConf", "member" : "com.khulnasoft.spark.connector.cql.CloudBasedContactInfo.authConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#authConf:com.khulnasoft.spark.connector.cql.AuthConf", "kind" : "val"}, {"label" : "path", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.CloudBasedContactInfo.path", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#path:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/cql\/CloudBasedContactInfo.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.cql.ContactInfo", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "endPointStr", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.cql.ContactInfo.endPointStr", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html#endPointStr():String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/cql\/ContactInfo.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.cql.DefaultAuthConfFactory", "shortDescription" : "Default AuthConfFactory that supports no authentication or password authentication.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html", "members_object" : [{"label" : "authConf", "tail" : "(conf: SparkConf): AuthConf", "member" : "com.khulnasoft.spark.connector.cql.DefaultAuthConfFactory.authConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#authConf(conf:org.apache.spark.SparkConf):com.khulnasoft.spark.connector.cql.AuthConf", "kind" : "def"}, {"label" : "properties", "tail" : ": Set[String]", "member" : "com.khulnasoft.spark.connector.cql.DefaultAuthConfFactory.properties", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#properties:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "PasswordParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.DefaultAuthConfFactory.PasswordParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#PasswordParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "UserNameParam", "tail" : ": ConfigParameter[Option[String]]", "member" : "com.khulnasoft.spark.connector.cql.DefaultAuthConfFactory.UserNameParam", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#UserNameParam:com.khulnasoft.spark.connector.util.ConfigParameter[Option[String]]", "kind" : "val"}, {"label" : "referenceSection", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.DefaultAuthConfFactory.referenceSection", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#referenceSection:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultAuthConfFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.cql.DefaultConnectionFactory", "shortDescription" : "Performs no authentication.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html", "members_object" : [{"label" : "getScanner", "tail" : "(readConf: ReadConf, connConf: CassandraConnectorConf, columnNames: IndexedSeq[String]): Scanner", "member" : "com.khulnasoft.spark.connector.cql.DefaultConnectionFactory.getScanner", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#getScanner(readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf,columnNames:IndexedSeq[String]):com.khulnasoft.spark.connector.cql.Scanner", "kind" : "def"}, {"label" : "continuousPagingEnabled", "tail" : "(session: CqlSession): Boolean", "member" : "com.khulnasoft.spark.connector.cql.DefaultConnectionFactory.continuousPagingEnabled", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#continuousPagingEnabled(session:com.khulnasoft.oss.driver.api.core.CqlSession):Boolean", "kind" : "def"}, {"label" : "maybeGetLocalFile", "tail" : "(path: String): URL", "member" : "com.khulnasoft.spark.connector.cql.DefaultConnectionFactory.maybeGetLocalFile", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#maybeGetLocalFile(path:String):java.net.URL", "kind" : "def"}, {"label" : "createSession", "tail" : "(conf: CassandraConnectorConf): CqlSession", "member" : "com.khulnasoft.spark.connector.cql.DefaultConnectionFactory.createSession", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#createSession(conf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf):com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "def"}, {"label" : "connectorConfigBuilder", "tail" : "(conf: CassandraConnectorConf, initBuilder: ProgrammaticDriverConfigLoaderBuilder): ProgrammaticDriverConfigLoaderBuilder", "member" : "com.khulnasoft.spark.connector.cql.DefaultConnectionFactory.connectorConfigBuilder", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#connectorConfigBuilder(conf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf,initBuilder:com.khulnasoft.oss.driver.api.core.config.ProgrammaticDriverConfigLoaderBuilder):com.khulnasoft.oss.driver.api.core.config.ProgrammaticDriverConfigLoaderBuilder", "kind" : "def"}, {"label" : "properties", "tail" : "(): Set[String]", "member" : "com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.properties", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#properties:Set[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultConnectionFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.cql.DefaultScanner", "shortDescription" : "", "members_class" : [{"label" : "getSession", "tail" : "(): CqlSession", "member" : "com.khulnasoft.spark.connector.cql.DefaultScanner.getSession", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#getSession():com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "def"}, {"label" : "scan", "tail" : "(statement: StatementT): ScanResult", "member" : "com.khulnasoft.spark.connector.cql.DefaultScanner.scan", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#scan[StatementT<:com.khulnasoft.oss.driver.api.core.cql.Statement[StatementT]](statement:StatementT):com.khulnasoft.spark.connector.cql.ScanResult", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.cql.DefaultScanner.close", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#close():Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.DefaultScanner#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/cql\/DefaultScanner.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo", "shortDescription" : "", "members_case class" : [{"label" : "endPointStr", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo.endPointStr", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#endPointStr():String", "kind" : "def"}, {"label" : "apply", "tail" : "(hosts: Set[InetAddress], port: Int, authConf: AuthConf, cassandraSSLConf: CassandraSSLConf): IpBasedContactInfo", "member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo.apply", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#apply(hosts:Set[java.net.InetAddress],port:Int,authConf:com.khulnasoft.spark.connector.cql.AuthConf,cassandraSSLConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf.CassandraSSLConf):com.khulnasoft.spark.connector.cql.IpBasedContactInfo", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#equals(obj:Any):Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo#<init>", "error" : "unsupported entity"}, {"label" : "cassandraSSLConf", "tail" : ": CassandraSSLConf", "member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo.cassandraSSLConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#cassandraSSLConf:com.khulnasoft.spark.connector.cql.CassandraConnectorConf.CassandraSSLConf", "kind" : "val"}, {"label" : "authConf", "tail" : ": AuthConf", "member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo.authConf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#authConf:com.khulnasoft.spark.connector.cql.AuthConf", "kind" : "val"}, {"label" : "hosts", "tail" : ": Set[InetSocketAddress]", "member" : "com.khulnasoft.spark.connector.cql.IpBasedContactInfo.hosts", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#hosts:Set[java.net.InetSocketAddress]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/cql\/IpBasedContactInfo.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.cql.NoAuthConf", "shortDescription" : "Performs no authentication.", "object" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html", "members_object" : [{"label" : "authProvider", "tail" : "(): Option[AuthProvider]", "member" : "com.khulnasoft.spark.connector.cql.NoAuthConf.authProvider", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#authProvider:Option[com.khulnasoft.oss.driver.api.core.auth.AuthProvider]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/NoAuthConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.cql.PasswordAuthConf", "shortDescription" : "Performs plain-text password authentication.", "members_case class" : [{"label" : "authProvider", "tail" : "(): Option[AuthProvider]", "member" : "com.khulnasoft.spark.connector.cql.PasswordAuthConf.authProvider", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#authProvider:Option[com.khulnasoft.oss.driver.api.core.auth.AuthProvider]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.PasswordAuthConf#<init>", "error" : "unsupported entity"}, {"label" : "password", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.PasswordAuthConf.password", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#password:String", "kind" : "val"}, {"label" : "user", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.PasswordAuthConf.user", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#user:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/cql\/PasswordAuthConf.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.cql.ProfileFileBasedContactInfo", "shortDescription" : "", "members_case class" : [{"label" : "endPointStr", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.cql.ProfileFileBasedContactInfo.endPointStr", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#endPointStr():String", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.ProfileFileBasedContactInfo#<init>", "error" : "unsupported entity"}, {"label" : "path", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.cql.ProfileFileBasedContactInfo.path", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#path:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/cql\/ProfileFileBasedContactInfo.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.cql.QueryUtils", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html", "members_object" : [{"label" : "getRoutingKeyOrError", "tail" : "(bs: BoundStatement): ByteBuffer", "member" : "com.khulnasoft.spark.connector.cql.QueryUtils.getRoutingKeyOrError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#getRoutingKeyOrError(bs:com.khulnasoft.oss.driver.api.core.cql.BoundStatement):java.nio.ByteBuffer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/QueryUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.cql.RefCountedCache", "shortDescription" : "A lockless cache that caches values for multiple usersand destroys them once all users release them.", "members_class" : [{"label" : "contains", "tail" : "(key: K): Boolean", "member" : "com.khulnasoft.spark.connector.cql.RefCountedCache.contains", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#contains(key:K):Boolean", "kind" : "def"}, {"label" : "evict", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.cql.RefCountedCache.evict", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#evict():Unit", "kind" : "def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.cql.RefCountedCache.shutdown", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#shutdown():Unit", "kind" : "def"}, {"label" : "release", "tail" : "(value: V, releaseDelayMillis: Int): Unit", "member" : "com.khulnasoft.spark.connector.cql.RefCountedCache.release", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#release(value:V,releaseDelayMillis:Int):Unit", "kind" : "def"}, {"label" : "acquire", "tail" : "(key: K): V", "member" : "com.khulnasoft.spark.connector.cql.RefCountedCache.acquire", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#acquire(key:K):V", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.RefCountedCache#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountedCache.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.cql.RefCountMap", "shortDescription" : "Atomically counts references to objects of any type", "members_class" : [{"label" : "clear", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.cql.RefCountMap.clear", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#clear():Unit", "kind" : "def"}, {"label" : "release", "tail" : "(key: T, n: Int): Int", "member" : "com.khulnasoft.spark.connector.cql.RefCountMap.release", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#release(key:T,n:Int):Int", "kind" : "final def"}, {"label" : "acquire", "tail" : "(key: T): Int", "member" : "com.khulnasoft.spark.connector.cql.RefCountMap.acquire", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#acquire(key:T):Int", "kind" : "final def"}, {"label" : "acquireIfNonZero", "tail" : "(key: T): Int", "member" : "com.khulnasoft.spark.connector.cql.RefCountMap.acquireIfNonZero", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#acquireIfNonZero(key:T):Int", "kind" : "final def"}, {"label" : "get", "tail" : "(key: T): Int", "member" : "com.khulnasoft.spark.connector.cql.RefCountMap.get", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#get(key:T):Int", "kind" : "final def"}, {"member" : "com.khulnasoft.spark.connector.cql.RefCountMap#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/cql\/RefCountMap.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.cql.Scanner", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "scan", "tail" : "(statement: StatementT): ScanResult", "member" : "com.khulnasoft.spark.connector.cql.Scanner.scan", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#scan[StatementT<:com.khulnasoft.oss.driver.api.core.cql.Statement[StatementT]](statement:StatementT):com.khulnasoft.spark.connector.cql.ScanResult", "kind" : "abstract def"}, {"label" : "getSession", "tail" : "(): CqlSession", "member" : "com.khulnasoft.spark.connector.cql.Scanner.getSession", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#getSession():com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "abstract def"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.cql.Scanner.close", "link" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html#close():Unit", "kind" : "abstract def"}], "shortDescription" : "Object which will be used in Table Scanning Operations.", "trait" : "com\/khulnasoft\/spark\/connector\/cql\/Scanner.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.cql.ScanResult", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.cql.ScanResult#<init>", "error" : "unsupported entity"}, {"label" : "metadata", "tail" : ": CassandraRowMetadata", "member" : "com.khulnasoft.spark.connector.cql.ScanResult.metadata", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#metadata:com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "val"}, {"label" : "rows", "tail" : ": Iterator[Row]", "member" : "com.khulnasoft.spark.connector.cql.ScanResult.rows", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#rows:Iterator[com.khulnasoft.oss.driver.api.core.cql.Row]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/cql\/ScanResult.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.cql.SessionProxy", "shortDescription" : "Wraps a Session and intercepts:", "object" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html", "members_class" : [{"label" : "invoke", "tail" : "(proxy: Any, method: Method, args: Array[AnyRef]): AnyRef", "member" : "com.khulnasoft.spark.connector.cql.SessionProxy.invoke", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#invoke(proxy:Any,method:java.lang.reflect.Method,args:Array[AnyRef]):Object", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.cql.SessionProxy#<init>", "error" : "unsupported entity"}, {"label" : "afterClose", "tail" : ": (CqlSession) ⇒ Any", "member" : "com.khulnasoft.spark.connector.cql.SessionProxy.afterClose", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#afterClose:com.khulnasoft.oss.driver.api.core.CqlSession=>Any", "kind" : "val"}, {"label" : "session", "tail" : ": CqlSession", "member" : "com.khulnasoft.spark.connector.cql.SessionProxy.session", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#session:com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "val"}, {"label" : "onClose", "tail" : "(): Any", "member" : "com.khulnasoft.spark.connector.cql.CloseHandler.onClose", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#onClose():Any", "kind" : "def"}, {"label" : "closed", "tail" : ": Boolean", "member" : "com.khulnasoft.spark.connector.cql.CloseHandler.closed", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#closed:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "wrapWithCloseAction", "tail" : "(session: CqlSession)(afterClose: (CqlSession) ⇒ Any): CqlSession", "member" : "com.khulnasoft.spark.connector.cql.SessionProxy.wrapWithCloseAction", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#wrapWithCloseAction(session:com.khulnasoft.oss.driver.api.core.CqlSession)(afterClose:com.khulnasoft.oss.driver.api.core.CqlSession=>Any):com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/cql\/SessionProxy.html", "kind" : "class"}], "org.apache.spark.sql" : [], "org" : [], "com" : [], "com.khulnasoft.spark.connector" : [{"name" : "com.khulnasoft.spark.connector.AllColumns", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html", "members_object" : [{"label" : "selectFrom", "tail" : "(table: TableDef): IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.AllColumns.selectFrom", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#selectFrom(table:com.khulnasoft.spark.connector.cql.TableDef):IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "aliases", "tail" : "(): Map[String, String]", "member" : "com.khulnasoft.spark.connector.AllColumns.aliases", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#aliases:Map[String,String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/AllColumns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.BatchSize", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html", "members_object" : [{"label" : "Automatic", "tail" : ": BytesInBatch", "member" : "com.khulnasoft.spark.connector.BatchSize.Automatic", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#Automatic:com.khulnasoft.spark.connector.BytesInBatch", "kind" : "val"}, {"label" : "intToFixedBatchSize", "tail" : "(batchSize: Int): RowsInBatch", "member" : "com.khulnasoft.spark.connector.BatchSize.intToFixedBatchSize", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#intToFixedBatchSize(batchSize:Int):com.khulnasoft.spark.connector.RowsInBatch", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/BatchSize$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/khulnasoft\/spark\/connector\/BatchSize.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.BytesInBatch", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.BytesInBatch#<init>", "error" : "unsupported entity"}, {"label" : "batchSize", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.BytesInBatch.batchSize", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#batchSize:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/BytesInBatch.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.CassandraSparkExtensions", "shortDescription" : "", "members_class" : [{"label" : "apply", "tail" : "(extensions: SparkSessionExtensions): Unit", "member" : "com.khulnasoft.spark.connector.CassandraSparkExtensions.apply", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#apply(extensions:org.apache.spark.sql.SparkSessionExtensions):Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.CassandraSparkExtensions#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#logName:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Unit) ⇒ A): (SparkSessionExtensions) ⇒ A", "member" : "scala.Function1.andThen", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ SparkSessionExtensions): (A) ⇒ Unit", "member" : "scala.Function1.compose", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/CassandraSparkExtensions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.CassandraTableScanPairRDDFunctions", "shortDescription" : "", "members_class" : [{"label" : "applyPartitioner", "tail" : "(partitioner: CassandraPartitioner[K, TokenValue, T]): CassandraTableScanRDD[(K, V)]", "member" : "com.khulnasoft.spark.connector.CassandraTableScanPairRDDFunctions.applyPartitioner", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#applyPartitioner[TokenValue,T<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[TokenValue]](partitioner:com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitioner[K,TokenValue,T]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,V)]", "kind" : "def"}, {"label" : "applyPartitionerFrom", "tail" : "(thatRdd: CassandraTableScanRDD[(K, X)]): CassandraTableScanRDD[(K, V)]", "member" : "com.khulnasoft.spark.connector.CassandraTableScanPairRDDFunctions.applyPartitionerFrom", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#applyPartitionerFrom[X](thatRdd:com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,X)]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,V)]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.CassandraTableScanPairRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanPairRDDFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.CassandraTableScanRDDFunctions", "shortDescription" : "", "members_class" : [{"label" : "keyAndApplyPartitionerFrom", "tail" : "(thatRDD: CassandraTableScanRDD[(K, X)], columnSelector: ColumnSelector)(classTag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.CassandraTableScanRDDFunctions.keyAndApplyPartitionerFrom", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#keyAndApplyPartitionerFrom[K,X](thatRDD:com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,X)],columnSelector:com.khulnasoft.spark.connector.ColumnSelector)(implicitclassTag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.CassandraTableScanRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/CassandraTableScanRDDFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.ColumnNameFunctions", "shortDescription" : "", "members_class" : [{"label" : "ttl", "tail" : "(): TTL", "member" : "com.khulnasoft.spark.connector.ColumnNameFunctions.ttl", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#ttl:com.khulnasoft.spark.connector.TTL", "kind" : "def"}, {"label" : "writeTime", "tail" : "(): WriteTime", "member" : "com.khulnasoft.spark.connector.ColumnNameFunctions.writeTime", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#writeTime:com.khulnasoft.spark.connector.WriteTime", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.ColumnNameFunctions#<init>", "error" : "unsupported entity"}, {"label" : "columnName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.ColumnNameFunctions.columnName", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#columnName:String", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/package$$ColumnNameFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.ColumnSelector", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "selectFrom", "tail" : "(table: TableDef): IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.ColumnSelector.selectFrom", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#selectFrom(table:com.khulnasoft.spark.connector.cql.TableDef):IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "abstract def"}, {"label" : "aliases", "tail" : "(): Map[String, String]", "member" : "com.khulnasoft.spark.connector.ColumnSelector.aliases", "link" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html#aliases:Map[String,String]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/ColumnSelector.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.DatasetFunctions", "shortDescription" : "Provides Cassandra-specific methods on org.apache.spark.sql.DataFrame", "members_class" : [{"label" : "createCassandraTableEx", "tail" : "(keyspaceName: String, tableName: String, partitionKeyColumns: Seq[String], clusteringKeyColumns: Seq[(String, SortingOrder)], ifNotExists: Boolean, tableOptions: Map[String, String])(connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.DatasetFunctions.createCassandraTableEx", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#createCassandraTableEx(keyspaceName:String,tableName:String,partitionKeyColumns:Seq[String],clusteringKeyColumns:Seq[(String,com.khulnasoft.spark.connector.cql.ClusteringColumn.SortingOrder)],ifNotExists:Boolean,tableOptions:Map[String,String])(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "createCassandraTable", "tail" : "(keyspaceName: String, tableName: String, partitionKeyColumns: Option[Seq[String]], clusteringKeyColumns: Option[Seq[String]])(connector: CassandraConnector): Unit", "member" : "com.khulnasoft.spark.connector.DatasetFunctions.createCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#createCassandraTable(keyspaceName:String,tableName:String,partitionKeyColumns:Option[Seq[String]],clusteringKeyColumns:Option[Seq[String]])(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector):Unit", "kind" : "def"}, {"label" : "directJoin", "tail" : "(directJoinSetting: DirectJoinSetting): Dataset[K]", "member" : "com.khulnasoft.spark.connector.DatasetFunctions.directJoin", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#directJoin(directJoinSetting:org.apache.spark.sql.cassandra.DirectJoinSetting):org.apache.spark.sql.Dataset[K]", "kind" : "def"}, {"label" : "sparkContext", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.DatasetFunctions.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#sparkContext:org.apache.spark.SparkContext", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.DatasetFunctions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/DatasetFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.DocUtil", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "com.khulnasoft.spark.connector.DocUtil.main", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/DocUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.PairRDDFunctions", "shortDescription" : "", "members_class" : [{"label" : "spanByKey", "tail" : "(): RDD[(K, Seq[V])]", "member" : "com.khulnasoft.spark.connector.PairRDDFunctions.spanByKey", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#spanByKey:org.apache.spark.rdd.RDD[(K,Seq[V])]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.PairRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/PairRDDFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.PartitionKeyColumns", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html", "members_object" : [{"label" : "selectFrom", "tail" : "(table: TableDef): IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.PartitionKeyColumns.selectFrom", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#selectFrom(table:com.khulnasoft.spark.connector.cql.TableDef):scala.collection.immutable.IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "aliases", "tail" : "(): Map[String, String]", "member" : "com.khulnasoft.spark.connector.PartitionKeyColumns.aliases", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#aliases:Map[String,String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/PartitionKeyColumns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.PrimaryKeyColumns", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html", "members_object" : [{"label" : "selectFrom", "tail" : "(table: TableDef): IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.PrimaryKeyColumns.selectFrom", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#selectFrom(table:com.khulnasoft.spark.connector.cql.TableDef):IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "aliases", "tail" : "(): Map[String, String]", "member" : "com.khulnasoft.spark.connector.PrimaryKeyColumns.aliases", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#aliases:Map[String,String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/PrimaryKeyColumns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.RDDFunctions", "shortDescription" : "Provides Cassandra-specific methods on RDD", "members_class" : [{"label" : "keyByCassandraReplica", "tail" : "(keyspaceName: String, tableName: String, partitionKeyMapper: ColumnSelector)(connector: CassandraConnector, currentType: ClassTag[T], rwf: RowWriterFactory[T]): RDD[(Set[InetAddress], T)]", "member" : "com.khulnasoft.spark.connector.RDDFunctions.keyByCassandraReplica", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#keyByCassandraReplica(keyspaceName:String,tableName:String,partitionKeyMapper:com.khulnasoft.spark.connector.ColumnSelector)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitcurrentType:scala.reflect.ClassTag[T],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):org.apache.spark.rdd.RDD[(Set[java.net.InetAddress],T)]", "kind" : "def"}, {"label" : "repartitionByCassandraReplica", "tail" : "(keyspaceName: String, tableName: String, partitionsPerHost: Int, partitionKeyMapper: ColumnSelector)(connector: CassandraConnector, currentType: ClassTag[T], rwf: RowWriterFactory[T]): CassandraPartitionedRDD[T]", "member" : "com.khulnasoft.spark.connector.RDDFunctions.repartitionByCassandraReplica", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#repartitionByCassandraReplica(keyspaceName:String,tableName:String,partitionsPerHost:Int,partitionKeyMapper:com.khulnasoft.spark.connector.ColumnSelector)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitcurrentType:scala.reflect.ClassTag[T],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionedRDD[T]", "kind" : "def"}, {"label" : "leftJoinWithCassandraTable", "tail" : "(keyspaceName: String, tableName: String, selectedColumns: ColumnSelector, joinColumns: ColumnSelector, readConf: ReadConf)(connector: CassandraConnector, newType: ClassTag[R], rrf: RowReaderFactory[R], ev: ValidRDDType[R], currentType: ClassTag[T], rwf: RowWriterFactory[T]): CassandraLeftJoinRDD[T, R]", "member" : "com.khulnasoft.spark.connector.RDDFunctions.leftJoinWithCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#leftJoinWithCassandraTable[R](keyspaceName:String,tableName:String,selectedColumns:com.khulnasoft.spark.connector.ColumnSelector,joinColumns:com.khulnasoft.spark.connector.ColumnSelector,readConf:com.khulnasoft.spark.connector.rdd.ReadConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitnewType:scala.reflect.ClassTag[R],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[R],implicitcurrentType:scala.reflect.ClassTag[T],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.rdd.CassandraLeftJoinRDD[T,R]", "kind" : "def"}, {"label" : "joinWithCassandraTable", "tail" : "(keyspaceName: String, tableName: String, selectedColumns: ColumnSelector, joinColumns: ColumnSelector, readConf: ReadConf)(connector: CassandraConnector, newType: ClassTag[R], rrf: RowReaderFactory[R], ev: ValidRDDType[R], currentType: ClassTag[T], rwf: RowWriterFactory[T]): CassandraJoinRDD[T, R]", "member" : "com.khulnasoft.spark.connector.RDDFunctions.joinWithCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#joinWithCassandraTable[R](keyspaceName:String,tableName:String,selectedColumns:com.khulnasoft.spark.connector.ColumnSelector,joinColumns:com.khulnasoft.spark.connector.ColumnSelector,readConf:com.khulnasoft.spark.connector.rdd.ReadConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitnewType:scala.reflect.ClassTag[R],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[R],implicitcurrentType:scala.reflect.ClassTag[T],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):com.khulnasoft.spark.connector.rdd.CassandraJoinRDD[T,R]", "kind" : "def"}, {"label" : "spanBy", "tail" : "(f: (T) ⇒ U): RDD[(U, Iterable[T])]", "member" : "com.khulnasoft.spark.connector.RDDFunctions.spanBy", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#spanBy[U](f:T=>U):org.apache.spark.rdd.RDD[(U,Iterable[T])]", "kind" : "def"}, {"label" : "deleteFromCassandra", "tail" : "(keyspaceName: String, tableName: String, deleteColumns: ColumnSelector, keyColumns: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.RDDFunctions.deleteFromCassandra", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#deleteFromCassandra(keyspaceName:String,tableName:String,deleteColumns:com.khulnasoft.spark.connector.ColumnSelector,keyColumns:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "def"}, {"label" : "saveAsCassandraTable", "tail" : "(keyspaceName: String, tableName: String, columns: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T], columnMapper: ColumnMapper[T]): Unit", "member" : "com.khulnasoft.spark.connector.RDDFunctions.saveAsCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#saveAsCassandraTable(keyspaceName:String,tableName:String,columns:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T],implicitcolumnMapper:com.khulnasoft.spark.connector.mapper.ColumnMapper[T]):Unit", "kind" : "def"}, {"label" : "saveAsCassandraTableEx", "tail" : "(table: TableDef, columns: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.RDDFunctions.saveAsCassandraTableEx", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#saveAsCassandraTableEx(table:com.khulnasoft.spark.connector.cql.TableDef,columns:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspaceName: String, tableName: String, columns: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.RDDFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#saveToCassandra(keyspaceName:String,tableName:String,columns:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "def"}, {"label" : "sparkContext", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.RDDFunctions.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#sparkContext:org.apache.spark.SparkContext", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.RDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/RDDFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.RowsInBatch", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.RowsInBatch#<init>", "error" : "unsupported entity"}, {"label" : "batchSize", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.RowsInBatch.batchSize", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#batchSize:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/RowsInBatch.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.SomeColumns", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html", "members_object" : [{"label" : "seqToSomeColumns", "tail" : "(columns: Seq[String]): SomeColumns", "member" : "com.khulnasoft.spark.connector.SomeColumns.seqToSomeColumns", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#seqToSomeColumns(columns:Seq[String]):com.khulnasoft.spark.connector.SomeColumns", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "selectFrom", "tail" : "(table: TableDef): IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.SomeColumns.selectFrom", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#selectFrom(table:com.khulnasoft.spark.connector.cql.TableDef):IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "aliases", "tail" : "(): Map[String, String]", "member" : "com.khulnasoft.spark.connector.SomeColumns.aliases", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#aliases:Map[String,String]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.SomeColumns#<init>", "error" : "unsupported entity"}, {"label" : "columns", "tail" : ": ColumnRef*", "member" : "com.khulnasoft.spark.connector.SomeColumns.columns", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#columns:com.khulnasoft.spark.connector.ColumnRef*", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/SomeColumns.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.SparkContextFunctions", "shortDescription" : "Provides Cassandra-specific methods on SparkContext", "members_class" : [{"label" : "emptyCassandraTable", "tail" : "(keyspace: String, table: String)(connector: CassandraConnector, readConf: ReadConf, ct: ClassTag[T], rrf: RowReaderFactory[T], ev: ValidRDDType[T]): EmptyCassandraRDD[T]", "member" : "com.khulnasoft.spark.connector.SparkContextFunctions.emptyCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#emptyCassandraTable[T](keyspace:String,table:String)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitreadConf:com.khulnasoft.spark.connector.rdd.ReadConf,implicitct:scala.reflect.ClassTag[T],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[T]):com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[T]", "kind" : "def"}, {"label" : "cassandraTable", "tail" : "(keyspace: String, table: String)(connector: CassandraConnector, readConf: ReadConf, ct: ClassTag[T], rrf: RowReaderFactory[T], ev: ValidRDDType[T]): CassandraTableScanRDD[T]", "member" : "com.khulnasoft.spark.connector.SparkContextFunctions.cassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#cassandraTable[T](keyspace:String,table:String)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitreadConf:com.khulnasoft.spark.connector.rdd.ReadConf,implicitct:scala.reflect.ClassTag[T],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[T]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[T]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.SparkContextFunctions#<init>", "error" : "unsupported entity"}, {"label" : "sc", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.SparkContextFunctions.sc", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#sc:org.apache.spark.SparkContext", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/SparkContextFunctions.html", "kind" : "class"}], "scala.tools" : [], "com.khulnasoft.spark.connector.mapper" : [{"name" : "com.khulnasoft.spark.connector.mapper.DataFrameColumnMapper", "shortDescription" : "", "members_class" : [{"label" : "newTable", "tail" : "(keyspaceName: String, tableName: String, protocolVersion: ProtocolVersion): TableDef", "member" : "com.khulnasoft.spark.connector.mapper.DataFrameColumnMapper.newTable", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#newTable(keyspaceName:String,tableName:String,protocolVersion:com.khulnasoft.oss.driver.api.core.ProtocolVersion):com.khulnasoft.spark.connector.cql.TableDef", "kind" : "def"}, {"label" : "columnMapForReading", "tail" : "(struct: StructDef, selectedColumns: IndexedSeq[ColumnRef]): ColumnMapForReading", "member" : "com.khulnasoft.spark.connector.mapper.DataFrameColumnMapper.columnMapForReading", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#columnMapForReading(struct:com.khulnasoft.spark.connector.cql.StructDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.mapper.ColumnMapForReading", "kind" : "def"}, {"label" : "columnMapForWriting", "tail" : "(struct: StructDef, selectedColumns: IndexedSeq[ColumnRef]): ColumnMapForWriting", "member" : "com.khulnasoft.spark.connector.mapper.DataFrameColumnMapper.columnMapForWriting", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#columnMapForWriting(struct:com.khulnasoft.spark.connector.cql.StructDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.mapper.ColumnMapForWriting", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.mapper.DataFrameColumnMapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/mapper\/DataFrameColumnMapper.html", "kind" : "class"}], "com.khulnasoft.spark.connector.util" : [{"name" : "com.khulnasoft.spark.connector.util.BufferedIterator2", "shortDescription" : "Serves the same purpose as BufferedIterator in Scala, but its takeWhile methodproperly doesn't consume the next element.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "appendWhile", "tail" : "(p: (T) ⇒ Boolean, target: ArrayBuffer[T]): Unit", "member" : "com.khulnasoft.spark.connector.util.BufferedIterator2.appendWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#appendWhile(p:T=>Boolean,target:scala.collection.mutable.ArrayBuffer[T]):Unit", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "com.khulnasoft.spark.connector.util.BufferedIterator2.takeWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#takeWhile(p:T=>Boolean):Iterator[T]", "kind" : "def"}, {"label" : "next", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.util.BufferedIterator2.next", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#next():T", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.BufferedIterator2.hasNext", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#hasNext:Boolean", "kind" : "def"}, {"label" : "headOption", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.util.BufferedIterator2.headOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#headOption:T", "kind" : "def"}, {"label" : "head", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.util.BufferedIterator2.head", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#head:T", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.BufferedIterator2#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[T]", "member" : "scala.collection.Iterator.toStream", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.toIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[T]", "member" : "scala.collection.Iterator.toTraversable", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[T]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: (T) ⇒ Boolean): Option[T]", "member" : "scala.collection.Iterator.find", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(T, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[(T, B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.span", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.partition", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (T, B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: (T, B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filter", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.slice", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.drop", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.take", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.seq", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[T, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, T, Col[T]]): Col[T]", "member" : "scala.collection.TraversableOnce.to", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[T]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[T]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[T]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.toList", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.minBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.max", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.min", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, T) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (T, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, T) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[T, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/BufferedIterator2.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.ClassLoaderCheck", "shortDescription" : "Do not remove.", "object" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ClassLoaderCheck$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.CodecRegistryUtil", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html", "members_object" : [{"label" : "codecFor", "tail" : "(registry: CodecRegistry, cqlType: DataType, value: AnyRef): TypeCodec[AnyRef]", "member" : "com.khulnasoft.spark.connector.util.CodecRegistryUtil.codecFor", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#codecFor(registry:com.khulnasoft.oss.driver.api.core.type.codec.registry.CodecRegistry,cqlType:com.khulnasoft.oss.driver.api.core.type.DataType,value:AnyRef):com.khulnasoft.oss.driver.api.core.type.codec.TypeCodec[AnyRef]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CodecRegistryUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.ConfigCheck", "shortDescription" : "Helper class to throw exceptions if there are environment variables in the spark.cassandranamespace which don't map to Spark Cassandra Connector known properties.", "object" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html", "members_object" : [{"label" : "ConnectorConfigurationException", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.ConnectorConfigurationException", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#ConnectorConfigurationExceptionextendsException", "kind" : "class"}, {"label" : "suggestedProperties", "tail" : "(unknownProp: String, extraProps: Set[String]): Seq[String]", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.suggestedProperties", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#suggestedProperties(unknownProp:String,extraProps:Set[String]):Seq[String]", "kind" : "def"}, {"label" : "unknownProperties", "tail" : "(conf: SparkConf, extraProps: Set[String]): Seq[String]", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.unknownProperties", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#unknownProperties(conf:org.apache.spark.SparkConf,extraProps:Set[String]):Seq[String]", "kind" : "def"}, {"label" : "checkConfig", "tail" : "(conf: SparkConf): Unit", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.checkConfig", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#checkConfig(conf:org.apache.spark.SparkConf):Unit", "kind" : "def"}, {"label" : "deprecatedProperties", "tail" : ": Set[DeprecatedConfigParameter[_]]", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.deprecatedProperties", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#deprecatedProperties:scala.collection.mutable.Set[com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[_]]", "kind" : "val"}, {"label" : "validStaticPropertyNames", "tail" : ": Set[String]", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.validStaticPropertyNames", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#validStaticPropertyNames:scala.collection.mutable.Set[String]", "kind" : "val"}, {"label" : "validStaticProperties", "tail" : ": Set[ConfigParameter[_]]", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.validStaticProperties", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#validStaticProperties:scala.collection.mutable.Set[com.khulnasoft.spark.connector.util.ConfigParameter[_]]", "kind" : "val"}, {"label" : "Prefix", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.Prefix", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#Prefix:String", "kind" : "val"}, {"label" : "MatchThreshold", "tail" : ": Double", "member" : "com.khulnasoft.spark.connector.util.ConfigCheck.MatchThreshold", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#MatchThreshold:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigCheck$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.ConfigParameter", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html", "members_class" : [{"label" : "option", "tail" : "(value: Any): Map[String, String]", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.option", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#option(value:Any):Map[String,String]", "kind" : "def"}, {"label" : "sqlOptionName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.sqlOptionName", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#sqlOptionName:String", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.description", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#description:String", "kind" : "val"}, {"label" : "default", "tail" : ": T", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.default", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#default:T", "kind" : "val"}, {"label" : "section", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.section", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#section:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.name", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#name:String", "kind" : "val"}, {"label" : "sqlOption", "tail" : "(value: Any): Map[String, String]", "member" : "com.khulnasoft.spark.connector.util.DataFrameOption.sqlOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#sqlOption(value:Any):Map[String,String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(name: String, section: String, default: T, description: String): ConfigParameter[T]", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.apply", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#apply[T](name:String,section:String,default:T,description:String):com.khulnasoft.spark.connector.util.ConfigParameter[T]", "kind" : "def"}, {"label" : "names", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.names", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#names:Seq[String]", "kind" : "def"}, {"label" : "ConfObjects", "tail" : ": (WriteConf.type, ReadConf.type, ColumnTypeConf.type, CassandraSourceRelation.type, CassandraConnectorConf.type, AuthConfFactory.type, CassandraConnectionFactory.type)", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.ConfObjects", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#ConfObjects:(com.khulnasoft.spark.connector.writer.WriteConf.type,com.khulnasoft.spark.connector.rdd.ReadConf.type,com.khulnasoft.spark.connector.types.ColumnTypeConf.type,org.apache.spark.sql.cassandra.CassandraSourceRelation.type,com.khulnasoft.spark.connector.cql.CassandraConnectorConf.type,com.khulnasoft.spark.connector.cql.AuthConfFactory.type,com.khulnasoft.spark.connector.cql.CassandraConnectionFactory.type)", "kind" : "val"}, {"label" : "staticParameters", "tail" : ": Set[ConfigParameter[_]]", "member" : "com.khulnasoft.spark.connector.util.ConfigParameter.staticParameters", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#staticParameters:scala.collection.mutable.Set[com.khulnasoft.spark.connector.util.ConfigParameter[_]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/ConfigParameter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.CountingIterator", "shortDescription" : "Counts elements fetched form the underlying iterator.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): T", "member" : "com.khulnasoft.spark.connector.util.CountingIterator.next", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#next():T", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.CountingIterator.hasNext", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#hasNext:Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.util.CountingIterator.count", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#count:Int", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.CountingIterator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[T]", "member" : "scala.collection.Iterator.toStream", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.toIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[T]", "member" : "scala.collection.Iterator.toTraversable", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[T]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: (T) ⇒ Boolean): Option[T]", "member" : "scala.collection.Iterator.find", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(T, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[(T, B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.span", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.partition", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (T, B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: (T, B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filter", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.slice", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.drop", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.take", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.seq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[T, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, T, Col[T]]): Col[T]", "member" : "scala.collection.TraversableOnce.to", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[T]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[T]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[T]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.toList", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.minBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.max", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.min", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, T) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (T, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, T) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[T, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/CountingIterator.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.CqlWhereParser", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html", "members_object" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#OnceParser[+T<:<?>]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#ParseResult[+T<:<?>]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "parse", "tail" : "(cqlWhere: String): Seq[Predicate]", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.parse", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parse(cqlWhere:String):Seq[com.khulnasoft.spark.connector.util.CqlWhereParser.Predicate]", "kind" : "def"}, {"label" : "UnknownPredicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.UnknownPredicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#UnknownPredicateextendsCqlWhereParser.PredicatewithProductwithSerializable", "kind" : "case class"}, {"label" : "RangePredicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.RangePredicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#RangePredicateextendsCqlWhereParser.SingleColumnPredicatewithProductwithSerializable", "kind" : "case class"}, {"label" : "EqPredicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.EqPredicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#EqPredicateextendsCqlWhereParser.SingleColumnPredicatewithProductwithSerializable", "kind" : "case class"}, {"label" : "InListPredicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.InListPredicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#InListPredicateextendsCqlWhereParser.SingleColumnPredicatewithProductwithSerializable", "kind" : "case class"}, {"label" : "InPredicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.InPredicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#InPredicateextendsCqlWhereParser.SingleColumnPredicatewithProductwithSerializable", "kind" : "case class"}, {"label" : "SingleColumnPredicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.SingleColumnPredicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#SingleColumnPredicateextendsCqlWhereParser.Predicate", "kind" : "sealed trait"}, {"label" : "Predicate", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.Predicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#PredicateextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Identifier", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.Identifier", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#IdentifierextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ValueList", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.ValueList", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#ValueListextendsProductwithSerializable", "kind" : "case class"}, {"label" : "UUIDLiteral", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.UUIDLiteral", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#UUIDLiteralextendsCqlWhereParser.LiteralwithProductwithSerializable", "kind" : "case class"}, {"label" : "BooleanLiteral", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.BooleanLiteral", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#BooleanLiteralextendsCqlWhereParser.LiteralwithProductwithSerializable", "kind" : "case class"}, {"label" : "NumberLiteral", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.NumberLiteral", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#NumberLiteralextendsCqlWhereParser.LiteralwithProductwithSerializable", "kind" : "case class"}, {"label" : "StringLiteral", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.StringLiteral", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#StringLiteralextendsCqlWhereParser.LiteralwithProductwithSerializable", "kind" : "case class"}, {"label" : "Literal", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.Literal", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#LiteralextendsCqlWhereParser.Value", "kind" : "sealed trait"}, {"label" : "Placeholder", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.Placeholder", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#Placeholder", "kind" : "object"}, {"label" : "Value", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.Value", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#ValueextendsAnyRef", "kind" : "sealed trait"}, {"label" : "In", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.In", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#In", "kind" : "object"}, {"label" : "GreaterEqual", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.GreaterEqual", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#GreaterEqual", "kind" : "object"}, {"label" : "GreaterThan", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.GreaterThan", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#GreaterThan", "kind" : "object"}, {"label" : "LowerEqual", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.LowerEqual", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#LowerEqual", "kind" : "object"}, {"label" : "LowerThan", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.LowerThan", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#LowerThan", "kind" : "object"}, {"label" : "EqualTo", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.EqualTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#EqualTo", "kind" : "object"}, {"label" : "RelationalOperator", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.CqlWhereParser.RelationalOperator", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#RelationalOperatorextendsAnyRef", "kind" : "sealed trait"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#logName:String", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.RegexParsers.err", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#err(msg:String):RegexParsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repNM", "tail" : "(n: Int, m: Int, p: Parser[T], sep: Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repNM", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#repNM[T](n:Int,m:Int,p:Parsers.this.Parser[T],sep:Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(f: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#acceptSeq[ES](es:ES)(implicitf:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(f: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#accept[ES](es:ES)(implicitf:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/CqlWhereParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.DataFrameOption", "members_trait" : [{"label" : "sqlOption", "tail" : "(value: Any): Map[String, String]", "member" : "com.khulnasoft.spark.connector.util.DataFrameOption.sqlOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#sqlOption(value:Any):Map[String,String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sqlOptionName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.DataFrameOption.sqlOptionName", "link" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html#sqlOptionName:String", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "com\/khulnasoft\/spark\/connector\/util\/DataFrameOption.html", "kind" : "trait"}, {"name" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter", "shortDescription" : "Class representing a Config Parameter no longer in use and it's replacement if any.", "object" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html", "members_class" : [{"label" : "maybeReplace", "tail" : "(sparkConf: SparkConf): Unit", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.maybeReplace", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#maybeReplace(sparkConf:org.apache.spark.SparkConf):Unit", "kind" : "def"}, {"label" : "explanation", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.explanation", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#explanation:String", "kind" : "def"}, {"label" : "rational", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.rational", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#rational:String", "kind" : "val"}, {"label" : "deprecatedSince", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.deprecatedSince", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#deprecatedSince:String", "kind" : "val"}, {"label" : "replacementMethod", "tail" : ": (String) ⇒ String", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.replacementMethod", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#replacementMethod:String=>String", "kind" : "val"}, {"label" : "replacementParameter", "tail" : ": Option[ConfigParameter[N]]", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.replacementParameter", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#replacementParameter:Option[com.khulnasoft.spark.connector.util.ConfigParameter[N]]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.name", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#name:String", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(name: String, replacementParameter: Option[ConfigParameter[N]], replacementMethod: (String) ⇒ String, deprecatedSince: String, rational: String): DeprecatedConfigParameter[N]", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.apply", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#apply[N](name:String,replacementParameter:Option[com.khulnasoft.spark.connector.util.ConfigParameter[N]],replacementMethod:String=>String,deprecatedSince:String,rational:String):com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[N]", "kind" : "def"}, {"label" : "names", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.names", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#names:Seq[String]", "kind" : "def"}, {"label" : "deprecatedParameters", "tail" : ": Set[DeprecatedConfigParameter[_]]", "member" : "com.khulnasoft.spark.connector.util.DeprecatedConfigParameter.deprecatedParameters", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#deprecatedParameters:scala.collection.mutable.Set[com.khulnasoft.spark.connector.util.DeprecatedConfigParameter[_]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/DeprecatedConfigParameter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.JavaApiHelper", "shortDescription" : "A helper class to make it possible to access components written in Scala from Java code.", "object" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html", "members_object" : [{"label" : "none", "tail" : ": None.type", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.none", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#none:None.type", "kind" : "val"}, {"label" : "genericRowReaderFactory", "tail" : "(): RowReaderFactory[CassandraRow]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.genericRowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#genericRowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "def"}, {"label" : "javaBeanColumnMapper", "tail" : "(classTag: ClassTag[T], columnNameOverride: Map[String, String]): ColumnMapper[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.javaBeanColumnMapper", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#javaBeanColumnMapper[T](classTag:scala.reflect.ClassTag[T],columnNameOverride:java.util.Map[String,String]):com.khulnasoft.spark.connector.mapper.ColumnMapper[T]", "kind" : "def"}, {"label" : "defaultRowWriterFactory", "tail" : "(typeTag: scala.reflect.api.JavaUniverse.TypeTag[T], mapper: ColumnMapper[T]): RowWriterFactory[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.defaultRowWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#defaultRowWriterFactory[T](typeTag:reflect.runtime.universe.TypeTag[T],mapper:com.khulnasoft.spark.connector.mapper.ColumnMapper[T]):com.khulnasoft.spark.connector.writer.RowWriterFactory[T]", "kind" : "def"}, {"label" : "toScalaSeq", "tail" : "(iterable: Iterable[T]): Seq[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.toScalaSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#toScalaSeq[T](iterable:Iterable[T]):Seq[T]", "kind" : "def"}, {"label" : "toScalaImmutableSeq", "tail" : "(array: Array[T]): Seq[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.toScalaImmutableSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#toScalaImmutableSeq[T](array:Array[T]):scala.collection.immutable.Seq[T]", "kind" : "def"}, {"label" : "toScalaSeq", "tail" : "(array: Array[T]): Seq[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.toScalaSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#toScalaSeq[T](array:Array[T]):Seq[T]", "kind" : "def"}, {"label" : "toScalaMap", "tail" : "(map: Map[K, V]): Map[K, V]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.toScalaMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#toScalaMap[K,V](map:java.util.Map[K,V]):Map[K,V]", "kind" : "def"}, {"label" : "getRuntimeClass", "tail" : "(classTag: ClassTag[T]): Class[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getRuntimeClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getRuntimeClass[T](classTag:scala.reflect.ClassTag[T]):Class[T]", "kind" : "def"}, {"label" : "getRuntimeClass", "tail" : "(typeTag: scala.reflect.api.JavaUniverse.TypeTag[T]): Class[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getRuntimeClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getRuntimeClass[T](typeTag:reflect.runtime.universe.TypeTag[T]):Class[T]", "kind" : "def"}, {"label" : "valuesAsJavaCollection", "tail" : "(): ((K, IV)) ⇒ (K, Collection[V])", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.valuesAsJavaCollection", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#valuesAsJavaCollection[K,V,IV<:Iterable[V]]:((K,IV))=>(K,java.util.Collection[V])", "kind" : "def"}, {"label" : "valuesAsJavaIterable", "tail" : "(): ((K, IV)) ⇒ (K, Iterable[V])", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.valuesAsJavaIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#valuesAsJavaIterable[K,V,IV<:Iterable[V]]:((K,IV))=>(K,Iterable[V])", "kind" : "def"}, {"label" : "toScalaFunction1", "tail" : "(f: Function[T1, R]): (T1) ⇒ R", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.toScalaFunction1", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#toScalaFunction1[T1,R](f:org.apache.spark.api.java.function.Function[T1,R]):T1=>R", "kind" : "def"}, {"label" : "getClassTag2", "tail" : "(clazz: Class[_]): ClassTag[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getClassTag2", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getClassTag2[T](clazz:Class[_]):scala.reflect.ClassTag[T]", "kind" : "def"}, {"label" : "getClassTag", "tail" : "(clazz: Class[T]): ClassTag[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getClassTag", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getClassTag[T](clazz:Class[T]):scala.reflect.ClassTag[T]", "kind" : "def"}, {"label" : "getTypeTag", "tail" : "(clazz: Class[_], typeParams: Array[scala.reflect.api.JavaUniverse.TypeTag[_]]): scala.reflect.api.JavaUniverse.TypeTag[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getTypeTag", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getTypeTag[T](clazz:Class[_],typeParams:Array[reflect.runtime.universe.TypeTag[_]]):reflect.runtime.universe.TypeTag[T]", "kind" : "def"}, {"label" : "getTypeTag", "tail" : "(clazz: Class[_], typeParams: scala.reflect.api.JavaUniverse.TypeTag[_]*): scala.reflect.api.JavaUniverse.TypeTag[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getTypeTag", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getTypeTag[T](clazz:Class[_],typeParams:reflect.runtime.universe.TypeTag[_]*):reflect.runtime.universe.TypeTag[T]", "kind" : "def"}, {"label" : "getTypeTag", "tail" : "(clazz: Class[T]): scala.reflect.api.JavaUniverse.TypeTag[T]", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.getTypeTag", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getTypeTag[T](clazz:Class[T]):reflect.runtime.universe.TypeTag[T]", "kind" : "def"}, {"label" : "mirror", "tail" : "(): Mirror", "member" : "com.khulnasoft.spark.connector.util.JavaApiHelper.mirror", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#mirror:reflect.runtime.universe.Mirror", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/JavaApiHelper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html", "members_object" : [{"label" : "∪", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.∪", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#∪[T,U]=com.khulnasoft.spark.connector.util.MagicalTypeTricks.¬[com.khulnasoft.spark.connector.util.MagicalTypeTricks.¬[T]withcom.khulnasoft.spark.connector.util.MagicalTypeTricks.¬[U]]", "kind" : "type"}, {"label" : "λ", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.λ", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#λ[A]=com.khulnasoft.spark.connector.util.MagicalTypeTricks.¬[com.khulnasoft.spark.connector.util.MagicalTypeTricks.¬[A]]", "kind" : "type"}, {"label" : "¬", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.¬", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#¬[A]=A=>Nothing", "kind" : "type"}, {"label" : "nsubAmbiguity2", "tail" : "(): IsNotSubclassOf[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.nsubAmbiguity2", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#nsubAmbiguity2[A,B>:A]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[A,B]", "kind" : "implicit def"}, {"label" : "nsubAmbiguity1", "tail" : "(): IsNotSubclassOf[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.nsubAmbiguity1", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#nsubAmbiguity1[A,B>:A]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[A,B]", "kind" : "implicit def"}, {"label" : "nsub", "tail" : "(): IsNotSubclassOf[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.nsub", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#nsub[A,B]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf[A,B]", "kind" : "implicit def"}, {"label" : "IsNotSubclassOf", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotSubclassOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#IsNotSubclassOf[A,B]extendsAnyRef", "kind" : "trait"}, {"label" : "neqAmbiguity2", "tail" : "(): IsNotEqualTo[A, A]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.neqAmbiguity2", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#neqAmbiguity2[A]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotEqualTo[A,A]", "kind" : "implicit def"}, {"label" : "neqAmbiguity1", "tail" : "(): IsNotEqualTo[A, A]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.neqAmbiguity1", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#neqAmbiguity1[A]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotEqualTo[A,A]", "kind" : "implicit def"}, {"label" : "neq", "tail" : "(): IsNotEqualTo[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.neq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#neq[A,B]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotEqualTo[A,B]", "kind" : "implicit def"}, {"label" : "IsNotEqualTo", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.IsNotEqualTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#IsNotEqualTo[A,B]extendsAnyRef", "kind" : "trait"}, {"label" : "doesntHaveImplicitAmbiguity2", "tail" : "(ev: B): DoesntHaveImplicit[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.doesntHaveImplicitAmbiguity2", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#doesntHaveImplicitAmbiguity2[A,B](implicitev:B):com.khulnasoft.spark.connector.util.MagicalTypeTricks.DoesntHaveImplicit[A,B]", "kind" : "implicit def"}, {"label" : "doesntHaveImplicitAmbiguity1", "tail" : "(ev: B): DoesntHaveImplicit[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.doesntHaveImplicitAmbiguity1", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#doesntHaveImplicitAmbiguity1[A,B](implicitev:B):com.khulnasoft.spark.connector.util.MagicalTypeTricks.DoesntHaveImplicit[A,B]", "kind" : "implicit def"}, {"label" : "doesntHaveImplicit", "tail" : "(): DoesntHaveImplicit[A, B]", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.doesntHaveImplicit", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#doesntHaveImplicit[A,B]:com.khulnasoft.spark.connector.util.MagicalTypeTricks.DoesntHaveImplicit[A,B]", "kind" : "implicit def"}, {"label" : "DoesntHaveImplicit", "tail" : "", "member" : "com.khulnasoft.spark.connector.util.MagicalTypeTricks.DoesntHaveImplicit", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#DoesntHaveImplicit[A,B]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MagicalTypeTricks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.MergeJoinIterator", "shortDescription" : "An iterator that preforms a mergeJoin between two ordered iterators joining on a given key.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): (K, Seq[L], Seq[R])", "member" : "com.khulnasoft.spark.connector.util.MergeJoinIterator.next", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#next():(K,Seq[L],Seq[R])", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.MergeJoinIterator.hasNext", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#hasNext:Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.MergeJoinIterator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.toStream", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.toIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.toTraversable", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[(K, Seq[L], Seq[R])], Iterator[(K, Seq[L], Seq[R])])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Option[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.find", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, Seq[L], Seq[R])) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[((K, Seq[L], Seq[R]), Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[((K, Seq[L], Seq[R]), B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): (Iterator[(K, Seq[L], Seq[R])], Iterator[(K, Seq[L], Seq[R])])", "member" : "scala.collection.Iterator.span", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): (Iterator[(K, Seq[L], Seq[R])], Iterator[(K, Seq[L], Seq[R])])", "member" : "scala.collection.Iterator.partition", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((K, Seq[L], Seq[R]), B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (K, Seq[L], Seq[R])) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(K, Seq[L], Seq[R]), B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: ((K, Seq[L], Seq[R]), B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.filter", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, Seq[L], Seq[R])) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, Seq[L], Seq[R])) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.slice", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.drop", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.take", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[(K, Seq[L], Seq[R])]", "member" : "scala.collection.Iterator.seq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(K, Seq[L], Seq[R]), (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, (K, Seq[L], Seq[R]), Col[(K, Seq[L], Seq[R])]]): Col[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.to", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.toList", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((K, Seq[L], Seq[R])) ⇒ B)(cmp: Ordering[B]): (K, Seq[L], Seq[R])", "member" : "scala.collection.TraversableOnce.minBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((K, Seq[L], Seq[R])) ⇒ B)(cmp: Ordering[B]): (K, Seq[L], Seq[R])", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): (K, Seq[L], Seq[R])", "member" : "scala.collection.TraversableOnce.max", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): (K, Seq[L], Seq[R])", "member" : "scala.collection.TraversableOnce.min", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, (K, Seq[L], Seq[R])) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((K, Seq[L], Seq[R]), B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (K, Seq[L], Seq[R])) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((K, Seq[L], Seq[R]), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (K, Seq[L], Seq[R])) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((K, Seq[L], Seq[R]), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (K, Seq[L], Seq[R])) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((K, Seq[L], Seq[R]), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (K, Seq[L], Seq[R])) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(K, Seq[L], Seq[R]), B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((K, Seq[L], Seq[R])) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[(K, Seq[L], Seq[R])]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/MergeJoinIterator.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.MultiMergeJoinIterator", "shortDescription" : "An iterator that preforms a mergeJoin among ordered iterators joining on a given key.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): Seq[Seq[T]]", "member" : "com.khulnasoft.spark.connector.util.MultiMergeJoinIterator.next", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#next():Seq[Seq[T]]", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.MultiMergeJoinIterator.hasNext", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#hasNext:Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.MultiMergeJoinIterator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.toStream", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.toIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.toTraversable", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[Seq[Seq[T]]], Iterator[Seq[Seq[T]]])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Option[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.find", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Seq[Seq[T]]) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(Seq[Seq[T]], Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[(Seq[Seq[T]], B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): (Iterator[Seq[Seq[T]]], Iterator[Seq[Seq[T]]])", "member" : "scala.collection.Iterator.span", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): (Iterator[Seq[Seq[T]]], Iterator[Seq[Seq[T]]])", "member" : "scala.collection.Iterator.partition", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Seq[Seq[T]], B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Seq[Seq[T]]) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Seq[Seq[T]], B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: (Seq[Seq[T]], B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.filter", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Seq[Seq[T]]) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Seq[Seq[T]]) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.slice", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.drop", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.take", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[Seq[Seq[T]]]", "member" : "scala.collection.Iterator.seq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Seq[Seq[T]], (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Seq[Seq[T]], Col[Seq[Seq[T]]]]): Col[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.to", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.toList", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ B)(cmp: Ordering[B]): Seq[Seq[T]]", "member" : "scala.collection.TraversableOnce.minBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Seq[Seq[T]]) ⇒ B)(cmp: Ordering[B]): Seq[Seq[T]]", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Seq[Seq[T]]", "member" : "scala.collection.TraversableOnce.max", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Seq[Seq[T]]", "member" : "scala.collection.TraversableOnce.min", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Seq[Seq[T]]) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Seq[Seq[T]], B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Seq[Seq[T]]) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Seq[Seq[T]], B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Seq[Seq[T]]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Seq[Seq[T]], B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Seq[Seq[T]]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Seq[Seq[T]], B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Seq[Seq[T]]) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Seq[Seq[T]], B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Seq[Seq[T]]) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Seq[Seq[T]]]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/MultiMergeJoinIterator.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.PatitionKeyTools", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/PatitionKeyTools$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.PriorityHashMap", "shortDescription" : "A HashMap and a PriorityQueue hybrid.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#toString():String", "kind" : "def"}, {"label" : "dequeue", "tail" : "(): V", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.dequeue", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#dequeue():V", "kind" : "def"}, {"label" : "values", "tail" : "(): IndexedSeq[V]", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.values", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#values:IndexedSeq[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): IndexedSeq[K]", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.keys", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#keys:IndexedSeq[K]", "kind" : "def"}, {"label" : "headValue", "tail" : "(): V", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.headValue", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#headValue:V", "kind" : "def"}, {"label" : "headKey", "tail" : "(): K", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.headKey", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#headKey:K", "kind" : "def"}, {"label" : "remove", "tail" : "(key: K): Boolean", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.remove", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#remove(key:K):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(key: K): Boolean", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.contains", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#contains(key:K):Boolean", "kind" : "def"}, {"label" : "get", "tail" : "(key: K): Option[V]", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.get", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#get(key:K):Option[V]", "kind" : "def"}, {"label" : "apply", "tail" : "(key: K): V", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.apply", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#apply(key:K):V", "kind" : "def"}, {"label" : "put", "tail" : "(key: K, value: V): Unit", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.put", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#put(key:K,value:V):Unit", "kind" : "def"}, {"label" : "capacity", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.capacity", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#capacity:Int", "kind" : "val"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.util.PriorityHashMap.size", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#size:Int", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.PriorityHashMap#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/PriorityHashMap.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.RefBuilder", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html", "members_object" : [{"label" : "getMarkDown", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.RefBuilder.getMarkDown", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#getMarkDown():String", "kind" : "def"}, {"label" : "allConfigs", "tail" : ": Set[ConfigParameter[_]]", "member" : "com.khulnasoft.spark.connector.util.RefBuilder.allConfigs", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#allConfigs:scala.collection.mutable.Set[com.khulnasoft.spark.connector.util.ConfigParameter[_]]", "kind" : "val"}, {"label" : "HtmlTableHeader", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.RefBuilder.HtmlTableHeader", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#HtmlTableHeader:String", "kind" : "val"}, {"label" : "Footer", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.RefBuilder.Footer", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#Footer:String", "kind" : "val"}, {"label" : "Header", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.util.RefBuilder.Header", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#Header:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/RefBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.RuntimeUtil", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html", "members_object" : [{"label" : "createSparkILoop", "tail" : "(in: BufferedReader, out: PrintWriter): Scala213SparkILoop", "member" : "com.khulnasoft.spark.connector.util.RuntimeUtil.createSparkILoop", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#createSparkILoop(in:java.io.BufferedReader,out:java.io.PrintWriter):com.khulnasoft.spark.connector.util.Scala213SparkILoop", "kind" : "def"}, {"label" : "toParallelIterable", "tail" : "(iterable: Iterable[A]): ParIterable[A]", "member" : "com.khulnasoft.spark.connector.util.RuntimeUtil.toParallelIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#toParallelIterable[A](iterable:Iterable[A]):scala.collection.parallel.ParIterable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/RuntimeUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.util.Scala213SparkILoop", "shortDescription" : "", "members_class" : [{"label" : "ReplCompletion", "tail" : "", "member" : "scala.tools.nsc.interpreter.ILoop.ReplCompletion", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#ReplCompletionextendsCompletion", "kind" : "class"}, {"label" : "ILoopInterpreter", "tail" : "", "member" : "scala.tools.nsc.interpreter.ILoop.ILoopInterpreter", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#ILoopInterpreterextendsIMain", "kind" : "class"}, {"label" : "Result", "tail" : "", "member" : "scala.tools.nsc.interpreter.LoopCommands.Result", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#ResultextendsProductwithSerializable", "kind" : "case class"}, {"label" : "VarArgsCmd", "tail" : "", "member" : "scala.tools.nsc.interpreter.LoopCommands.VarArgsCmd", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#VarArgsCmdextendsLoopCommands.this.LoopCommand", "kind" : "class"}, {"label" : "LineCmd", "tail" : "", "member" : "scala.tools.nsc.interpreter.LoopCommands.LineCmd", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#LineCmdextendsLoopCommands.this.LoopCommand", "kind" : "class"}, {"label" : "NullaryCmd", "tail" : "", "member" : "scala.tools.nsc.interpreter.LoopCommands.NullaryCmd", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#NullaryCmdextendsLoopCommands.this.LoopCommand", "kind" : "class"}, {"label" : "LoopCommand", "tail" : "", "member" : "scala.tools.nsc.interpreter.LoopCommands.LoopCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#LoopCommandextendsString=>LoopCommands.this.Result", "kind" : "abstract class"}, {"label" : "run", "tail" : "(interpreterSettings: Settings): Boolean", "member" : "com.khulnasoft.spark.connector.util.Scala213SparkILoop.run", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#run(interpreterSettings:scala.tools.nsc.Settings):Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.Scala213SparkILoop#<init>", "error" : "unsupported entity"}, {"label" : "process", "tail" : "(settings: Settings): Boolean", "member" : "org.apache.spark.repl.SparkILoop.process", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#process(settings:scala.tools.nsc.Settings):Boolean", "kind" : "def"}, {"label" : "replay", "tail" : "(): Unit", "member" : "org.apache.spark.repl.SparkILoop.replay", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#replay():Unit", "kind" : "def"}, {"label" : "resetCommand", "tail" : "(line: String): Unit", "member" : "org.apache.spark.repl.SparkILoop.resetCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#resetCommand(line:String):Unit", "kind" : "def"}, {"label" : "commands", "tail" : "(): List[LoopCommand]", "member" : "org.apache.spark.repl.SparkILoop.commands", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#commands:List[SparkILoop.this.LoopCommand]", "kind" : "def"}, {"label" : "printWelcome", "tail" : "(): Unit", "member" : "org.apache.spark.repl.SparkILoop.printWelcome", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#printWelcome():Unit", "kind" : "def"}, {"label" : "initializeSpark", "tail" : "(): Unit", "member" : "org.apache.spark.repl.SparkILoop.initializeSpark", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#initializeSpark():Unit", "kind" : "def"}, {"label" : "initializationCommands", "tail" : ": Seq[String]", "member" : "org.apache.spark.repl.SparkILoop.initializationCommands", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#initializationCommands:Seq[String]", "kind" : "val"}, {"label" : "chooseReader", "tail" : "(settings: Settings): InteractiveReader", "member" : "scala.tools.nsc.interpreter.ILoop.chooseReader", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#chooseReader(settings:scala.tools.nsc.Settings):scala.tools.nsc.interpreter.InteractiveReader", "kind" : "def"}, {"label" : "interpretStartingWith", "tail" : "(code: String): Option[String]", "member" : "scala.tools.nsc.interpreter.ILoop.interpretStartingWith", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#interpretStartingWith(code:String):Option[String]", "kind" : "final def"}, {"label" : "pasteCommand", "tail" : "(arg: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.pasteCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#pasteCommand(arg:String):ILoop.this.Result", "kind" : "def"}, {"label" : "command", "tail" : "(line: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.command", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#command(line:String):ILoop.this.Result", "kind" : "def"}, {"label" : "verbosity", "tail" : "(): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.verbosity", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#verbosity():Unit", "kind" : "def"}, {"label" : "asyncEcho", "tail" : "(async: Boolean, msg: ⇒ String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.asyncEcho", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#asyncEcho(async:Boolean,msg:=>String):Unit", "kind" : "def"}, {"label" : "enablePowerMode", "tail" : "(isDuringInit: Boolean): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.enablePowerMode", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#enablePowerMode(isDuringInit:Boolean):Unit", "kind" : "def"}, {"label" : "powerCmd", "tail" : "(): Result", "member" : "scala.tools.nsc.interpreter.ILoop.powerCmd", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#powerCmd():ILoop.this.Result", "kind" : "def"}, {"label" : "require", "tail" : "(arg: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.require", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#require(arg:String):Unit", "kind" : "def"}, {"label" : "addClasspath", "tail" : "(arg: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.addClasspath", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#addClasspath(arg:String):Unit", "kind" : "def"}, {"label" : "saveCommand", "tail" : "(filename: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.saveCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#saveCommand(filename:String):ILoop.this.Result", "kind" : "def"}, {"label" : "loadCommand", "tail" : "(arg: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.loadCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#loadCommand(arg:String):ILoop.this.Result", "kind" : "def"}, {"label" : "withFile", "tail" : "(filename: String)(action: (File) ⇒ A): Option[A]", "member" : "scala.tools.nsc.interpreter.ILoop.withFile", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#withFile[A](filename:String)(action:scala.reflect.io.File=>A):Option[A]", "kind" : "def"}, {"label" : "shCommand", "tail" : ": LoopCommand", "member" : "scala.tools.nsc.interpreter.ILoop.shCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#shCommand:ILoop.this.LoopCommand", "kind" : "lazy val"}, {"label" : "editCommand", "tail" : "(what: String, editor: Option[String]): Result", "member" : "scala.tools.nsc.interpreter.ILoop.editCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#editCommand(what:String,editor:Option[String]):ILoop.this.Result", "kind" : "def"}, {"label" : "editCommand", "tail" : "(what: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.editCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#editCommand(what:String):ILoop.this.Result", "kind" : "def"}, {"label" : "completionsCommand", "tail" : "(what: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.completionsCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#completionsCommand(what:String):ILoop.this.Result", "kind" : "def"}, {"label" : "lineCommand", "tail" : "(what: String): Result", "member" : "scala.tools.nsc.interpreter.ILoop.lineCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#lineCommand(what:String):ILoop.this.Result", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.reset", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#reset():Unit", "kind" : "def"}, {"label" : "replayCommand", "tail" : "(line: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.replayCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#replayCommand(line:String):Unit", "kind" : "def"}, {"label" : "interpretAllFrom", "tail" : "(file: File, verbose: Boolean): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.interpretAllFrom", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#interpretAllFrom(file:scala.reflect.io.File,verbose:Boolean):Unit", "kind" : "def"}, {"label" : "loop", "tail" : "(line: String): LineResult", "member" : "scala.tools.nsc.interpreter.ILoop.loop", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#loop(line:String):ILoop.this.LineResults.LineResult", "kind" : "final def"}, {"label" : "loop", "tail" : "(): LineResult", "member" : "scala.tools.nsc.interpreter.ILoop.loop", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#loop():ILoop.this.LineResults.LineResult", "kind" : "final def"}, {"label" : "processLine", "tail" : "(line: String): Boolean", "member" : "scala.tools.nsc.interpreter.ILoop.processLine", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#processLine(line:String):Boolean", "kind" : "def"}, {"label" : "replayQuestionMessage", "tail" : ": String", "member" : "scala.tools.nsc.interpreter.ILoop.replayQuestionMessage", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#replayQuestionMessage:String", "kind" : "val"}, {"label" : "settingsCompletion", "tail" : ": Completion", "member" : "scala.tools.nsc.interpreter.ILoop.settingsCompletion", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#settingsCompletion:scala.tools.nsc.interpreter.Completion", "kind" : "val"}, {"label" : "fileCompletion", "tail" : ": Completion", "member" : "scala.tools.nsc.interpreter.ILoop.fileCompletion", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#fileCompletion:scala.tools.nsc.interpreter.Completion", "kind" : "val"}, {"label" : "powerCommands", "tail" : ": List[LoopCommand]", "member" : "scala.tools.nsc.interpreter.ILoop.powerCommands", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#powerCommands:List[ILoop.this.LoopCommand]", "kind" : "lazy val"}, {"label" : "standardCommands", "tail" : ": List[LoopCommand]", "member" : "scala.tools.nsc.interpreter.ILoop.standardCommands", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#standardCommands:List[ILoop.this.LoopCommand]", "kind" : "lazy val"}, {"label" : "prompt", "tail" : "(): String", "member" : "scala.tools.nsc.interpreter.ILoop.prompt", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#prompt:String", "kind" : "def"}, {"label" : "searchHistory", "tail" : "(_cmdline: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.searchHistory", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#searchHistory(_cmdline:String):Unit", "kind" : "def"}, {"label" : "mumly", "tail" : "(op: ⇒ A): A", "member" : "scala.tools.nsc.interpreter.ILoop.mumly", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#mumly[A](op:=>A):A", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.echo", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#echo(msg:String):Unit", "kind" : "def"}, {"label" : "mum", "tail" : ": Boolean", "member" : "scala.tools.nsc.interpreter.ILoop.mum", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#mum:Boolean", "kind" : "var"}, {"label" : "echoAndRefresh", "tail" : "(msg: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.echoAndRefresh", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#echoAndRefresh(msg:String):Unit", "kind" : "def"}, {"label" : "historyCommand", "tail" : ": LoopCommand { def defaultLines: Int }", "member" : "scala.tools.nsc.interpreter.ILoop.historyCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#historyCommand:ILoop.this.LoopCommand{defdefaultLines:Int}", "kind" : "lazy val"}, {"label" : "createInterpreter", "tail" : "(): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.createInterpreter", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#createInterpreter():Unit", "kind" : "def"}, {"label" : "closeInterpreter", "tail" : "(): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.closeInterpreter", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#closeInterpreter():Unit", "kind" : "def"}, {"label" : "savingReader", "tail" : "(body: ⇒ T): T", "member" : "scala.tools.nsc.interpreter.ILoop.savingReader", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#savingReader[T](body:=>T):T", "kind" : "def"}, {"label" : "savingReplayStack", "tail" : "(body: ⇒ T): T", "member" : "scala.tools.nsc.interpreter.ILoop.savingReplayStack", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#savingReplayStack[T](body:=>T):T", "kind" : "def"}, {"label" : "addReplay", "tail" : "(cmd: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.addReplay", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#addReplay(cmd:String):Unit", "kind" : "def"}, {"label" : "replayCommands", "tail" : "(): List[String]", "member" : "scala.tools.nsc.interpreter.ILoop.replayCommands", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#replayCommands:List[String]", "kind" : "def"}, {"label" : "replayCommandStack", "tail" : ": List[String]", "member" : "scala.tools.nsc.interpreter.ILoop.replayCommandStack", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#replayCommandStack:List[String]", "kind" : "var"}, {"label" : "addedClasspath", "tail" : ": String", "member" : "scala.tools.nsc.interpreter.ILoop.addedClasspath", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#addedClasspath:String", "kind" : "var"}, {"label" : "history", "tail" : "(): History", "member" : "scala.tools.nsc.interpreter.ILoop.history", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#history:scala.tools.nsc.interpreter.session.History", "kind" : "def"}, {"label" : "power", "tail" : ": Power[StdReplVals]", "member" : "scala.tools.nsc.interpreter.ILoop.power", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#power:scala.tools.nsc.interpreter.Power[scala.tools.nsc.interpreter.StdReplVals]", "kind" : "lazy val"}, {"label" : "echoCommandMessage", "tail" : "(msg: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.echoCommandMessage", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#echoCommandMessage(msg:String):Unit", "kind" : "def"}, {"label" : "asyncMessage", "tail" : "(msg: String): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.asyncMessage", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#asyncMessage(msg:String):Unit", "kind" : "def"}, {"label" : "isSbt", "tail" : "(): Boolean", "member" : "scala.tools.nsc.interpreter.ILoop.isSbt", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#isSbt:Boolean", "kind" : "def"}, {"label" : "intp", "tail" : ": IMain", "member" : "scala.tools.nsc.interpreter.ILoop.intp", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#intp:scala.tools.nsc.interpreter.IMain", "kind" : "var"}, {"label" : "settings", "tail" : ": Settings", "member" : "scala.tools.nsc.interpreter.ILoop.settings", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#settings:scala.tools.nsc.Settings", "kind" : "var"}, {"label" : "in", "tail" : ": InteractiveReader", "member" : "scala.tools.nsc.interpreter.ILoop.in", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#in:scala.tools.nsc.interpreter.InteractiveReader", "kind" : "var"}, {"label" : "interpreter_=", "tail" : "(i: Interpreter): Unit", "member" : "scala.tools.nsc.interpreter.ILoop.interpreter_=", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#interpreter_=(i:scala.tools.nsc.Interpreter):Unit", "kind" : "def"}, {"label" : "interpreter", "tail" : "(): IMain", "member" : "scala.tools.nsc.interpreter.ILoop.interpreter", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#interpreter:scala.tools.nsc.interpreter.IMain", "kind" : "def"}, {"label" : "out", "tail" : ": JPrintWriter", "member" : "scala.tools.nsc.interpreter.ILoop.out", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#out:scala.tools.nsc.interpreter.JPrintWriter", "kind" : "val"}, {"label" : "colonCompletion", "tail" : "(line: String, cursor: Int): Completion", "member" : "scala.tools.nsc.interpreter.LoopCommands.colonCompletion", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#colonCompletion(line:String,cursor:Int):scala.tools.nsc.interpreter.Completion", "kind" : "def"}, {"label" : "colonCommand", "tail" : "(line: String): Result", "member" : "scala.tools.nsc.interpreter.LoopCommands.colonCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#colonCommand(line:String):LoopCommands.this.Result", "kind" : "def"}, {"label" : "ambiguousError", "tail" : "(cmd: String): Result", "member" : "scala.tools.nsc.interpreter.LoopCommands.ambiguousError", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#ambiguousError(cmd:String):LoopCommands.this.Result", "kind" : "def"}, {"label" : "helpSummary", "tail" : "(): Unit", "member" : "scala.tools.nsc.interpreter.LoopCommands.helpSummary", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#helpSummary():Unit", "kind" : "def"}, {"label" : "helpCommand", "tail" : "(line: String): Result", "member" : "scala.tools.nsc.interpreter.LoopCommands.helpCommand", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#helpCommand(line:String):LoopCommands.this.Result", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/Scala213SparkILoop.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.SpanningIterator", "shortDescription" : "An iterator that groups items having the same value of the given function (key).", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): (K, Seq[T])", "member" : "com.khulnasoft.spark.connector.util.SpanningIterator.next", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#next():(K,Seq[T])", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.SpanningIterator.hasNext", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#hasNext:Boolean", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.util.SpanningIterator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[(K, Seq[T])]", "member" : "scala.collection.Iterator.toStream", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.toIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[(K, Seq[T])]", "member" : "scala.collection.Iterator.toTraversable", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[(K, Seq[T])], Iterator[(K, Seq[T])])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Option[(K, Seq[T])]", "member" : "scala.collection.Iterator.find", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, Seq[T])) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[((K, Seq[T]), Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[((K, Seq[T]), B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): (Iterator[(K, Seq[T])], Iterator[(K, Seq[T])])", "member" : "scala.collection.Iterator.span", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): (Iterator[(K, Seq[T])], Iterator[(K, Seq[T])])", "member" : "scala.collection.Iterator.partition", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((K, Seq[T]), B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (K, Seq[T])) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(K, Seq[T]), B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: ((K, Seq[T]), B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.filter", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, Seq[T])) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, Seq[T])) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.slice", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.drop", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.take", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[(K, Seq[T])]", "member" : "scala.collection.Iterator.seq", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(K, Seq[T]), (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, (K, Seq[T]), Col[(K, Seq[T])]]): Col[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.to", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.toList", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((K, Seq[T])) ⇒ B)(cmp: Ordering[B]): (K, Seq[T])", "member" : "scala.collection.TraversableOnce.minBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((K, Seq[T])) ⇒ B)(cmp: Ordering[B]): (K, Seq[T])", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): (K, Seq[T])", "member" : "scala.collection.TraversableOnce.max", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): (K, Seq[T])", "member" : "scala.collection.TraversableOnce.min", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, (K, Seq[T])) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((K, Seq[T]), B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (K, Seq[T])) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((K, Seq[T]), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (K, Seq[T])) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((K, Seq[T]), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (K, Seq[T])) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((K, Seq[T]), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (K, Seq[T])) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(K, Seq[T]), B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((K, Seq[T])) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[(K, Seq[T])]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/util\/SpanningIterator.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.util.Threads", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html", "members_object" : [{"label" : "BlockingIOExecutionContext", "tail" : ": ExecutionContextExecutorService", "member" : "com.khulnasoft.spark.connector.util.Threads.BlockingIOExecutionContext", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#BlockingIOExecutionContext:scala.concurrent.ExecutionContextExecutorService", "kind" : "implicit val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/util\/Threads$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.khulnasoft.spark.connector.datasource" : [{"name" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader", "shortDescription" : "", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.get", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#get():org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.next", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#next():Boolean", "kind" : "def"}, {"label" : "currentRow", "tail" : ": InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.currentRow", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#currentRow:org.apache.spark.sql.catalyst.InternalRow", "kind" : "var"}, {"label" : "rowIterator", "tail" : ": Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#rowIterator:Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "val"}, {"label" : "getIterator", "tail" : "(): Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#getIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "queryFutures", "tail" : ": Iterator[SettableFuture[Iterator[(CassandraRow, InternalRow)]]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.queryFutures", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#queryFutures:Iterator[com.google.common.util.concurrent.SettableFuture[Iterator[(com.khulnasoft.spark.connector.CassandraRow,org.apache.spark.sql.catalyst.InternalRow)]]]", "kind" : "val"}, {"label" : "pairWithRight", "tail" : "(left: CassandraRow): SettableFuture[Iterator[(CassandraRow, InternalRow)]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.pairWithRight", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#pairWithRight(left:com.khulnasoft.spark.connector.CassandraRow):com.google.common.util.concurrent.SettableFuture[Iterator[(com.khulnasoft.spark.connector.CassandraRow,org.apache.spark.sql.catalyst.InternalRow)]]", "kind" : "def"}, {"label" : "requestsPerSecondRateLimiter", "tail" : ": RateLimiter", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.requestsPerSecondRateLimiter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#requestsPerSecondRateLimiter:com.khulnasoft.spark.connector.writer.RateLimiter", "kind" : "val"}, {"label" : "maybeRateLimit", "tail" : ": (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#maybeRateLimit:com.khulnasoft.oss.driver.api.core.cql.Row=>com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "val"}, {"label" : "queryExecutor", "tail" : ": QueryExecutor", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.queryExecutor", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#queryExecutor:com.khulnasoft.spark.connector.writer.QueryExecutor", "kind" : "val"}, {"label" : "rowMetadata", "tail" : ": CassandraRowMetadata", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowMetadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#rowMetadata:com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "val"}, {"label" : "bsb", "tail" : ": BoundStatementBuilder[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.bsb", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#bsb:com.khulnasoft.spark.connector.writer.BoundStatementBuilder[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "val"}, {"label" : "preparedStatement", "tail" : ": PreparedStatement", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.preparedStatement", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#preparedStatement:com.khulnasoft.oss.driver.api.core.cql.PreparedStatement", "kind" : "val"}, {"label" : "stmt", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.stmt", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#stmt:String", "kind" : "val"}, {"label" : "keyIterator", "tail" : ": Iterator[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.keyIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#keyIterator:Iterator[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "val"}, {"label" : "rowReader", "tail" : ": RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "val"}, {"label" : "rowWriter", "tail" : ": CassandraRowWriter", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#rowWriter:com.khulnasoft.spark.connector.writer.CassandraRowWriter", "kind" : "val"}, {"label" : "session", "tail" : ": CqlSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#session:com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "val"}, {"label" : "joinColumnNames", "tail" : ": IndexedSeq[ColumnName]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.joinColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#joinColumnNames:scala.collection.immutable.IndexedSeq[com.khulnasoft.spark.connector.ColumnName]", "kind" : "val"}, {"label" : "numberedInputPartition", "tail" : ": NumberedInputPartition", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.numberedInputPartition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#numberedInputPartition:com.khulnasoft.spark.connector.datasource.NumberedInputPartition", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#logName:String", "kind" : "def"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.PartitionReader.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBaseInJoinReader.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite", "shortDescription" : "", "members_case class" : [{"label" : "abort", "tail" : "(epochId: Long, messages: Array[WriterCommitMessage]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.abort", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#abort(epochId:Long,messages:Array[org.apache.spark.sql.connector.write.WriterCommitMessage]):Unit", "kind" : "def"}, {"label" : "commit", "tail" : "(epochId: Long, messages: Array[WriterCommitMessage]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.commit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#commit(epochId:Long,messages:Array[org.apache.spark.sql.connector.write.WriterCommitMessage]):Unit", "kind" : "def"}, {"label" : "useCommitCoordinator", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.useCommitCoordinator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#useCommitCoordinator():Boolean", "kind" : "def"}, {"label" : "createStreamingWriterFactory", "tail" : "(info: PhysicalWriteInfo): StreamingDataWriterFactory", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.createStreamingWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#createStreamingWriterFactory(info:org.apache.spark.sql.connector.write.PhysicalWriteInfo):org.apache.spark.sql.connector.write.streaming.StreamingDataWriterFactory", "kind" : "def"}, {"label" : "abort", "tail" : "(messages: Array[WriterCommitMessage]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.abort", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#abort(messages:Array[org.apache.spark.sql.connector.write.WriterCommitMessage]):Unit", "kind" : "def"}, {"label" : "commit", "tail" : "(messages: Array[WriterCommitMessage]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.commit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#commit(messages:Array[org.apache.spark.sql.connector.write.WriterCommitMessage]):Unit", "kind" : "def"}, {"label" : "createBatchWriterFactory", "tail" : "(info: PhysicalWriteInfo): DataWriterFactory", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.createBatchWriterFactory", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#createBatchWriterFactory(info:org.apache.spark.sql.connector.write.PhysicalWriteInfo):org.apache.spark.sql.connector.write.DataWriterFactory", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite#<init>", "error" : "unsupported entity"}, {"label" : "consolidatedConf", "tail" : ": SparkConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.consolidatedConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#consolidatedConf:org.apache.spark.SparkConf", "kind" : "val"}, {"label" : "inputSchema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.inputSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#inputSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "writeConf", "tail" : ": WriteConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.writeConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#writeConf:com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBulkWrite.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "onDataWriterCommit", "tail" : "(arg0: WriterCommitMessage): Unit", "member" : "org.apache.spark.sql.connector.write.BatchWrite.onDataWriterCommit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#onDataWriterCommit(x$1:org.apache.spark.sql.connector.write.WriterCommitMessage):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraBulkWrite.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog", "shortDescription" : "A Spark Sql Catalog for inter-operation with Cassandra", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html", "members_class" : [{"label" : "renameTable", "tail" : "(oldIdent: Identifier, newIdent: Identifier): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.renameTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#renameTable(oldIdent:org.apache.spark.sql.connector.catalog.Identifier,newIdent:org.apache.spark.sql.connector.catalog.Identifier):Unit", "kind" : "def"}, {"label" : "dropTable", "tail" : "(ident: Identifier): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.dropTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#dropTable(ident:org.apache.spark.sql.connector.catalog.Identifier):Boolean", "kind" : "def"}, {"label" : "alterTable", "tail" : "(ident: Identifier, changes: TableChange*): Table", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.alterTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#alterTable(ident:org.apache.spark.sql.connector.catalog.Identifier,changes:org.apache.spark.sql.connector.catalog.TableChange*):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"label" : "createTable", "tail" : "(ident: Identifier, schema: StructType, partitions: Array[Transform], properties: Map[String, String]): Table", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.createTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#createTable(ident:org.apache.spark.sql.connector.catalog.Identifier,schema:org.apache.spark.sql.types.StructType,partitions:Array[org.apache.spark.sql.connector.expressions.Transform],properties:java.util.Map[String,String]):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"label" : "loadTable", "tail" : "(ident: Identifier): Table", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.loadTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#loadTable(ident:org.apache.spark.sql.connector.catalog.Identifier):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"label" : "listTables", "tail" : "(namespace: Array[String]): Array[Identifier]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.listTables", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#listTables(namespace:Array[String]):Array[org.apache.spark.sql.connector.catalog.Identifier]", "kind" : "def"}, {"label" : "dropNamespace", "tail" : "(namespace: Array[String], cascade: Boolean): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.dropNamespace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#dropNamespace(namespace:Array[String],cascade:Boolean):Boolean", "kind" : "def"}, {"label" : "loadNamespaceMetadata", "tail" : "(namespace: Array[String]): Map[String, String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.loadNamespaceMetadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#loadNamespaceMetadata(namespace:Array[String]):java.util.Map[String,String]", "kind" : "def"}, {"label" : "alterNamespace", "tail" : "(namespace: Array[String], changes: NamespaceChange*): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.alterNamespace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#alterNamespace(namespace:Array[String],changes:org.apache.spark.sql.connector.catalog.NamespaceChange*):Unit", "kind" : "def"}, {"label" : "createNamespace", "tail" : "(namespace: Array[String], metadata: Map[String, String]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.createNamespace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#createNamespace(namespace:Array[String],metadata:java.util.Map[String,String]):Unit", "kind" : "def"}, {"label" : "listNamespaces", "tail" : "(namespace: Array[String]): Array[Array[String]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.listNamespaces", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#listNamespaces(namespace:Array[String]):Array[Array[String]]", "kind" : "def"}, {"label" : "listNamespaces", "tail" : "(): Array[Array[String]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.listNamespaces", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#listNamespaces():Array[Array[String]]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.name", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#name():String", "kind" : "def"}, {"label" : "initialize", "tail" : "(name: String, options: CaseInsensitiveStringMap): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.initialize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#initialize(name:String,options:org.apache.spark.sql.util.CaseInsensitiveStringMap):Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#logName:String", "kind" : "def"}, {"label" : "namespaceExists", "tail" : "(arg0: Array[String]): Boolean", "member" : "org.apache.spark.sql.connector.catalog.SupportsNamespaces.namespaceExists", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#namespaceExists(x$1:Array[String]):Boolean", "kind" : "def"}, {"label" : "purgeTable", "tail" : "(arg0: Identifier): Boolean", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.purgeTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#purgeTable(x$1:org.apache.spark.sql.connector.catalog.Identifier):Boolean", "kind" : "def"}, {"label" : "useNullableQuerySchema", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.useNullableQuerySchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#useNullableQuerySchema():Boolean", "kind" : "def"}, {"label" : "createTable", "tail" : "(arg0: Identifier, arg1: Array[Column], arg2: Array[Transform], arg3: Map[String, String]): Table", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.createTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#createTable(x$1:org.apache.spark.sql.connector.catalog.Identifier,x$2:Array[org.apache.spark.sql.connector.catalog.Column],x$3:Array[org.apache.spark.sql.connector.expressions.Transform],x$4:java.util.Map[String,String]):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"label" : "tableExists", "tail" : "(arg0: Identifier): Boolean", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.tableExists", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#tableExists(x$1:org.apache.spark.sql.connector.catalog.Identifier):Boolean", "kind" : "def"}, {"label" : "invalidateTable", "tail" : "(arg0: Identifier): Unit", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.invalidateTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#invalidateTable(x$1:org.apache.spark.sql.connector.catalog.Identifier):Unit", "kind" : "def"}, {"label" : "loadTable", "tail" : "(arg0: Identifier, arg1: Long): Table", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.loadTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#loadTable(x$1:org.apache.spark.sql.connector.catalog.Identifier,x$2:Long):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"label" : "loadTable", "tail" : "(arg0: Identifier, arg1: String): Table", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.loadTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#loadTable(x$1:org.apache.spark.sql.connector.catalog.Identifier,x$2:String):org.apache.spark.sql.connector.catalog.Table", "kind" : "def"}, {"label" : "capabilities", "tail" : "(): Set[TableCatalogCapability]", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.capabilities", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#capabilities():java.util.Set[org.apache.spark.sql.connector.catalog.TableCatalogCapability]", "kind" : "def"}, {"label" : "defaultNamespace", "tail" : "(): Array[String]", "member" : "org.apache.spark.sql.connector.catalog.CatalogPlugin.defaultNamespace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#defaultNamespace():Array[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "alterNamespace", "tail" : "(arg0: Array[String], arg1: <repeated...>[NamespaceChange]): Unit", "member" : "org.apache.spark.sql.connector.catalog.SupportsNamespaces.alterNamespace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#alterNamespace(x$1:Array[String],x$2:org.apache.spark.sql.connector.catalog.NamespaceChange*):Unit", "kind" : "abstract def"}, {"label" : "alterTable", "tail" : "(arg0: Identifier, arg1: <repeated...>[TableChange]): Table", "member" : "org.apache.spark.sql.connector.catalog.TableCatalog.alterTable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html#alterTable(x$1:org.apache.spark.sql.connector.catalog.Identifier,x$2:org.apache.spark.sql.connector.catalog.TableChange*):org.apache.spark.sql.connector.catalog.Table", "kind" : "abstract def"}], "members_object" : [{"label" : "tableMissing", "tail" : "(metadata: Metadata, namespace: Array[String], name: String): Throwable", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.tableMissing", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#tableMissing(metadata:com.khulnasoft.oss.driver.api.core.metadata.Metadata,namespace:Array[String],name:String):Throwable", "kind" : "def"}, {"label" : "namespaceMissing", "tail" : "(metadata: Metadata, namespace: Array[String]): NoSuchNamespaceException", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.namespaceMissing", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#namespaceMissing(metadata:com.khulnasoft.oss.driver.api.core.metadata.Metadata,namespace:Array[String]):org.apache.spark.sql.catalyst.analysis.NoSuchNamespaceException", "kind" : "def"}, {"label" : "checkNamespace", "tail" : "(namespace: Array[String]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.checkNamespace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#checkNamespace(namespace:Array[String]):Unit", "kind" : "def"}, {"label" : "getKeyspaceRelationMetadata", "tail" : "(ident: Identifier, keyspaceMeta: KeyspaceMetadata): Optional[RelationMetadata]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.getKeyspaceRelationMetadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#getKeyspaceRelationMetadata(ident:org.apache.spark.sql.connector.catalog.Identifier,keyspaceMeta:com.khulnasoft.oss.driver.api.core.metadata.schema.KeyspaceMetadata):java.util.Optional[com.khulnasoft.oss.driver.api.core.metadata.schema.RelationMetadata]", "kind" : "def"}, {"label" : "getRelationMetaData", "tail" : "(connector: CassandraConnector, ident: Identifier): RelationMetadata", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.getRelationMetaData", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#getRelationMetaData(connector:com.khulnasoft.spark.connector.cql.CassandraConnector,ident:org.apache.spark.sql.connector.catalog.Identifier):com.khulnasoft.oss.driver.api.core.metadata.schema.RelationMetadata", "kind" : "def"}, {"label" : "getTableMetaData", "tail" : "(connector: CassandraConnector, ident: Identifier): TableMetadata", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalog.getTableMetaData", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#getTableMetaData(connector:com.khulnasoft.spark.connector.cql.CassandraConnector,ident:org.apache.spark.sql.connector.catalog.Identifier):com.khulnasoft.oss.driver.api.core.metadata.schema.TableMetadata", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalog.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraCatalogException", "shortDescription" : "", "members_class" : [{"member" : "com.khulnasoft.spark.connector.datasource.CassandraCatalogException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCatalogException.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraCommitMessage", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.datasource.CassandraCommitMessage#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCommitMessage.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader", "shortDescription" : "Runs a COUNT(*) query instead of a request for actual rowsTakes the results and returns that many empty internal rows", "members_case class" : [{"label" : "rowIterator", "tail" : ": Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.rowIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#rowIterator:Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "val"}, {"label" : "rowReader", "tail" : ": RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader#<init>", "error" : "unsupported entity"}, {"label" : "partition", "tail" : ": CassandraPartition[Any, _ <: Token[Any]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.partition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#partition:com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition[Any,_<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Any]]", "kind" : "val"}, {"label" : "queryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.queryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#queryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraCountPartitionReader.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "getIterator", "tail" : "(): Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#getIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "readSchema", "tail" : "(): StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.readSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#readSchema():org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "estimateStatistics", "tail" : "(): Statistics", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.estimateStatistics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#estimateStatistics():org.apache.spark.sql.connector.read.Statistics", "kind" : "def"}, {"label" : "columnNames", "tail" : "(): IndexedSeq[String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#columnNames:scala.collection.immutable.IndexedSeq[String]", "kind" : "def"}, {"label" : "scanner", "tail" : ": Scanner", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.scanner", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#scanner:com.khulnasoft.spark.connector.cql.Scanner", "kind" : "val"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.get", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#get():org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.next", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#next():Boolean", "kind" : "def"}, {"label" : "lastRow", "tail" : ": InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.lastRow", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#lastRow:org.apache.spark.sql.catalyst.InternalRow", "kind" : "var"}, {"label" : "tokenRanges", "tail" : ": Iterable[CqlTokenRange[Any, _$2]] forSome {type _$2 <: Token[Any]}", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.tokenRanges", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#tokenRanges:Iterable[com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange[Any,_$2]]forSome{type_$2<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Any]}", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#logName:String", "kind" : "def"}, {"label" : "columnarSupportMode", "tail" : "(): ColumnarSupportMode", "member" : "org.apache.spark.sql.connector.read.Scan.columnarSupportMode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#columnarSupportMode():org.apache.spark.sql.connector.read.Scan.ColumnarSupportMode", "kind" : "def"}, {"label" : "reportDriverMetrics", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.reportDriverMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#reportDriverMetrics():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "supportedCustomMetrics", "tail" : "(): Array[CustomMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.supportedCustomMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#supportedCustomMetrics():Array[org.apache.spark.sql.connector.metric.CustomMetric]", "kind" : "def"}, {"label" : "toContinuousStream", "tail" : "(arg0: String): ContinuousStream", "member" : "org.apache.spark.sql.connector.read.Scan.toContinuousStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#toContinuousStream(x$1:String):org.apache.spark.sql.connector.read.streaming.ContinuousStream", "kind" : "def"}, {"label" : "toMicroBatchStream", "tail" : "(arg0: String): MicroBatchStream", "member" : "org.apache.spark.sql.connector.read.Scan.toMicroBatchStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#toMicroBatchStream(x$1:String):org.apache.spark.sql.connector.read.streaming.MicroBatchStream", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): Batch", "member" : "org.apache.spark.sql.connector.read.Scan.toBatch", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#toBatch():org.apache.spark.sql.connector.read.Batch", "kind" : "def"}, {"label" : "description", "tail" : "(): String", "member" : "org.apache.spark.sql.connector.read.Scan.description", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#description():String", "kind" : "def"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.PartitionReader.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraCountPartitionReader.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter", "shortDescription" : "", "members_case class" : [{"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#close():Unit", "kind" : "def"}, {"label" : "abort", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.abort", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#abort():Unit", "kind" : "def"}, {"label" : "commit", "tail" : "(): WriterCommitMessage", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.commit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#commit():org.apache.spark.sql.connector.write.WriterCommitMessage", "kind" : "def"}, {"label" : "write", "tail" : "(record: InternalRow): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.write", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#write(record:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter#<init>", "error" : "unsupported entity"}, {"label" : "writeConf", "tail" : ": WriteConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.writeConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#writeConf:com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "val"}, {"label" : "inputSchema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.inputSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#inputSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriter.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.write.DataWriter.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriter.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory", "shortDescription" : "", "members_case class" : [{"label" : "createWriter", "tail" : "(partitionId: Int, taskId: Long, epochId: Long): DataWriter[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory.createWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#createWriter(partitionId:Int,taskId:Long,epochId:Long):org.apache.spark.sql.connector.write.DataWriter[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "createWriter", "tail" : "(partitionId: Int, taskId: Long): DataWriter[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory.createWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#createWriter(partitionId:Int,taskId:Long):org.apache.spark.sql.connector.write.DataWriter[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory#<init>", "error" : "unsupported entity"}, {"label" : "writeConf", "tail" : ": WriteConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory.writeConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#writeConf:com.khulnasoft.spark.connector.writer.WriteConf", "kind" : "val"}, {"label" : "inputSchema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory.inputSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#inputSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraDriverDataWriterFactory.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraDriverDataWriterFactory.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin", "shortDescription" : "", "members_case class" : [{"label" : "outputPartitioning", "tail" : "(): Partitioning", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.outputPartitioning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#outputPartitioning():org.apache.spark.sql.connector.read.partitioning.Partitioning", "kind" : "def"}, {"label" : "createReaderFactory", "tail" : "(): PartitionReaderFactory", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.createReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#createReaderFactory():org.apache.spark.sql.connector.read.PartitionReaderFactory", "kind" : "def"}, {"label" : "planInputPartitions", "tail" : "(): Array[InputPartition]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.planInputPartitions", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#planInputPartitions():Array[org.apache.spark.sql.connector.read.InputPartition]", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): CassandraInJoin", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.toBatch", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#toBatch():com.khulnasoft.spark.connector.datasource.CassandraInJoin", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin#<init>", "error" : "unsupported entity"}, {"label" : "consolidatedConf", "tail" : ": SparkConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.consolidatedConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#consolidatedConf:org.apache.spark.SparkConf", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "readSchema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.readSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#readSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "cqlQueryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.cqlQueryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "inClauses", "tail" : ": Seq[In]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.inClauses", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#inClauses:Seq[org.apache.spark.sql.sources.In]", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoin.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "columnarSupportMode", "tail" : "(): ColumnarSupportMode", "member" : "org.apache.spark.sql.connector.read.Scan.columnarSupportMode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#columnarSupportMode():org.apache.spark.sql.connector.read.Scan.ColumnarSupportMode", "kind" : "def"}, {"label" : "reportDriverMetrics", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.reportDriverMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#reportDriverMetrics():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "supportedCustomMetrics", "tail" : "(): Array[CustomMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.supportedCustomMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#supportedCustomMetrics():Array[org.apache.spark.sql.connector.metric.CustomMetric]", "kind" : "def"}, {"label" : "toContinuousStream", "tail" : "(arg0: String): ContinuousStream", "member" : "org.apache.spark.sql.connector.read.Scan.toContinuousStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#toContinuousStream(x$1:String):org.apache.spark.sql.connector.read.streaming.ContinuousStream", "kind" : "def"}, {"label" : "toMicroBatchStream", "tail" : "(arg0: String): MicroBatchStream", "member" : "org.apache.spark.sql.connector.read.Scan.toMicroBatchStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#toMicroBatchStream(x$1:String):org.apache.spark.sql.connector.read.streaming.MicroBatchStream", "kind" : "def"}, {"label" : "description", "tail" : "(): String", "member" : "org.apache.spark.sql.connector.read.Scan.description", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#description():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoin.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader", "shortDescription" : "", "members_case class" : [{"label" : "rowIterator", "tail" : ": Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.rowIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#rowIterator:Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "val"}, {"label" : "rowReader", "tail" : ": RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader#<init>", "error" : "unsupported entity"}, {"label" : "partition", "tail" : ": InputPartition", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.partition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#partition:org.apache.spark.sql.connector.read.InputPartition", "kind" : "val"}, {"label" : "cqlQueryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.cqlQueryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "inClauses", "tail" : ": Seq[In]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.inClauses", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#inClauses:Seq[org.apache.spark.sql.sources.In]", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinCountReader.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.get", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#get():org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.next", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#next():Boolean", "kind" : "def"}, {"label" : "currentRow", "tail" : ": InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.currentRow", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#currentRow:org.apache.spark.sql.catalyst.InternalRow", "kind" : "var"}, {"label" : "getIterator", "tail" : "(): Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#getIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "queryFutures", "tail" : ": Iterator[SettableFuture[Iterator[(CassandraRow, InternalRow)]]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.queryFutures", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#queryFutures:Iterator[com.google.common.util.concurrent.SettableFuture[Iterator[(com.khulnasoft.spark.connector.CassandraRow,org.apache.spark.sql.catalyst.InternalRow)]]]", "kind" : "val"}, {"label" : "pairWithRight", "tail" : "(left: CassandraRow): SettableFuture[Iterator[(CassandraRow, InternalRow)]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.pairWithRight", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#pairWithRight(left:com.khulnasoft.spark.connector.CassandraRow):com.google.common.util.concurrent.SettableFuture[Iterator[(com.khulnasoft.spark.connector.CassandraRow,org.apache.spark.sql.catalyst.InternalRow)]]", "kind" : "def"}, {"label" : "requestsPerSecondRateLimiter", "tail" : ": RateLimiter", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.requestsPerSecondRateLimiter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#requestsPerSecondRateLimiter:com.khulnasoft.spark.connector.writer.RateLimiter", "kind" : "val"}, {"label" : "maybeRateLimit", "tail" : ": (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#maybeRateLimit:com.khulnasoft.oss.driver.api.core.cql.Row=>com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "val"}, {"label" : "queryExecutor", "tail" : ": QueryExecutor", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.queryExecutor", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#queryExecutor:com.khulnasoft.spark.connector.writer.QueryExecutor", "kind" : "val"}, {"label" : "rowMetadata", "tail" : ": CassandraRowMetadata", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowMetadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#rowMetadata:com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "val"}, {"label" : "bsb", "tail" : ": BoundStatementBuilder[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.bsb", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#bsb:com.khulnasoft.spark.connector.writer.BoundStatementBuilder[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "val"}, {"label" : "preparedStatement", "tail" : ": PreparedStatement", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.preparedStatement", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#preparedStatement:com.khulnasoft.oss.driver.api.core.cql.PreparedStatement", "kind" : "val"}, {"label" : "stmt", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.stmt", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#stmt:String", "kind" : "val"}, {"label" : "keyIterator", "tail" : ": Iterator[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.keyIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#keyIterator:Iterator[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "val"}, {"label" : "rowWriter", "tail" : ": CassandraRowWriter", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#rowWriter:com.khulnasoft.spark.connector.writer.CassandraRowWriter", "kind" : "val"}, {"label" : "session", "tail" : ": CqlSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#session:com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "val"}, {"label" : "joinColumnNames", "tail" : ": IndexedSeq[ColumnName]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.joinColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#joinColumnNames:scala.collection.immutable.IndexedSeq[com.khulnasoft.spark.connector.ColumnName]", "kind" : "val"}, {"label" : "numberedInputPartition", "tail" : ": NumberedInputPartition", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.numberedInputPartition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#numberedInputPartition:com.khulnasoft.spark.connector.datasource.NumberedInputPartition", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#logName:String", "kind" : "def"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.PartitionReader.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinCountReader.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader#<init>", "error" : "unsupported entity"}, {"label" : "partition", "tail" : ": InputPartition", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.partition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#partition:org.apache.spark.sql.connector.read.InputPartition", "kind" : "val"}, {"label" : "cqlQueryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.cqlQueryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "inClauses", "tail" : ": Seq[In]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.inClauses", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#inClauses:Seq[org.apache.spark.sql.sources.In]", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReader.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.get", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#get():org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.next", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#next():Boolean", "kind" : "def"}, {"label" : "currentRow", "tail" : ": InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.currentRow", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#currentRow:org.apache.spark.sql.catalyst.InternalRow", "kind" : "var"}, {"label" : "rowIterator", "tail" : ": Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#rowIterator:Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "val"}, {"label" : "getIterator", "tail" : "(): Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#getIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "queryFutures", "tail" : ": Iterator[SettableFuture[Iterator[(CassandraRow, InternalRow)]]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.queryFutures", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#queryFutures:Iterator[com.google.common.util.concurrent.SettableFuture[Iterator[(com.khulnasoft.spark.connector.CassandraRow,org.apache.spark.sql.catalyst.InternalRow)]]]", "kind" : "val"}, {"label" : "pairWithRight", "tail" : "(left: CassandraRow): SettableFuture[Iterator[(CassandraRow, InternalRow)]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.pairWithRight", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#pairWithRight(left:com.khulnasoft.spark.connector.CassandraRow):com.google.common.util.concurrent.SettableFuture[Iterator[(com.khulnasoft.spark.connector.CassandraRow,org.apache.spark.sql.catalyst.InternalRow)]]", "kind" : "def"}, {"label" : "requestsPerSecondRateLimiter", "tail" : ": RateLimiter", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.requestsPerSecondRateLimiter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#requestsPerSecondRateLimiter:com.khulnasoft.spark.connector.writer.RateLimiter", "kind" : "val"}, {"label" : "maybeRateLimit", "tail" : ": (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#maybeRateLimit:com.khulnasoft.oss.driver.api.core.cql.Row=>com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "val"}, {"label" : "queryExecutor", "tail" : ": QueryExecutor", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.queryExecutor", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#queryExecutor:com.khulnasoft.spark.connector.writer.QueryExecutor", "kind" : "val"}, {"label" : "rowMetadata", "tail" : ": CassandraRowMetadata", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowMetadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#rowMetadata:com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "val"}, {"label" : "bsb", "tail" : ": BoundStatementBuilder[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.bsb", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#bsb:com.khulnasoft.spark.connector.writer.BoundStatementBuilder[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "val"}, {"label" : "preparedStatement", "tail" : ": PreparedStatement", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.preparedStatement", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#preparedStatement:com.khulnasoft.oss.driver.api.core.cql.PreparedStatement", "kind" : "val"}, {"label" : "stmt", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.stmt", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#stmt:String", "kind" : "val"}, {"label" : "keyIterator", "tail" : ": Iterator[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.keyIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#keyIterator:Iterator[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "val"}, {"label" : "rowReader", "tail" : ": RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "val"}, {"label" : "rowWriter", "tail" : ": CassandraRowWriter", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#rowWriter:com.khulnasoft.spark.connector.writer.CassandraRowWriter", "kind" : "val"}, {"label" : "session", "tail" : ": CqlSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#session:com.khulnasoft.oss.driver.api.core.CqlSession", "kind" : "val"}, {"label" : "joinColumnNames", "tail" : ": IndexedSeq[ColumnName]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.joinColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#joinColumnNames:scala.collection.immutable.IndexedSeq[com.khulnasoft.spark.connector.ColumnName]", "kind" : "val"}, {"label" : "numberedInputPartition", "tail" : ": NumberedInputPartition", "member" : "com.khulnasoft.spark.connector.datasource.CassandraBaseInJoinReader.numberedInputPartition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#numberedInputPartition:com.khulnasoft.spark.connector.datasource.NumberedInputPartition", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#logName:String", "kind" : "def"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.PartitionReader.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReader.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory", "shortDescription" : "", "members_case class" : [{"label" : "createReader", "tail" : "(partition: InputPartition): PartitionReader[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.createReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#createReader(partition:org.apache.spark.sql.connector.read.InputPartition):org.apache.spark.sql.connector.read.PartitionReader[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory#<init>", "error" : "unsupported entity"}, {"label" : "cqlQueryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.cqlQueryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "inClauses", "tail" : ": Seq[In]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.inClauses", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#inClauses:Seq[org.apache.spark.sql.sources.In]", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraInJoinReaderFactory.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "supportColumnarReads", "tail" : "(arg0: InputPartition): Boolean", "member" : "org.apache.spark.sql.connector.read.PartitionReaderFactory.supportColumnarReads", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#supportColumnarReads(x$1:org.apache.spark.sql.connector.read.InputPartition):Boolean", "kind" : "def"}, {"label" : "createColumnarReader", "tail" : "(arg0: InputPartition): PartitionReader[ColumnarBatch]", "member" : "org.apache.spark.sql.connector.read.PartitionReaderFactory.createColumnarReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#createColumnarReader(x$1:org.apache.spark.sql.connector.read.InputPartition):org.apache.spark.sql.connector.read.PartitionReader[org.apache.spark.sql.vectorized.ColumnarBatch]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraInJoinReaderFactory.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraPartitioning", "shortDescription" : "", "members_class" : [{"member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitioning#<init>", "error" : "unsupported entity"}, {"label" : "numPartitions", "tail" : "(): Int", "member" : "org.apache.spark.sql.connector.read.partitioning.KeyGroupedPartitioning.numPartitions", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#numPartitions():Int", "kind" : "def"}, {"label" : "keys", "tail" : "(): Array[Expression]", "member" : "org.apache.spark.sql.connector.read.partitioning.KeyGroupedPartitioning.keys", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#keys():Array[org.apache.spark.sql.connector.expressions.Expression]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitioning.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase", "shortDescription" : "", "members_class" : [{"label" : "rowReader", "tail" : ": RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "val"}, {"label" : "getIterator", "tail" : "(): Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#getIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "readSchema", "tail" : "(): StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.readSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#readSchema():org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "estimateStatistics", "tail" : "(): Statistics", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.estimateStatistics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#estimateStatistics():org.apache.spark.sql.connector.read.Statistics", "kind" : "def"}, {"label" : "columnNames", "tail" : "(): IndexedSeq[String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#columnNames:scala.collection.immutable.IndexedSeq[String]", "kind" : "def"}, {"label" : "scanner", "tail" : ": Scanner", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.scanner", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#scanner:com.khulnasoft.spark.connector.cql.Scanner", "kind" : "val"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.get", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#get():org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.next", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#next():Boolean", "kind" : "def"}, {"label" : "lastRow", "tail" : ": InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.lastRow", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#lastRow:org.apache.spark.sql.catalyst.InternalRow", "kind" : "var"}, {"label" : "rowIterator", "tail" : ": Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.rowIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#rowIterator:Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "val"}, {"label" : "tokenRanges", "tail" : ": Iterable[CqlTokenRange[Any, _$2]] forSome {type _$2 <: Token[Any]}", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.tokenRanges", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#tokenRanges:Iterable[com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange[Any,_$2]]forSome{type_$2<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Any]}", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#logName:String", "kind" : "def"}, {"label" : "columnarSupportMode", "tail" : "(): ColumnarSupportMode", "member" : "org.apache.spark.sql.connector.read.Scan.columnarSupportMode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#columnarSupportMode():org.apache.spark.sql.connector.read.Scan.ColumnarSupportMode", "kind" : "def"}, {"label" : "reportDriverMetrics", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.reportDriverMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#reportDriverMetrics():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "supportedCustomMetrics", "tail" : "(): Array[CustomMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.supportedCustomMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#supportedCustomMetrics():Array[org.apache.spark.sql.connector.metric.CustomMetric]", "kind" : "def"}, {"label" : "toContinuousStream", "tail" : "(arg0: String): ContinuousStream", "member" : "org.apache.spark.sql.connector.read.Scan.toContinuousStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#toContinuousStream(x$1:String):org.apache.spark.sql.connector.read.streaming.ContinuousStream", "kind" : "def"}, {"label" : "toMicroBatchStream", "tail" : "(arg0: String): MicroBatchStream", "member" : "org.apache.spark.sql.connector.read.Scan.toMicroBatchStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#toMicroBatchStream(x$1:String):org.apache.spark.sql.connector.read.streaming.MicroBatchStream", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): Batch", "member" : "org.apache.spark.sql.connector.read.Scan.toBatch", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#toBatch():org.apache.spark.sql.connector.read.Batch", "kind" : "def"}, {"label" : "description", "tail" : "(): String", "member" : "org.apache.spark.sql.connector.read.Scan.description", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#description():String", "kind" : "def"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.PartitionReader.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "partition", "tail" : ": CassandraPartition[Any, _ <: Token[Any]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.partition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#partition:com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition[Any,_<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Any]]", "kind" : "abstract val"}, {"label" : "queryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.queryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#queryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "abstract val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "abstract val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#schema:org.apache.spark.sql.types.StructType", "kind" : "abstract val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "abstract val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "abstract val"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraPartitionReaderBase.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraScan", "shortDescription" : "", "members_case class" : [{"label" : "description", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.description", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#description():String", "kind" : "def"}, {"label" : "outputPartitioning", "tail" : "(): Partitioning", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.outputPartitioning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#outputPartitioning():org.apache.spark.sql.connector.read.partitioning.Partitioning", "kind" : "def"}, {"label" : "createReaderFactory", "tail" : "(): PartitionReaderFactory", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.createReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#createReaderFactory():org.apache.spark.sql.connector.read.PartitionReaderFactory", "kind" : "def"}, {"label" : "planInputPartitions", "tail" : "(): Array[InputPartition]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.planInputPartitions", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#planInputPartitions():Array[org.apache.spark.sql.connector.read.InputPartition]", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): Batch", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.toBatch", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#toBatch():org.apache.spark.sql.connector.read.Batch", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraScan#<init>", "error" : "unsupported entity"}, {"label" : "consolidatedConf", "tail" : ": SparkConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.consolidatedConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#consolidatedConf:org.apache.spark.SparkConf", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "readSchema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.readSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#readSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "cqlQueryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.cqlQueryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScan.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "columnarSupportMode", "tail" : "(): ColumnarSupportMode", "member" : "org.apache.spark.sql.connector.read.Scan.columnarSupportMode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#columnarSupportMode():org.apache.spark.sql.connector.read.Scan.ColumnarSupportMode", "kind" : "def"}, {"label" : "reportDriverMetrics", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.reportDriverMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#reportDriverMetrics():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "supportedCustomMetrics", "tail" : "(): Array[CustomMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.supportedCustomMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#supportedCustomMetrics():Array[org.apache.spark.sql.connector.metric.CustomMetric]", "kind" : "def"}, {"label" : "toContinuousStream", "tail" : "(arg0: String): ContinuousStream", "member" : "org.apache.spark.sql.connector.read.Scan.toContinuousStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#toContinuousStream(x$1:String):org.apache.spark.sql.connector.read.streaming.ContinuousStream", "kind" : "def"}, {"label" : "toMicroBatchStream", "tail" : "(arg0: String): MicroBatchStream", "member" : "org.apache.spark.sql.connector.read.Scan.toMicroBatchStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#toMicroBatchStream(x$1:String):org.apache.spark.sql.connector.read.streaming.MicroBatchStream", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScan.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "pushedFilters", "tail" : "(): Array[Filter]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.pushedFilters", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#pushedFilters():Array[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "build", "tail" : "(): Scan", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.build", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#build():org.apache.spark.sql.connector.read.Scan", "kind" : "def"}, {"label" : "pruneColumns", "tail" : "(requiredSchema: StructType): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.pruneColumns", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#pruneColumns(requiredSchema:org.apache.spark.sql.types.StructType):Unit", "kind" : "def"}, {"label" : "WriteTimeCapture", "tail" : ": Regex", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.WriteTimeCapture", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#WriteTimeCapture:scala.util.matching.Regex", "kind" : "val"}, {"label" : "TTLCapture", "tail" : ": Regex", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.TTLCapture", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#TTLCapture:scala.util.matching.Regex", "kind" : "val"}, {"label" : "additionalRules", "tail" : "(): Seq[CassandraPredicateRules]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.additionalRules", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#additionalRules():Seq[org.apache.spark.sql.cassandra.CassandraPredicateRules]", "kind" : "def"}, {"label" : "pushFilters", "tail" : "(filters: Array[Filter]): Array[Filter]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.pushFilters", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#pushFilters(filters:Array[org.apache.spark.sql.sources.Filter]):Array[org.apache.spark.sql.sources.Filter]", "kind" : "def"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "consolidatedConf", "tail" : ": SparkConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.consolidatedConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#consolidatedConf:org.apache.spark.SparkConf", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder#<init>", "error" : "unsupported entity"}, {"label" : "options", "tail" : ": CaseInsensitiveStringMap", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.options", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#options:org.apache.spark.sql.util.CaseInsensitiveStringMap", "kind" : "val"}, {"label" : "catalogName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.catalogName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#catalogName:String", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanBuilder.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanBuilder.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader", "shortDescription" : "Physical Scan Reader of Cassandra", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader#<init>", "error" : "unsupported entity"}, {"label" : "partition", "tail" : ": CassandraPartition[Any, _ <: Token[Any]]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader.partition", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#partition:com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartition[Any,_<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Any]]", "kind" : "val"}, {"label" : "queryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader.queryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#queryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReader.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "rowReader", "tail" : ": RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "val"}, {"label" : "getIterator", "tail" : "(): Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#getIterator():Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "readSchema", "tail" : "(): StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.readSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#readSchema():org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "estimateStatistics", "tail" : "(): Statistics", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.estimateStatistics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#estimateStatistics():org.apache.spark.sql.connector.read.Statistics", "kind" : "def"}, {"label" : "columnNames", "tail" : "(): IndexedSeq[String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#columnNames:scala.collection.immutable.IndexedSeq[String]", "kind" : "def"}, {"label" : "scanner", "tail" : ": Scanner", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.scanner", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#scanner:com.khulnasoft.spark.connector.cql.Scanner", "kind" : "val"}, {"label" : "close", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.close", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#close():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.get", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#get():org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "next", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.next", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#next():Boolean", "kind" : "def"}, {"label" : "lastRow", "tail" : ": InternalRow", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.lastRow", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#lastRow:org.apache.spark.sql.catalyst.InternalRow", "kind" : "var"}, {"label" : "rowIterator", "tail" : ": Iterator[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.rowIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#rowIterator:Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "val"}, {"label" : "tokenRanges", "tail" : ": Iterable[CqlTokenRange[Any, _$2]] forSome {type _$2 <: Token[Any]}", "member" : "com.khulnasoft.spark.connector.datasource.CassandraPartitionReaderBase.tokenRanges", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#tokenRanges:Iterable[com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange[Any,_$2]]forSome{type_$2<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[Any]}", "kind" : "val"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#logName:String", "kind" : "def"}, {"label" : "columnarSupportMode", "tail" : "(): ColumnarSupportMode", "member" : "org.apache.spark.sql.connector.read.Scan.columnarSupportMode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#columnarSupportMode():org.apache.spark.sql.connector.read.Scan.ColumnarSupportMode", "kind" : "def"}, {"label" : "reportDriverMetrics", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.reportDriverMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#reportDriverMetrics():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "supportedCustomMetrics", "tail" : "(): Array[CustomMetric]", "member" : "org.apache.spark.sql.connector.read.Scan.supportedCustomMetrics", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#supportedCustomMetrics():Array[org.apache.spark.sql.connector.metric.CustomMetric]", "kind" : "def"}, {"label" : "toContinuousStream", "tail" : "(arg0: String): ContinuousStream", "member" : "org.apache.spark.sql.connector.read.Scan.toContinuousStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#toContinuousStream(x$1:String):org.apache.spark.sql.connector.read.streaming.ContinuousStream", "kind" : "def"}, {"label" : "toMicroBatchStream", "tail" : "(arg0: String): MicroBatchStream", "member" : "org.apache.spark.sql.connector.read.Scan.toMicroBatchStream", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#toMicroBatchStream(x$1:String):org.apache.spark.sql.connector.read.streaming.MicroBatchStream", "kind" : "def"}, {"label" : "toBatch", "tail" : "(): Batch", "member" : "org.apache.spark.sql.connector.read.Scan.toBatch", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#toBatch():org.apache.spark.sql.connector.read.Batch", "kind" : "def"}, {"label" : "description", "tail" : "(): String", "member" : "org.apache.spark.sql.connector.read.Scan.description", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#description():String", "kind" : "def"}, {"label" : "currentMetricsValues", "tail" : "(): Array[CustomTaskMetric]", "member" : "org.apache.spark.sql.connector.read.PartitionReader.currentMetricsValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#currentMetricsValues():Array[org.apache.spark.sql.connector.metric.CustomTaskMetric]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReader.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory", "shortDescription" : "", "members_case class" : [{"label" : "createReader", "tail" : "(partition: InputPartition): PartitionReader[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory.createReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#createReader(partition:org.apache.spark.sql.connector.read.InputPartition):org.apache.spark.sql.connector.read.PartitionReader[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory#<init>", "error" : "unsupported entity"}, {"label" : "queryParts", "tail" : ": CqlQueryParts", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory.queryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#queryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "kind" : "val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory.readConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraScanPartitionReaderFactory.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "supportColumnarReads", "tail" : "(arg0: InputPartition): Boolean", "member" : "org.apache.spark.sql.connector.read.PartitionReaderFactory.supportColumnarReads", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#supportColumnarReads(x$1:org.apache.spark.sql.connector.read.InputPartition):Boolean", "kind" : "def"}, {"label" : "createColumnarReader", "tail" : "(arg0: InputPartition): PartitionReader[ColumnarBatch]", "member" : "org.apache.spark.sql.connector.read.PartitionReaderFactory.createColumnarReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#createColumnarReader(x$1:org.apache.spark.sql.connector.read.InputPartition):org.apache.spark.sql.connector.read.PartitionReader[org.apache.spark.sql.vectorized.ColumnarBatch]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraScanPartitionReaderFactory.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html", "members_object" : [{"label" : "mapToString", "tail" : "(m: Map[String, String]): String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.mapToString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#mapToString(m:Map[String,String]):String", "kind" : "def"}, {"label" : "optionsListToString", "tail" : "(options: List[(String, Any)]): String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.optionsListToString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#optionsListToString(options:List[(String,Any)]):String", "kind" : "def"}, {"label" : "parseMap", "tail" : "(str: String): Map[String, String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.parseMap", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#parseMap(str:String):Map[String,String]", "kind" : "def"}, {"label" : "parseProperty", "tail" : "(str: String): Any", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.parseProperty", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#parseProperty(str:String):Any", "kind" : "def"}, {"label" : "parseList", "tail" : "(str: String): List[String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.parseList", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#parseList(str:String):List[String]", "kind" : "def"}, {"label" : "toStructTypeAllNullable", "tail" : "(metadata: TableMetadata): StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.toStructTypeAllNullable", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#toStructTypeAllNullable(metadata:com.khulnasoft.oss.driver.api.core.metadata.schema.TableMetadata):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "toStructType", "tail" : "(metadata: RelationMetadata): StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.toStructType", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#toStructType(metadata:com.khulnasoft.oss.driver.api.core.metadata.schema.RelationMetadata):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "toStructField", "tail" : "(column: ColumnMetadata, nullable: Boolean): StructField", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.toStructField", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#toStructField(column:com.khulnasoft.oss.driver.api.core.metadata.schema.ColumnMetadata,nullable:Boolean):org.apache.spark.sql.types.StructField", "kind" : "def"}, {"label" : "primitiveCatalystDataType", "tail" : "(cassandraType: DataType): DataType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.primitiveCatalystDataType", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#primitiveCatalystDataType(cassandraType:com.khulnasoft.oss.driver.api.core.type.DataType):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "catalystDataType", "tail" : "(cassandraType: DataType, nullable: Boolean): DataType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.catalystDataType", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#catalystDataType(cassandraType:com.khulnasoft.oss.driver.api.core.type.DataType,nullable:Boolean):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "sparkSqlToJavaDriverType", "tail" : "(dataType: DataType, protocolVersion: ProtocolVersion): DataType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.sparkSqlToJavaDriverType", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#sparkSqlToJavaDriverType(dataType:org.apache.spark.sql.types.DataType,protocolVersion:com.khulnasoft.oss.driver.api.core.ProtocolVersion):com.khulnasoft.oss.driver.api.core.type.DataType", "kind" : "def"}, {"label" : "consolidateConfs", "tail" : "(sparkConf: SparkConf, sqlConf: Map[String, String], cluster: String, keyspace: String, userOptions: Map[String, String]): SparkConf", "member" : "com.khulnasoft.spark.connector.datasource.CassandraSourceUtil.consolidateConfs", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#consolidateConfs(sparkConf:org.apache.spark.SparkConf,sqlConf:Map[String,String],cluster:String,keyspace:String,userOptions:Map[String,String]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraSourceUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraTable", "shortDescription" : "", "members_case class" : [{"label" : "newWriteBuilder", "tail" : "(info: LogicalWriteInfo): WriteBuilder", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.newWriteBuilder", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#newWriteBuilder(info:org.apache.spark.sql.connector.write.LogicalWriteInfo):org.apache.spark.sql.connector.write.WriteBuilder", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.name", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#name():String", "kind" : "def"}, {"label" : "newScanBuilder", "tail" : "(options: CaseInsensitiveStringMap): ScanBuilder", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.newScanBuilder", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#newScanBuilder(options:org.apache.spark.sql.util.CaseInsensitiveStringMap):org.apache.spark.sql.connector.read.ScanBuilder", "kind" : "def"}, {"label" : "capabilities", "tail" : "(): Set[TableCapability]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.capabilities", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#capabilities():java.util.Set[org.apache.spark.sql.connector.catalog.TableCapability]", "kind" : "def"}, {"label" : "properties", "tail" : "(): Map[String, String]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.properties", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#properties():java.util.Map[String,String]", "kind" : "def"}, {"label" : "partitioning", "tail" : "(): Array[Transform]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.partitioning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#partitioning():Array[org.apache.spark.sql.connector.expressions.Transform]", "kind" : "def"}, {"label" : "schema", "tail" : "(): StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#schema():org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "lazy val"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraTable#<init>", "error" : "unsupported entity"}, {"label" : "optionalSchema", "tail" : ": Option[StructType]", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.optionalSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#optionalSchema:Option[org.apache.spark.sql.types.StructType]", "kind" : "val"}, {"label" : "metadata", "tail" : ": RelationMetadata", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.metadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#metadata:com.khulnasoft.oss.driver.api.core.metadata.schema.RelationMetadata", "kind" : "val"}, {"label" : "catalogName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.catalogName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#catalogName:String", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.connector", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "catalogConf", "tail" : ": CaseInsensitiveStringMap", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.catalogConf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#catalogConf:org.apache.spark.sql.util.CaseInsensitiveStringMap", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraTable.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "columns", "tail" : "(): Array[Column]", "member" : "org.apache.spark.sql.connector.catalog.Table.columns", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#columns():Array[org.apache.spark.sql.connector.catalog.Column]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraTable.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder", "shortDescription" : "", "members_case class" : [{"label" : "truncate", "tail" : "(): WriteBuilder", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.truncate", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#truncate():org.apache.spark.sql.connector.write.WriteBuilder", "kind" : "def"}, {"label" : "buildForStreaming", "tail" : "(): StreamingWrite", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.buildForStreaming", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#buildForStreaming():org.apache.spark.sql.connector.write.streaming.StreamingWrite", "kind" : "def"}, {"label" : "buildForBatch", "tail" : "(): BatchWrite", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.buildForBatch", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#buildForBatch():org.apache.spark.sql.connector.write.BatchWrite", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder#<init>", "error" : "unsupported entity"}, {"label" : "inputSchema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.inputSchema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#inputSchema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "options", "tail" : ": CaseInsensitiveStringMap", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.options", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#options:org.apache.spark.sql.util.CaseInsensitiveStringMap", "kind" : "val"}, {"label" : "catalogName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.catalogName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#catalogName:String", "kind" : "val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "com.khulnasoft.spark.connector.datasource.CassandraWriteBuilder.session", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "build", "tail" : "(): Write", "member" : "org.apache.spark.sql.connector.write.WriteBuilder.build", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#build():org.apache.spark.sql.connector.write.Write", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/CassandraWriteBuilder.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.InClauseKeyGenerator", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html", "members_object" : [{"label" : "cross", "tail" : "(iter: Iterable[Iterable[_]]): Iterable[List[_]]", "member" : "com.khulnasoft.spark.connector.datasource.InClauseKeyGenerator.cross", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#cross(iter:Iterable[Iterable[_]]):Iterable[List[_]]", "kind" : "def"}, {"label" : "getIterator", "tail" : "(index: Int, totalPartitions: Int, inClauses: Seq[In]): Iterator[CassandraRow]", "member" : "com.khulnasoft.spark.connector.datasource.InClauseKeyGenerator.getIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#getIterator(index:Int,totalPartitions:Int,inClauses:Seq[org.apache.spark.sql.sources.In]):Iterator[com.khulnasoft.spark.connector.CassandraRow]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InClauseKeyGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter", "shortDescription" : "A RowWriter that can write SparkSQL InternalRow\", schema defines thestructure of InternalRows that will be processed by this writer.", "members_class" : [{"label" : "readColumnValues", "tail" : "(row: InternalRow, buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#readColumnValues(row:org.apache.spark.sql.catalyst.InternalRow,buffer:Array[Any]):Unit", "kind" : "def"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter#<init>", "error" : "unsupported entity"}, {"label" : "selectedColumns", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter.selectedColumns", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "val"}, {"label" : "table", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter.table", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#table:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "schema", "tail" : ": StructType", "member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriter.schema", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#schema:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.InternalRowWriterFactory", "shortDescription" : "", "members_class" : [{"label" : "rowWriter", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowWriter[InternalRow]", "member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriterFactory.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#rowWriter(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.writer.RowWriter[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.InternalRowWriterFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/InternalRowWriterFactory.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.JoinHelper", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html", "members_object" : [{"label" : "maybeRateLimit", "tail" : "(readConf: ReadConf): (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.maybeRateLimit", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#maybeRateLimit(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):com.khulnasoft.oss.driver.api.core.cql.Row=>com.khulnasoft.oss.driver.api.core.cql.Row", "kind" : "def"}, {"label" : "requestsPerSecondRateLimiter", "tail" : "(readConf: ReadConf): RateLimiter", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.requestsPerSecondRateLimiter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#requestsPerSecondRateLimiter(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):com.khulnasoft.spark.connector.writer.RateLimiter", "kind" : "def"}, {"label" : "slidingPrefetchIterator", "tail" : "(it: Iterator[Future[T]], batchSize: Int): Iterator[T]", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.slidingPrefetchIterator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#slidingPrefetchIterator[T](it:Iterator[java.util.concurrent.Future[T]],batchSize:Int):Iterator[T]", "kind" : "def"}, {"label" : "getKeyBuilderStatementBuilder", "tail" : "(session: CqlSession, rowWriter: RowWriter[L], preparedStatement: PreparedStatement, whereClause: CqlWhereClause): BoundStatementBuilder[L]", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.getKeyBuilderStatementBuilder", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#getKeyBuilderStatementBuilder[L](session:com.khulnasoft.oss.driver.api.core.CqlSession,rowWriter:com.khulnasoft.spark.connector.writer.RowWriter[L],preparedStatement:com.khulnasoft.oss.driver.api.core.cql.PreparedStatement,whereClause:com.khulnasoft.spark.connector.rdd.CqlWhereClause):com.khulnasoft.spark.connector.writer.BoundStatementBuilder[L]", "kind" : "def"}, {"label" : "getCassandraRowMetadata", "tail" : "(session: CqlSession, statement: PreparedStatement, selectedColumnRefs: IndexedSeq[ColumnRef]): CassandraRowMetadata", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.getCassandraRowMetadata", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#getCassandraRowMetadata(session:com.khulnasoft.oss.driver.api.core.CqlSession,statement:com.khulnasoft.oss.driver.api.core.cql.PreparedStatement,selectedColumnRefs:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.CassandraRowMetadata", "kind" : "def"}, {"label" : "getJoinPreparedStatement", "tail" : "(session: CqlSession, queryString: String, consistencyLevel: ConsistencyLevel): PreparedStatement", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.getJoinPreparedStatement", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#getJoinPreparedStatement(session:com.khulnasoft.oss.driver.api.core.CqlSession,queryString:String,consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel):com.khulnasoft.oss.driver.api.core.cql.PreparedStatement", "kind" : "def"}, {"label" : "getJoinQueryString", "tail" : "(tableDef: TableDef, joinColumns: Seq[ColumnRef], queryParts: CqlQueryParts): String", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.getJoinQueryString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#getJoinQueryString(tableDef:com.khulnasoft.spark.connector.cql.TableDef,joinColumns:Seq[com.khulnasoft.spark.connector.ColumnRef],queryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts):String", "kind" : "def"}, {"label" : "joinColumnNames", "tail" : "(joinColumns: ColumnSelector, tableDef: TableDef): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.datasource.JoinHelper.joinColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#joinColumnNames(joinColumns:com.khulnasoft.spark.connector.ColumnSelector,tableDef:com.khulnasoft.spark.connector.cql.TableDef):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/JoinHelper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.datasource.NumberedInputPartition", "shortDescription" : "", "members_case class" : [{"member" : "com.khulnasoft.spark.connector.datasource.NumberedInputPartition#<init>", "error" : "unsupported entity"}, {"label" : "total", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.datasource.NumberedInputPartition.total", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#total:Int", "kind" : "val"}, {"label" : "index", "tail" : ": Int", "member" : "com.khulnasoft.spark.connector.datasource.NumberedInputPartition.index", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#index:Int", "kind" : "val"}, {"label" : "preferredLocations", "tail" : "(): Array[String]", "member" : "org.apache.spark.sql.connector.read.InputPartition.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#preferredLocations():Array[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/khulnasoft\/spark\/connector\/datasource\/NumberedInputPartition.html", "kind" : "case class"}, {"name" : "com.khulnasoft.spark.connector.datasource.ScanHelper", "shortDescription" : "", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html", "members_object" : [{"label" : "CqlQueryParts", "tail" : "", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#CqlQueryPartsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "getPartitionGenerator", "tail" : "(connector: CassandraConnector, tableDef: TableDef, whereClause: CqlWhereClause, minSplitCount: Int, partitionCount: Option[Int], splitSize: Long): CassandraPartitionGenerator[V, T]", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.getPartitionGenerator", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#getPartitionGenerator(connector:com.khulnasoft.spark.connector.cql.CassandraConnector,tableDef:com.khulnasoft.spark.connector.cql.TableDef,whereClause:com.khulnasoft.spark.connector.rdd.CqlWhereClause,minSplitCount:Int,partitionCount:Option[Int],splitSize:Long):com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator[com.khulnasoft.spark.connector.datasource.ScanHelper.V,com.khulnasoft.spark.connector.datasource.ScanHelper.T]", "kind" : "def"}, {"label" : "prepareScanStatement", "tail" : "(session: CqlSession, cql: String, values: Any*): BoundStatement", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.prepareScanStatement", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#prepareScanStatement(session:com.khulnasoft.oss.driver.api.core.CqlSession,cql:String,values:Any*):com.khulnasoft.oss.driver.api.core.cql.BoundStatement", "kind" : "def"}, {"label" : "containsPartitionKey", "tail" : "(tableDef: TableDef, clause: CqlWhereClause): Boolean", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.containsPartitionKey", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#containsPartitionKey(tableDef:com.khulnasoft.spark.connector.cql.TableDef,clause:com.khulnasoft.spark.connector.rdd.CqlWhereClause):Boolean", "kind" : "def"}, {"label" : "tokenRangeToCqlQuery", "tail" : "(range: CqlTokenRange[_, _], tableDef: TableDef, cqlQueryParts: CqlQueryParts): (String, Seq[Any])", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.tokenRangeToCqlQuery", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#tokenRangeToCqlQuery(range:com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange[_,_],tableDef:com.khulnasoft.spark.connector.cql.TableDef,cqlQueryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts):(String,Seq[Any])", "kind" : "def"}, {"label" : "partitionKeyStr", "tail" : "(tableDef: TableDef): String", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.partitionKeyStr", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#partitionKeyStr(tableDef:com.khulnasoft.spark.connector.cql.TableDef):String", "kind" : "def"}, {"label" : "fetchTokenRange", "tail" : "(scanner: Scanner, tableDef: TableDef, queryParts: CqlQueryParts, range: CqlTokenRange[_, _], consistencyLevel: ConsistencyLevel, fetchSize: Int): ScanResult", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.fetchTokenRange", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#fetchTokenRange(scanner:com.khulnasoft.spark.connector.cql.Scanner,tableDef:com.khulnasoft.spark.connector.cql.TableDef,queryParts:com.khulnasoft.spark.connector.datasource.ScanHelper.CqlQueryParts,range:com.khulnasoft.spark.connector.rdd.partitioner.CqlTokenRange[_,_],consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel,fetchSize:Int):com.khulnasoft.spark.connector.cql.ScanResult", "kind" : "def"}, {"label" : "T", "tail" : "", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.T", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#T=tforSome{typet<:com.khulnasoft.spark.connector.rdd.partitioner.dht.Token[com.khulnasoft.spark.connector.datasource.ScanHelper.V]}", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.V", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#V=tforSome{typet}", "kind" : "type"}, {"label" : "checkColumnsExistence", "tail" : "(columns: Seq[ColumnRef], tableDef: TableDef): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.datasource.ScanHelper.checkColumnsExistence", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#checkColumnsExistence(columns:Seq[com.khulnasoft.spark.connector.ColumnRef],tableDef:com.khulnasoft.spark.connector.cql.TableDef):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/ScanHelper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.datasource.UdtProjectionDecoder", "shortDescription" : "Helper for decoding sub selections of Cassandra UDTs.", "object" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html", "members_object" : [{"label" : "buildDataTypeDecoder", "tail" : "(dataType: DataType): (Any) ⇒ Any", "member" : "com.khulnasoft.spark.connector.datasource.UdtProjectionDecoder.buildDataTypeDecoder", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#buildDataTypeDecoder(dataType:org.apache.spark.sql.types.DataType):Any=>Any", "kind" : "def"}, {"label" : "build", "tail" : "(schema: StructType): (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.datasource.UdtProjectionDecoder.build", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#build(schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.Row=>org.apache.spark.sql.Row", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UdtProjectionDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReader", "shortDescription" : "", "members_class" : [{"label" : "neededColumns", "tail" : "(): Option[Seq[ColumnRef]]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReader.neededColumns", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#neededColumns:Option[Seq[com.khulnasoft.spark.connector.ColumnRef]]", "kind" : "def"}, {"label" : "read", "tail" : "(row: Row, rowMetaData: CassandraRowMetadata): UnsafeRow", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReader.read", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#read(row:com.khulnasoft.oss.driver.api.core.cql.Row,rowMetaData:com.khulnasoft.spark.connector.CassandraRowMetadata):org.apache.spark.sql.catalyst.expressions.UnsafeRow", "kind" : "def"}, {"label" : "projectionDecoder", "tail" : ": (Row) ⇒ Row", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReader.projectionDecoder", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#projectionDecoder:org.apache.spark.sql.Row=>org.apache.spark.sql.Row", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReader#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReader.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReaderFactory", "shortDescription" : "", "members_class" : [{"label" : "targetClass", "tail" : "(): Class[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReaderFactory.targetClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#targetClass:Class[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "def"}, {"label" : "rowReader", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowReader[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReaderFactory.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#rowReader(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.rdd.reader.RowReader[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowReaderFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowReaderFactory.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter", "shortDescription" : "A RowWriter that can write SparkSQL UnsafeRow objects.", "members_class" : [{"label" : "readColumnValues", "tail" : "(row: UnsafeRow, buffer: Array[Any]): Unit", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter.readColumnValues", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#readColumnValues(row:org.apache.spark.sql.catalyst.expressions.UnsafeRow,buffer:Array[Any]):Unit", "kind" : "def"}, {"label" : "columnNames", "tail" : ": Seq[String]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#columnNames:Seq[String]", "kind" : "val"}, {"member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter#<init>", "error" : "unsupported entity"}, {"label" : "selectedColumns", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter.selectedColumns", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "val"}, {"label" : "table", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter.table", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#table:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "val"}, {"label" : "expressions", "tail" : ": Seq[Expression]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriter.expressions", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriter.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriterFactory", "shortDescription" : "", "members_class" : [{"label" : "rowWriter", "tail" : "(table: TableDef, selectedColumns: IndexedSeq[ColumnRef]): RowWriter[UnsafeRow]", "member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriterFactory.rowWriter", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#rowWriter(table:com.khulnasoft.spark.connector.cql.TableDef,selectedColumns:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]):com.khulnasoft.spark.connector.writer.RowWriter[org.apache.spark.sql.catalyst.expressions.UnsafeRow]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.datasource.UnsafeRowWriterFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/datasource\/UnsafeRowWriterFactory.html", "kind" : "class"}], "com.khulnasoft.spark.connector.streaming" : [{"name" : "com.khulnasoft.spark.connector.streaming.CassandraStreamingRDD", "shortDescription" : "RDD representing a Cassandra table for Spark Streaming.", "members_class" : [{"label" : "rrf", "tail" : ": RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.streaming.CassandraStreamingRDD.rrf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#rrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit val"}, {"label" : "cassandraCount", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.cassandraCount", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#cassandraCount():Long", "kind" : "def"}, {"label" : "toEmptyCassandraRDD", "tail" : "(): EmptyCassandraRDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.toEmptyCassandraRDD", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#toEmptyCassandraRDD:com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[R]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.compute", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[R]", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.getPreferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.getPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.partitioner", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[R]): RDD[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.coalesce", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[R]):org.apache.spark.rdd.RDD[R]", "kind" : "def"}, {"label" : "partitionGenerator", "tail" : ": CassandraPartitionGenerator[V, T]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.partitionGenerator", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#partitionGenerator:com.khulnasoft.spark.connector.rdd.partitioner.CassandraPartitionGenerator[com.khulnasoft.spark.connector.datasource.ScanHelper.V,com.khulnasoft.spark.connector.datasource.ScanHelper.T]", "kind" : "lazy val"}, {"label" : "minimalSplitCount", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.minimalSplitCount", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#minimalSplitCount:Int", "kind" : "def"}, {"label" : "keyBy", "tail" : "()(classtag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#keyBy[K]()(implicitclasstag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(columns: ColumnRef*)(classtag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#keyBy[K](columns:com.khulnasoft.spark.connector.ColumnRef*)(implicitclasstag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"label" : "keyBy", "tail" : "(columns: ColumnSelector)(classtag: ClassTag[K], rrf: RowReaderFactory[K], rwf: RowWriterFactory[K]): CassandraTableScanRDD[(K, R)]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#keyBy[K](columns:com.khulnasoft.spark.connector.ColumnSelector)(implicitclasstag:scala.reflect.ClassTag[K],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[K],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[K]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[(K,R)]", "kind" : "def"}, {"label" : "convertTo", "tail" : "(arg0: ClassTag[B], arg1: RowReaderFactory[B]): CassandraTableScanRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.convertTo", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#convertTo[B](implicitevidence$1:scala.reflect.ClassTag[B],implicitevidence$2:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[B]):com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[B]", "kind" : "def"}, {"label" : "copy", "tail" : "(columnNames: ColumnSelector, where: CqlWhereClause, limit: Option[CassandraLimit], clusteringOrder: Option[ClusteringOrder], readConf: ReadConf, connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.copy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#copy(columnNames:com.khulnasoft.spark.connector.ColumnSelector,where:com.khulnasoft.spark.connector.rdd.CqlWhereClause,limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit],clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder],readConf:com.khulnasoft.spark.connector.rdd.ReadConf,connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraTableScanRDD.this.Self", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.Self", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#Self=com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD[R]", "kind" : "type"}, {"label" : "rowReaderFactory", "tail" : ": RowReaderFactory[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.rowReaderFactory", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#rowReaderFactory:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R]", "kind" : "implicit val"}, {"label" : "classTag", "tail" : ": ClassTag[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.classTag", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#classTag:scala.reflect.ClassTag[R]", "kind" : "implicit val"}, {"label" : "readConf", "tail" : ": ReadConf", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.readConf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#readConf:com.khulnasoft.spark.connector.rdd.ReadConf", "kind" : "val"}, {"label" : "clusteringOrder", "tail" : ": Option[ClusteringOrder]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#clusteringOrder:Option[com.khulnasoft.spark.connector.rdd.ClusteringOrder]", "kind" : "val"}, {"label" : "limit", "tail" : ": Option[CassandraLimit]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#limit:Option[com.khulnasoft.spark.connector.rdd.CassandraLimit]", "kind" : "val"}, {"label" : "where", "tail" : ": CqlWhereClause", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#where:com.khulnasoft.spark.connector.rdd.CqlWhereClause", "kind" : "val"}, {"label" : "columnNames", "tail" : ": ColumnSelector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.columnNames", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#columnNames:com.khulnasoft.spark.connector.ColumnSelector", "kind" : "val"}, {"label" : "tableName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.tableName", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#tableName:String", "kind" : "val"}, {"label" : "keyspaceName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.keyspaceName", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#keyspaceName:String", "kind" : "val"}, {"label" : "connector", "tail" : ": CassandraConnector", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.connector", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#connector:com.khulnasoft.spark.connector.cql.CassandraConnector", "kind" : "val"}, {"label" : "sc", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableScanRDD.sc", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#sc:org.apache.spark.SparkContext", "kind" : "val"}, {"label" : "verify", "tail" : "(): RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.verify", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#verify():com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "def"}, {"label" : "cassandraPartitionerClassName", "tail" : ": String", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.cassandraPartitionerClassName", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#cassandraPartitionerClassName:String", "kind" : "lazy val"}, {"label" : "narrowColumnSelection", "tail" : "(columns: Seq[ColumnRef]): Seq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.narrowColumnSelection", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#narrowColumnSelection(columns:Seq[com.khulnasoft.spark.connector.ColumnRef]):Seq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "def"}, {"label" : "selectedColumnRefs", "tail" : ": IndexedSeq[ColumnRef]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.selectedColumnRefs", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#selectedColumnRefs:IndexedSeq[com.khulnasoft.spark.connector.ColumnRef]", "kind" : "lazy val"}, {"label" : "tableDef", "tail" : ": TableDef", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.tableDef", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#tableDef:com.khulnasoft.spark.connector.cql.TableDef", "kind" : "lazy val"}, {"label" : "rowReader", "tail" : ": RowReader[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.rowReader", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#rowReader:com.khulnasoft.spark.connector.rdd.reader.RowReader[R]", "kind" : "lazy val"}, {"label" : "consistencyLevel", "tail" : "(): ConsistencyLevel", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.consistencyLevel", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#consistencyLevel:com.khulnasoft.oss.driver.api.core.ConsistencyLevel", "kind" : "def"}, {"label" : "fetchSize", "tail" : "(): Int", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.fetchSize", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#fetchSize:Int", "kind" : "def"}, {"label" : "splitSize", "tail" : "(): Long", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitSize", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#splitSize:Long", "kind" : "def"}, {"label" : "splitCount", "tail" : "(): Option[Int]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraTableRowReaderProvider.splitCount", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#splitCount:Option[Int]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10], arg12: TypeConverter[A11]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$81:scala.reflect.ClassTag[B],implicitevidence$82:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$83:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$84:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$85:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$86:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$87:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$88:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$89:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$90:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$91:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$92:com.khulnasoft.spark.connector.types.TypeConverter[A10],implicitevidence$93:com.khulnasoft.spark.connector.types.TypeConverter[A11]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9], arg11: TypeConverter[A10]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$69:scala.reflect.ClassTag[B],implicitevidence$70:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$71:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$72:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$73:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$74:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$75:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$76:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$77:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$78:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$79:com.khulnasoft.spark.connector.types.TypeConverter[A9],implicitevidence$80:com.khulnasoft.spark.connector.types.TypeConverter[A10]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8], arg10: TypeConverter[A9]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$58:scala.reflect.ClassTag[B],implicitevidence$59:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$60:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$61:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$62:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$63:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$64:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$65:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$66:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$67:com.khulnasoft.spark.connector.types.TypeConverter[A8],implicitevidence$68:com.khulnasoft.spark.connector.types.TypeConverter[A9]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7], arg9: TypeConverter[A8]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7,A8](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$48:scala.reflect.ClassTag[B],implicitevidence$49:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$50:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$51:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$52:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$53:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$54:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$55:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$56:com.khulnasoft.spark.connector.types.TypeConverter[A7],implicitevidence$57:com.khulnasoft.spark.connector.types.TypeConverter[A8]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6], arg8: TypeConverter[A7]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6,A7](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$39:scala.reflect.ClassTag[B],implicitevidence$40:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$41:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$42:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$43:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$44:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$45:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$46:com.khulnasoft.spark.connector.types.TypeConverter[A6],implicitevidence$47:com.khulnasoft.spark.connector.types.TypeConverter[A7]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5], arg7: TypeConverter[A6]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5,A6](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$31:scala.reflect.ClassTag[B],implicitevidence$32:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$33:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$34:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$35:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$36:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$37:com.khulnasoft.spark.connector.types.TypeConverter[A5],implicitevidence$38:com.khulnasoft.spark.connector.types.TypeConverter[A6]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4, A5) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4], arg6: TypeConverter[A5]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4,A5](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$26:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$27:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$28:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$29:com.khulnasoft.spark.connector.types.TypeConverter[A4],implicitevidence$30:com.khulnasoft.spark.connector.types.TypeConverter[A5]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3, A4) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3], arg5: TypeConverter[A4]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3,A4](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$20:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$21:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$22:com.khulnasoft.spark.connector.types.TypeConverter[A3],implicitevidence$23:com.khulnasoft.spark.connector.types.TypeConverter[A4]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2, A3) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2], arg4: TypeConverter[A3]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2,A3](f:(A0,A1,A2,A3)=>B)(implicitevidence$13:scala.reflect.ClassTag[B],implicitevidence$14:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$15:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$16:com.khulnasoft.spark.connector.types.TypeConverter[A2],implicitevidence$17:com.khulnasoft.spark.connector.types.TypeConverter[A3]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1, A2) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1], arg3: TypeConverter[A2]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1,A2](f:(A0,A1,A2)=>B)(implicitevidence$9:scala.reflect.ClassTag[B],implicitevidence$10:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$11:com.khulnasoft.spark.connector.types.TypeConverter[A1],implicitevidence$12:com.khulnasoft.spark.connector.types.TypeConverter[A2]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0, A1) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0], arg2: TypeConverter[A1]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0,A1](f:(A0,A1)=>B)(implicitevidence$6:scala.reflect.ClassTag[B],implicitevidence$7:com.khulnasoft.spark.connector.types.TypeConverter[A0],implicitevidence$8:com.khulnasoft.spark.connector.types.TypeConverter[A1]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "as", "tail" : "(f: (A0) ⇒ B)(arg0: ClassTag[B], arg1: TypeConverter[A0]): CassandraRDD[B]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.as", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#as[B,A0](f:A0=>B)(implicitevidence$4:scala.reflect.ClassTag[B],implicitevidence$5:com.khulnasoft.spark.connector.types.TypeConverter[A0]):com.khulnasoft.spark.connector.rdd.CassandraRDD[B]", "kind" : "def"}, {"label" : "selectedColumnNames", "tail" : "(): Seq[String]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.selectedColumnNames", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#selectedColumnNames:Seq[String]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[R]", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.take", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#take(num:Int):Array[R]", "kind" : "def"}, {"label" : "withDescOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withDescOrder", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#withDescOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withAscOrder", "tail" : "(): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withAscOrder", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#withAscOrder:CassandraRDD.this.Self", "kind" : "def"}, {"label" : "clusteringOrder", "tail" : "(order: ClusteringOrder): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.clusteringOrder", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#clusteringOrder(order:com.khulnasoft.spark.connector.rdd.ClusteringOrder):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "perPartitionLimit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.perPartitionLimit", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#perPartitionLimit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "limit", "tail" : "(rowLimit: Long): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.limit", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#limit(rowLimit:Long):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "select", "tail" : "(columns: ColumnRef*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.select", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#select(columns:com.khulnasoft.spark.connector.ColumnRef*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "where", "tail" : "(cql: String, values: Any*): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.where", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#where(cql:String,values:Any*):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withConnector", "tail" : "(connector: CassandraConnector): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withConnector", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#withConnector(connector:com.khulnasoft.spark.connector.cql.CassandraConnector):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "withReadConf", "tail" : "(readConf: ReadConf): Self", "member" : "com.khulnasoft.spark.connector.rdd.CassandraRDD.withReadConf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#withReadConf(readConf:com.khulnasoft.spark.connector.rdd.ReadConf):CassandraRDD.this.Self", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): org.apache.spark.rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[R]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#parent[U](j:Int)(implicitevidence$37:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#firstParent[U](implicitevidence$36:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[R]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (R) ⇒ K): RDD[(K, R)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.min", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[R]): R", "member" : "org.apache.spark.rdd.RDD.max", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[R]): Array[R]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): R", "member" : "org.apache.spark.rdd.RDD.first", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#first():T", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(R, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[R]): PartialResult[Map[R, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[R]): Map[R, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int, finalAggregateOnExecutor: Boolean)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#treeAggregate[U](zeroValue:U,seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int,finalAggregateOnExecutor:Boolean)(implicitevidence$35:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, R) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$33:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: R)(op: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (R, R) ⇒ R, depth: Int): R", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (R, R) ⇒ R): R", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], p: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$32:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[R]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[R]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (R) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$28:scala.reflect.ClassTag[B],implicitevidence$29:scala.reflect.ClassTag[C],implicitevidence$30:scala.reflect.ClassTag[D],implicitevidence$31:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$24:scala.reflect.ClassTag[B],implicitevidence$25:scala.reflect.ClassTag[C],implicitevidence$26:scala.reflect.ClassTag[D],implicitevidence$27:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$21:scala.reflect.ClassTag[B],implicitevidence$22:scala.reflect.ClassTag[C],implicitevidence$23:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$18:scala.reflect.ClassTag[B],implicitevidence$19:scala.reflect.ClassTag[C],implicitevidence$20:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[R], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$13:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "zipPartitionsWithEvaluator", "tail" : "(rdd2: RDD[R], evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.zipPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#zipPartitionsWithEvaluator[U](rdd2:org.apache.spark.rdd.RDD[T],evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithEvaluator", "tail" : "(evaluatorFactory: PartitionEvaluatorFactory[R, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithEvaluator", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#mapPartitionsWithEvaluator[U](evaluatorFactory:org.apache.spark.PartitionEvaluatorFactory[T,U])(implicitevidence$10:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[R]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (R, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (R) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[R])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(R, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[R]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], numPartitions: Int): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R], partitioner: Partitioner)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (R) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[R]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[R]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[R]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[R]): RDD[R]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (R) ⇒ Boolean): RDD[R]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (R) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[R]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CassandraStreamingRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/streaming\/CassandraStreamingRDD.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions", "shortDescription" : "", "members_class" : [{"label" : "joinWithCassandraTable", "tail" : "(keyspaceName: String, tableName: String, selectedColumns: ColumnSelector, joinColumns: ColumnSelector)(connector: CassandraConnector, newType: ClassTag[R], rrf: RowReaderFactory[R], ev: ValidRDDType[R], currentType: ClassTag[T], rwf: RowWriterFactory[T]): DStream[(T, R)]", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.joinWithCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#joinWithCassandraTable[R](keyspaceName:String,tableName:String,selectedColumns:com.khulnasoft.spark.connector.ColumnSelector,joinColumns:com.khulnasoft.spark.connector.ColumnSelector)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitnewType:scala.reflect.ClassTag[R],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[R],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[R],implicitcurrentType:scala.reflect.ClassTag[T],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):org.apache.spark.streaming.dstream.DStream[(T,R)]", "kind" : "def"}, {"label" : "repartitionByCassandraReplica", "tail" : "(keyspaceName: String, tableName: String, partitionsPerHost: Int, partitionKeyMapper: ColumnSelector)(connector: CassandraConnector, currentType: ClassTag[T], rwf: RowWriterFactory[T]): DStream[T]", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.repartitionByCassandraReplica", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#repartitionByCassandraReplica(keyspaceName:String,tableName:String,partitionsPerHost:Int,partitionKeyMapper:com.khulnasoft.spark.connector.ColumnSelector)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitcurrentType:scala.reflect.ClassTag[T],implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):org.apache.spark.streaming.dstream.DStream[T]", "kind" : "def"}, {"label" : "deleteFromCassandra", "tail" : "(keyspaceName: String, tableName: String, deleteColumns: ColumnSelector, keyColumns: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.deleteFromCassandra", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#deleteFromCassandra(keyspaceName:String,tableName:String,deleteColumns:com.khulnasoft.spark.connector.ColumnSelector,keyColumns:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "def"}, {"label" : "saveToCassandra", "tail" : "(keyspaceName: String, tableName: String, columnNames: ColumnSelector, writeConf: WriteConf)(connector: CassandraConnector, rwf: RowWriterFactory[T]): Unit", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.saveToCassandra", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#saveToCassandra(keyspaceName:String,tableName:String,columnNames:com.khulnasoft.spark.connector.ColumnSelector,writeConf:com.khulnasoft.spark.connector.writer.WriteConf)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitrwf:com.khulnasoft.spark.connector.writer.RowWriterFactory[T]):Unit", "kind" : "def"}, {"label" : "conf", "tail" : "(): SparkConf", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.conf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#conf:org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.sparkContext", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "warnIfKeepAliveIsShort", "tail" : "(): Unit", "member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions.warnIfKeepAliveIsShort", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#warnIfKeepAliveIsShort():Unit", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.streaming.DStreamFunctions#<init>", "error" : "unsupported entity"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "com.khulnasoft.spark.connector.util.Logging.isTraceEnabled", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logError", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logWarning", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logTrace", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logDebug", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "com.khulnasoft.spark.connector.util.Logging.logInfo", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "com.khulnasoft.spark.connector.util.Logging.log", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "com.khulnasoft.spark.connector.util.Logging.logName", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/streaming\/DStreamFunctions.html", "kind" : "class"}, {"name" : "com.khulnasoft.spark.connector.streaming.StreamingContextFunctions", "shortDescription" : "Provides Cassandra-specific methods on org.apache.spark.streaming.StreamingContext.", "members_class" : [{"label" : "cassandraTable", "tail" : "(keyspace: String, table: String)(connector: CassandraConnector, readConf: ReadConf, ct: ClassTag[T], rrf: RowReaderFactory[T], ev: ValidRDDType[T]): CassandraStreamingRDD[T]", "member" : "com.khulnasoft.spark.connector.streaming.StreamingContextFunctions.cassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#cassandraTable[T](keyspace:String,table:String)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitreadConf:com.khulnasoft.spark.connector.rdd.ReadConf,implicitct:scala.reflect.ClassTag[T],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[T]):com.khulnasoft.spark.connector.streaming.CassandraStreamingRDD[T]", "kind" : "def"}, {"member" : "com.khulnasoft.spark.connector.streaming.StreamingContextFunctions#<init>", "error" : "unsupported entity"}, {"label" : "emptyCassandraTable", "tail" : "(keyspace: String, table: String)(connector: CassandraConnector, readConf: ReadConf, ct: ClassTag[T], rrf: RowReaderFactory[T], ev: ValidRDDType[T]): EmptyCassandraRDD[T]", "member" : "com.khulnasoft.spark.connector.SparkContextFunctions.emptyCassandraTable", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#emptyCassandraTable[T](keyspace:String,table:String)(implicitconnector:com.khulnasoft.spark.connector.cql.CassandraConnector,implicitreadConf:com.khulnasoft.spark.connector.rdd.ReadConf,implicitct:scala.reflect.ClassTag[T],implicitrrf:com.khulnasoft.spark.connector.rdd.reader.RowReaderFactory[T],implicitev:com.khulnasoft.spark.connector.rdd.ValidRDDType[T]):com.khulnasoft.spark.connector.rdd.EmptyCassandraRDD[T]", "kind" : "def"}, {"label" : "sc", "tail" : ": SparkContext", "member" : "com.khulnasoft.spark.connector.SparkContextFunctions.sc", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#sc:org.apache.spark.SparkContext", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/khulnasoft\/spark\/connector\/streaming\/StreamingContextFunctions.html", "kind" : "class"}]};